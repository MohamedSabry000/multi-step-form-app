/*! For license information please see bundle.js.LICENSE.txt */
!function(){var e={1424:function(e,t,n){"use strict";var i=n(7537),o=n.n(i),r=n(3645),a=n.n(r)()(o());a.push([e.id,"* {\n  box-sizing: border-box;\n }\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n.App {\n  font-family: sans-serif;\n  text-align: center;\n}\n\n#home, #slices, #print {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#home button {\n  cursor: pointer;\n  background: #181a18;\n  position: absolute;\n  padding: 13px 53px;\n  border: 1px solid #FFF;\n  border-radius: 5px;\n  color: #FFF;\n  font-size: x-large;\n  font-weight: bold;\n}\n\n#slices .form {\n  position: absolute;\n  color: #FFF;\n  background: #181a18;\n  border: 1px solid #FFF;\n  border-radius: 5px;\n  padding: 20px;\n}\n\n#slices .form .error, #slices .form .required {\n  color: red;\n  font-size: small;\n}\n\n#slices .form .form-control {\n  padding: 15px;\n}\n\n#slices .form .form-control label {\n  margin-right: 10px;\n  display: inline-block;\n  width: 33%;\n}\n\n#slices .form .form-control input, #slices .form .form-control select {\n  display: inline-block;\n  width: 62%;\n  padding: 7px;\n  border: 1px solid #FFF;\n  border-radius: 2px;\n}\n\n#slices .form .form-control button {\n  background: #181a18;\n  color: #FFF;\n  font-weight: bold;\n  font-size: medium;\n  padding: 5px 10px;\n  border: 1px solid #FFF;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: 0.5s ease-in-out;\n}\n\n#slices .form .form-control button:hover {\n  background-color: #FFF;\n  color: #181a18;\n}\n\n#slices .form .form-control button:disabled {\n  background-color: #FFF;\n  color: #181a18;\n}\n\n#print pre {\n  position: absolute;\n  background: #181a18;\n  color: #FFF;\n  border: 1px solid #FFF;\n  padding: 20px;\n}","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,sBAAsB;CACvB;AACD;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,kBAAkB;EAClB,sBAAsB;EACtB,kBAAkB;EAClB,WAAW;EACX,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;EAClB,aAAa;AACf;;AAEA;EACE,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,qBAAqB;EACrB,UAAU;AACZ;;AAEA;EACE,qBAAqB;EACrB,UAAU;EACV,YAAY;EACZ,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;EACnB,WAAW;EACX,iBAAiB;EACjB,iBAAiB;EACjB,iBAAiB;EACjB,sBAAsB;EACtB,kBAAkB;EAClB,eAAe;EACf,4BAA4B;AAC9B;;AAEA;EACE,sBAAsB;EACtB,cAAc;AAChB;;AAEA;EACE,sBAAsB;EACtB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,WAAW;EACX,sBAAsB;EACtB,aAAa;AACf",sourcesContent:["* {\n  box-sizing: border-box;\n }\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n.App {\n  font-family: sans-serif;\n  text-align: center;\n}\n\n#home, #slices, #print {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#home button {\n  cursor: pointer;\n  background: #181a18;\n  position: absolute;\n  padding: 13px 53px;\n  border: 1px solid #FFF;\n  border-radius: 5px;\n  color: #FFF;\n  font-size: x-large;\n  font-weight: bold;\n}\n\n#slices .form {\n  position: absolute;\n  color: #FFF;\n  background: #181a18;\n  border: 1px solid #FFF;\n  border-radius: 5px;\n  padding: 20px;\n}\n\n#slices .form .error, #slices .form .required {\n  color: red;\n  font-size: small;\n}\n\n#slices .form .form-control {\n  padding: 15px;\n}\n\n#slices .form .form-control label {\n  margin-right: 10px;\n  display: inline-block;\n  width: 33%;\n}\n\n#slices .form .form-control input, #slices .form .form-control select {\n  display: inline-block;\n  width: 62%;\n  padding: 7px;\n  border: 1px solid #FFF;\n  border-radius: 2px;\n}\n\n#slices .form .form-control button {\n  background: #181a18;\n  color: #FFF;\n  font-weight: bold;\n  font-size: medium;\n  padding: 5px 10px;\n  border: 1px solid #FFF;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: 0.5s ease-in-out;\n}\n\n#slices .form .form-control button:hover {\n  background-color: #FFF;\n  color: #181a18;\n}\n\n#slices .form .form-control button:disabled {\n  background-color: #FFF;\n  color: #181a18;\n}\n\n#print pre {\n  position: absolute;\n  background: #181a18;\n  color: #FFF;\n  border: 1px solid #FFF;\n  padding: 20px;\n}"],sourceRoot:""}]),t.Z=a},3645:function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,o,r){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(i)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);i&&a[u[0]]||(void 0!==r&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=r),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},7537:function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([r]).join("\n")}return[t].join("\n")}},8252:function(e){"use strict";e.exports=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var i,o,r;if(Array.isArray(t)){if((i=t.length)!=n.length)return!1;for(o=i;0!=o--;)if(!e(t[o],n[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((i=(r=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(o=i;0!=o--;)if(!Object.prototype.hasOwnProperty.call(n,r[o]))return!1;for(o=i;0!=o--;){var a=r[o];if(!("_owner"===a&&t.$$typeof||e(t[a],n[a])))return!1}return!0}return t!=t&&n!=n}},8679:function(e,t,n){"use strict";var i=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return i.isMemo(e)?a:s[e.$$typeof]||o}s[i.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[i.Memo]=a;var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,h=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,i){if("string"!=typeof n){if(p){var o=f(n);o&&o!==p&&e(t,o,i)}var a=u(n);d&&(a=a.concat(d(n)));for(var s=l(t),v=l(n),y=0;y<a.length;++y){var g=a[y];if(!(r[g]||i&&i[g]||v&&v[g]||s&&s[g])){var m=h(n,g);try{c(t,g,m)}catch(e){}}}}return t}},6103:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,i=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,h=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,m=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case u:case d:case r:case s:case a:case f:return e;default:switch(e=e&&e.$$typeof){case c:case h:case y:case v:case l:return e;default:return t}}case o:return t}}}function _(e){return S(e)===d}t.AsyncMode=u,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=l,t.Element=i,t.ForwardRef=h,t.Fragment=r,t.Lazy=y,t.Memo=v,t.Portal=o,t.Profiler=s,t.StrictMode=a,t.Suspense=f,t.isAsyncMode=function(e){return _(e)||S(e)===u},t.isConcurrentMode=_,t.isContextConsumer=function(e){return S(e)===c},t.isContextProvider=function(e){return S(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return S(e)===h},t.isFragment=function(e){return S(e)===r},t.isLazy=function(e){return S(e)===y},t.isMemo=function(e){return S(e)===v},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===s},t.isStrictMode=function(e){return S(e)===a},t.isSuspense=function(e){return S(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===r||e===d||e===s||e===a||e===f||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===l||e.$$typeof===c||e.$$typeof===h||e.$$typeof===m||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=S},1296:function(e,t,n){"use strict";e.exports=n(6103)},4448:function(e,t,n){"use strict";var i=n(7294),o=n(3840);function r(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)a.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function v(e,t,n,i,o,r,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=i,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=r,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function m(e){return e[1].toUpperCase()}function b(e,t,n,i){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0!==o.type:i||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,i){if(null==t||function(e,t,n,i){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,i)&&(n=null),i||null===o?function(e){return!!d.call(p,e)||!d.call(f,e)&&(h.test(e)?p[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,i=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,i?e.setAttributeNS(i,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,m);y[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,m);y[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,m);y[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),_=Symbol.for("react.portal"),P=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),O=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),k=Symbol.for("react.context"),E=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),M=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),T=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var V=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var j=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=j&&e[j]||e["@@iterator"])?e:null}var z,I=Object.assign;function G(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var D=!1;function F(e,t){if(!e||D)return"";D=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var i=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){i=e}e.call(t.prototype)}else{try{throw Error()}catch(e){i=e}e()}}catch(t){if(t&&i&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),r=i.stack.split("\n"),a=o.length-1,s=r.length-1;1<=a&&0<=s&&o[a]!==r[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==r[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==r[s]){var l="\n"+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=s);break}}}finally{D=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?G(e):""}function N(e){switch(e.tag){case 5:return G(e.type);case 16:return G("Lazy");case 13:return G("Suspense");case 19:return G("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case P:return"Fragment";case _:return"Portal";case O:return"Profiler";case x:return"StrictMode";case A:return"Suspense";case M:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case k:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case E:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case T:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function U(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,r=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){i=""+e,r.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(e){i=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),i="";return e&&(i=W(e)?e.checked?"true":"false":e.value),(e=i)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,i=null!=t.checked?t.checked:t.defaultChecked;n=U(null!=t.value?t.value:n),e._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){Y(e,t);var n=U(t.value),i=t.type;if(null!=n)"number"===i?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===i||"reset"===i)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,U(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!("submit"!==i&&"reset"!==i||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,i){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&i&&(e[n].defaultSelected=!0)}else{for(n=""+U(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(i&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ie(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(r(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(r(92));if(te(n)){if(1<n.length)throw Error(r(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:U(n)}}function re(e,t){var n=U(t.value),i=U(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=i&&(e.defaultValue=""+i)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,i){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function he(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function ve(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function ye(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var i=0===n.indexOf("--"),o=ve(n,t[n],i);"float"===n&&(n="cssFloat"),i?e.setProperty(n,o):e[n]=o}}Object.keys(fe).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ge=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function me(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(r(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(r(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(r(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(r(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _e=null,Pe=null,xe=null;function Oe(e){if(e=wo(e)){if("function"!=typeof _e)throw Error(r(280));var t=e.stateNode;t&&(t=_o(t),_e(e.stateNode,e.type,t))}}function Ce(e){Pe?xe?xe.push(e):xe=[e]:Pe=e}function ke(){if(Pe){var e=Pe,t=xe;if(xe=Pe=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Ee(e,t){return e(t)}function Ae(){}var Me=!1;function Re(e,t,n){if(Me)return e(t,n);Me=!0;try{return Ee(e,t,n)}finally{Me=!1,(null!==Pe||null!==xe)&&(Ae(),ke())}}function Te(e,t){var n=e.stateNode;if(null===n)return null;var i=_o(n);if(null===i)return null;n=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!i;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(r(231,t,typeof n));return n}var Ve=!1;if(u)try{var je={};Object.defineProperty(je,"passive",{get:function(){Ve=!0}}),window.addEventListener("test",je,je),window.removeEventListener("test",je,je)}catch(ue){Ve=!1}function Le(e,t,n,i,o,r,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var ze=!1,Ie=null,Ge=!1,De=null,Fe={onError:function(e){ze=!0,Ie=e}};function Ne(e,t,n,i,o,r,a,s,l){ze=!1,Ie=null,Le.apply(Fe,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ue(e){if(Be(e)!==e)throw Error(r(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(r(188));return t!==e?null:e}for(var n=e,i=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(i=o.return)){n=i;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ue(o),e;if(a===i)return Ue(o),t;a=a.sibling}throw Error(r(188))}if(n.return!==i.return)n=o,i=a;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,i=a;break}if(l===i){s=!0,i=o,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,i=o;break}if(l===i){s=!0,i=a,n=o;break}l=l.sibling}if(!s)throw Error(r(189))}}if(n.alternate!==i)throw Error(r(190))}if(3!==n.tag)throw Error(r(188));return n.stateNode.current===n?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var $e=o.unstable_scheduleCallback,Qe=o.unstable_cancelCallback,Ke=o.unstable_shouldYield,Xe=o.unstable_requestPaint,Ye=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,it=o.unstable_IdlePriority,ot=null,rt=null,at=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ct=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ht(e,t){var n=e.pendingLanes;if(0===n)return 0;var i=0,o=e.suspendedLanes,r=e.pingedLanes,a=268435455&n;if(0!==a){var s=a&~o;0!==s?i=dt(s):0!=(r&=a)&&(i=dt(r))}else 0!=(a=n&~o)?i=dt(a):0!==r&&(i=dt(r));if(0===i)return 0;if(0!==t&&t!==i&&0==(t&o)&&((o=i&-i)>=(r=t&-t)||16===o&&0!=(4194240&r)))return t;if(0!=(4&i)&&(i|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=i;0<t;)o=1<<(n=31-at(t)),i|=e[n],t&=~o;return i}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function vt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function yt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function mt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var i=31-at(n),o=1<<i;o&t|e[i]&t&&(e[i]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var St,_t,Pt,xt,Ot,Ct=!1,kt=[],Et=null,At=null,Mt=null,Rt=new Map,Tt=new Map,Vt=[],jt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":Et=null;break;case"dragenter":case"dragleave":At=null;break;case"mouseover":case"mouseout":Mt=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function zt(e,t,n,i,o,r){return null===e||e.nativeEvent!==r?(e={blockedOn:t,domEventName:n,eventSystemFlags:i,nativeEvent:r,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&_t(t),e):(e.eventSystemFlags|=i,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function It(e){var t=bo(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Ot(e.priority,(function(){Pt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&_t(t),e.blockedOn=n,!1;var i=new(n=e.nativeEvent).constructor(n.type,n);we=i,n.target.dispatchEvent(i),we=null,t.shift()}return!0}function Dt(e,t,n){Gt(e)&&n.delete(t)}function Ft(){Ct=!1,null!==Et&&Gt(Et)&&(Et=null),null!==At&&Gt(At)&&(At=null),null!==Mt&&Gt(Mt)&&(Mt=null),Rt.forEach(Dt),Tt.forEach(Dt)}function Nt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function Bt(e){function t(t){return Nt(t,e)}if(0<kt.length){Nt(kt[0],e);for(var n=1;n<kt.length;n++){var i=kt[n];i.blockedOn===e&&(i.blockedOn=null)}}for(null!==Et&&Nt(Et,e),null!==At&&Nt(At,e),null!==Mt&&Nt(Mt,e),Rt.forEach(t),Tt.forEach(t),n=0;n<Vt.length;n++)(i=Vt[n]).blockedOn===e&&(i.blockedOn=null);for(;0<Vt.length&&null===(n=Vt[0]).blockedOn;)It(n),null===n.blockedOn&&Vt.shift()}var Ht=w.ReactCurrentBatchConfig,Ut=!0;function Wt(e,t,n,i){var o=bt,r=Ht.transition;Ht.transition=null;try{bt=1,$t(e,t,n,i)}finally{bt=o,Ht.transition=r}}function qt(e,t,n,i){var o=bt,r=Ht.transition;Ht.transition=null;try{bt=4,$t(e,t,n,i)}finally{bt=o,Ht.transition=r}}function $t(e,t,n,i){if(Ut){var o=Kt(e,t,n,i);if(null===o)Ui(e,t,i,Qt,n),Lt(e,i);else if(function(e,t,n,i,o){switch(t){case"focusin":return Et=zt(Et,e,t,n,i,o),!0;case"dragenter":return At=zt(At,e,t,n,i,o),!0;case"mouseover":return Mt=zt(Mt,e,t,n,i,o),!0;case"pointerover":var r=o.pointerId;return Rt.set(r,zt(Rt.get(r)||null,e,t,n,i,o)),!0;case"gotpointercapture":return r=o.pointerId,Tt.set(r,zt(Tt.get(r)||null,e,t,n,i,o)),!0}return!1}(o,e,t,n,i))i.stopPropagation();else if(Lt(e,i),4&t&&-1<jt.indexOf(e)){for(;null!==o;){var r=wo(o);if(null!==r&&St(r),null===(r=Kt(e,t,n,i))&&Ui(e,t,i,Qt,n),r===o)break;o=r}null!==o&&i.stopPropagation()}else Ui(e,t,i,null,n)}}var Qt=null;function Kt(e,t,n,i){if(Qt=null,null!==(e=bo(e=Se(i))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case it:return 536870912;default:return 16}default:return 16}}var Yt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,i=n.length,o="value"in Yt?Yt.value:Yt.textContent,r=o.length;for(e=0;e<i&&n[e]===o[e];e++);var a=i-e;for(t=1;t<=a&&n[i-t]===o[r-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function on(){return!1}function rn(e){function t(t,n,i,o,r){for(var a in this._reactName=t,this._targetInst=i,this.type=n,this.nativeEvent=o,this.target=r,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:on,this.isPropagationStopped=on,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=rn(cn),dn=I({},cn,{view:0,detail:0}),hn=rn(dn),fn=I({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),pn=rn(fn),vn=rn(I({},fn,{dataTransfer:0})),yn=rn(I({},dn,{relatedTarget:0})),gn=rn(I({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),mn=I({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=rn(mn),wn=rn(I({},cn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},_n={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Pn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Pn[e])&&!!t[e]}function On(){return xn}var Cn=I({},dn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?_n[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),kn=rn(Cn),En=rn(I({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),An=rn(I({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Mn=rn(I({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=I({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Tn=rn(Rn),Vn=[9,13,27,32],jn=u&&"CompositionEvent"in window,Ln=null;u&&"documentMode"in document&&(Ln=document.documentMode);var zn=u&&"TextEvent"in window&&!Ln,In=u&&(!jn||Ln&&8<Ln&&11>=Ln),Gn=String.fromCharCode(32),Dn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Vn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Nn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Wn(e,t,n,i){Ce(i),0<(t=qi(t,"onChange")).length&&(n=new un("onChange","change",null,n,i),e.push({event:n,listeners:t}))}var qn=null,$n=null;function Qn(e){Gi(e,0)}function Kn(e){if($(So(e)))return e}function Xn(e,t){if("change"===e)return t}var Yn=!1;if(u){var Zn;if(u){var Jn="oninput"in document;if(!Jn){var ei=document.createElement("div");ei.setAttribute("oninput","return;"),Jn="function"==typeof ei.oninput}Zn=Jn}else Zn=!1;Yn=Zn&&(!document.documentMode||9<document.documentMode)}function ti(){qn&&(qn.detachEvent("onpropertychange",ni),$n=qn=null)}function ni(e){if("value"===e.propertyName&&Kn($n)){var t=[];Wn(t,$n,e,Se(e)),Re(Qn,t)}}function ii(e,t,n){"focusin"===e?(ti(),$n=n,(qn=t).attachEvent("onpropertychange",ni)):"focusout"===e&&ti()}function oi(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn($n)}function ri(e,t){if("click"===e)return Kn(t)}function ai(e,t){if("input"===e||"change"===e)return Kn(t)}var si="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function li(e,t){if(si(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++){var o=n[i];if(!d.call(t,o)||!si(e[o],t[o]))return!1}return!0}function ci(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ui(e,t){var n,i=ci(e);for(e=0;i;){if(3===i.nodeType){if(n=e+i.textContent.length,e<=t&&n>=t)return{node:i,offset:t-e};e=n}e:{for(;i;){if(i.nextSibling){i=i.nextSibling;break e}i=i.parentNode}i=void 0}i=ci(i)}}function di(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?di(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hi(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function fi(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pi(e){var t=hi(),n=e.focusedElem,i=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&di(n.ownerDocument.documentElement,n)){if(null!==i&&fi(n))if(t=i.start,void 0===(e=i.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,r=Math.min(i.start,o);i=void 0===i.end?r:Math.min(i.end,o),!e.extend&&r>i&&(o=i,i=r,r=o),o=ui(n,r);var a=ui(n,i);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),r>i?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var vi=u&&"documentMode"in document&&11>=document.documentMode,yi=null,gi=null,mi=null,bi=!1;function wi(e,t,n){var i=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;bi||null==yi||yi!==Q(i)||(i="selectionStart"in(i=yi)&&fi(i)?{start:i.selectionStart,end:i.selectionEnd}:{anchorNode:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset},mi&&li(mi,i)||(mi=i,0<(i=qi(gi,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:i}),t.target=yi)))}function Si(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var _i={animationend:Si("Animation","AnimationEnd"),animationiteration:Si("Animation","AnimationIteration"),animationstart:Si("Animation","AnimationStart"),transitionend:Si("Transition","TransitionEnd")},Pi={},xi={};function Oi(e){if(Pi[e])return Pi[e];if(!_i[e])return e;var t,n=_i[e];for(t in n)if(n.hasOwnProperty(t)&&t in xi)return Pi[e]=n[t];return e}u&&(xi=document.createElement("div").style,"AnimationEvent"in window||(delete _i.animationend.animation,delete _i.animationiteration.animation,delete _i.animationstart.animation),"TransitionEvent"in window||delete _i.transitionend.transition);var Ci=Oi("animationend"),ki=Oi("animationiteration"),Ei=Oi("animationstart"),Ai=Oi("transitionend"),Mi=new Map,Ri="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ti(e,t){Mi.set(e,t),l(t,[e])}for(var Vi=0;Vi<Ri.length;Vi++){var ji=Ri[Vi];Ti(ji.toLowerCase(),"on"+(ji[0].toUpperCase()+ji.slice(1)))}Ti(Ci,"onAnimationEnd"),Ti(ki,"onAnimationIteration"),Ti(Ei,"onAnimationStart"),Ti("dblclick","onDoubleClick"),Ti("focusin","onFocus"),Ti("focusout","onBlur"),Ti(Ai,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Li="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zi=new Set("cancel close invalid load scroll toggle".split(" ").concat(Li));function Ii(e,t,n){var i=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,i,o,a,s,l,c){if(Ne.apply(this,arguments),ze){if(!ze)throw Error(r(198));var u=Ie;ze=!1,Ie=null,Ge||(Ge=!0,De=u)}}(i,t,void 0,e),e.currentTarget=null}function Gi(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var i=e[n],o=i.event;i=i.listeners;e:{var r=void 0;if(t)for(var a=i.length-1;0<=a;a--){var s=i[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==r&&o.isPropagationStopped())break e;Ii(o,s,c),r=l}else for(a=0;a<i.length;a++){if(l=(s=i[a]).instance,c=s.currentTarget,s=s.listener,l!==r&&o.isPropagationStopped())break e;Ii(o,s,c),r=l}}}if(Ge)throw e=De,Ge=!1,De=null,e}function Di(e,t){var n=t[yo];void 0===n&&(n=t[yo]=new Set);var i=e+"__bubble";n.has(i)||(Hi(t,e,2,!1),n.add(i))}function Fi(e,t,n){var i=0;t&&(i|=4),Hi(n,e,i,t)}var Ni="_reactListening"+Math.random().toString(36).slice(2);function Bi(e){if(!e[Ni]){e[Ni]=!0,a.forEach((function(t){"selectionchange"!==t&&(zi.has(t)||Fi(t,!1,e),Fi(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ni]||(t[Ni]=!0,Fi("selectionchange",!1,t))}}function Hi(e,t,n,i){switch(Xt(t)){case 1:var o=Wt;break;case 4:o=qt;break;default:o=$t}n=o.bind(null,t,n,e),o=void 0,!Ve||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),i?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ui(e,t,n,i,o){var r=i;if(0==(1&t)&&0==(2&t)&&null!==i)e:for(;;){if(null===i)return;var a=i.tag;if(3===a||4===a){var s=i.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=i.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=bo(s)))return;if(5===(l=a.tag)||6===l){i=r=a;continue e}s=s.parentNode}}i=i.return}Re((function(){var i=r,o=Se(n),a=[];e:{var s=Mi.get(e);if(void 0!==s){var l=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=kn;break;case"focusin":c="focus",l=yn;break;case"focusout":c="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=An;break;case Ci:case ki:case Ei:l=gn;break;case Ai:l=Mn;break;case"scroll":l=hn;break;case"wheel":l=Tn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=En}var u=0!=(4&t),d=!u&&"scroll"===e,h=u?null!==s?s+"Capture":null:s;u=[];for(var f,p=i;null!==p;){var v=(f=p).stateNode;if(5===f.tag&&null!==v&&(f=v,null!==h&&null!=(v=Te(p,h))&&u.push(Wi(p,v,f))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,o),a.push({event:s,listeners:u}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===we||!(c=n.relatedTarget||n.fromElement)||!bo(c)&&!c[vo])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=i,null!==(c=(c=n.relatedTarget||n.toElement)?bo(c):null)&&(c!==(d=Be(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=i),l!==c)){if(u=pn,v="onMouseLeave",h="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=En,v="onPointerLeave",h="onPointerEnter",p="pointer"),d=null==l?s:So(l),f=null==c?s:So(c),(s=new u(v,p+"leave",l,n,o)).target=d,s.relatedTarget=f,v=null,bo(o)===i&&((u=new u(h,p+"enter",c,n,o)).target=f,u.relatedTarget=d,v=u),d=v,l&&c)e:{for(h=c,p=0,f=u=l;f;f=$i(f))p++;for(f=0,v=h;v;v=$i(v))f++;for(;0<p-f;)u=$i(u),p--;for(;0<f-p;)h=$i(h),f--;for(;p--;){if(u===h||null!==h&&u===h.alternate)break e;u=$i(u),h=$i(h)}u=null}else u=null;null!==l&&Qi(a,s,l,u,!1),null!==c&&null!==d&&Qi(a,d,c,u,!0)}if("select"===(l=(s=i?So(i):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var y=Xn;else if(Un(s))if(Yn)y=ai;else{y=oi;var g=ii}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(y=ri);switch(y&&(y=y(e,i))?Wn(a,y,n,o):(g&&g(e,s,i),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&ee(s,"number",s.value)),g=i?So(i):window,e){case"focusin":(Un(g)||"true"===g.contentEditable)&&(yi=g,gi=i,mi=null);break;case"focusout":mi=gi=yi=null;break;case"mousedown":bi=!0;break;case"contextmenu":case"mouseup":case"dragend":bi=!1,wi(a,n,o);break;case"selectionchange":if(vi)break;case"keydown":case"keyup":wi(a,n,o)}var m;if(jn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(m=en()):(Zt="value"in(Yt=o)?Yt.value:Yt.textContent,Bn=!0)),0<(g=qi(i,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:g}),(m||null!==(m=Nn(n)))&&(b.data=m))),(m=zn?function(e,t){switch(e){case"compositionend":return Nn(t);case"keypress":return 32!==t.which?null:(Dn=!0,Gn);case"textInput":return(e=t.data)===Gn&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!jn&&Fn(e,t)?(e=en(),Jt=Zt=Yt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(i=qi(i,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:i}),o.data=m)}Gi(a,t)}))}function Wi(e,t,n){return{instance:e,listener:t,currentTarget:n}}function qi(e,t){for(var n=t+"Capture",i=[];null!==e;){var o=e,r=o.stateNode;5===o.tag&&null!==r&&(o=r,null!=(r=Te(e,n))&&i.unshift(Wi(e,r,o)),null!=(r=Te(e,t))&&i.push(Wi(e,r,o))),e=e.return}return i}function $i(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qi(e,t,n,i,o){for(var r=t._reactName,a=[];null!==n&&n!==i;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===i)break;5===s.tag&&null!==c&&(s=c,o?null!=(l=Te(n,r))&&a.unshift(Wi(n,l,s)):o||null!=(l=Te(n,r))&&a.push(Wi(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Ki=/\r\n?/g,Xi=/\u0000|\uFFFD/g;function Yi(e){return("string"==typeof e?e:""+e).replace(Ki,"\n").replace(Xi,"")}function Zi(e,t,n){if(t=Yi(t),Yi(e)!==t&&n)throw Error(r(425))}function Ji(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var io="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ro="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==ro?function(e){return ro.resolve(null).then(e).catch(so)}:io;function so(e){setTimeout((function(){throw e}))}function lo(e,t){var n=t,i=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===i)return e.removeChild(o),void Bt(t);i--}else"$"!==n&&"$?"!==n&&"$!"!==n||i++;n=o}while(n);Bt(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function uo(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var ho=Math.random().toString(36).slice(2),fo="__reactFiber$"+ho,po="__reactProps$"+ho,vo="__reactContainer$"+ho,yo="__reactEvents$"+ho,go="__reactListeners$"+ho,mo="__reactHandles$"+ho;function bo(e){var t=e[fo];if(t)return t;for(var n=e.parentNode;n;){if(t=n[vo]||n[fo]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=uo(e);null!==e;){if(n=e[fo])return n;e=uo(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[fo]||e[vo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function So(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(r(33))}function _o(e){return e[po]||null}var Po=[],xo=-1;function Oo(e){return{current:e}}function Co(e){0>xo||(e.current=Po[xo],Po[xo]=null,xo--)}function ko(e,t){xo++,Po[xo]=e.current,e.current=t}var Eo={},Ao=Oo(Eo),Mo=Oo(!1),Ro=Eo;function To(e,t){var n=e.type.contextTypes;if(!n)return Eo;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var o,r={};for(o in n)r[o]=t[o];return i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=r),r}function Vo(e){return null!=e.childContextTypes}function jo(){Co(Mo),Co(Ao)}function Lo(e,t,n){if(Ao.current!==Eo)throw Error(r(168));ko(Ao,t),ko(Mo,n)}function zo(e,t,n){var i=e.stateNode;if(t=t.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var o in i=i.getChildContext())if(!(o in t))throw Error(r(108,H(e)||"Unknown",o));return I({},n,i)}function Io(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Eo,Ro=Ao.current,ko(Ao,e),ko(Mo,Mo.current),!0}function Go(e,t,n){var i=e.stateNode;if(!i)throw Error(r(169));n?(e=zo(e,t,Ro),i.__reactInternalMemoizedMergedChildContext=e,Co(Mo),Co(Ao),ko(Ao,e)):Co(Mo),ko(Mo,n)}var Do=null,Fo=!1,No=!1;function Bo(e){null===Do?Do=[e]:Do.push(e)}function Ho(){if(!No&&null!==Do){No=!0;var e=0,t=bt;try{var n=Do;for(bt=1;e<n.length;e++){var i=n[e];do{i=i(!0)}while(null!==i)}Do=null,Fo=!1}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),$e(Je,Ho),t}finally{bt=t,No=!1}}return null}var Uo=[],Wo=0,qo=null,$o=0,Qo=[],Ko=0,Xo=null,Yo=1,Zo="";function Jo(e,t){Uo[Wo++]=$o,Uo[Wo++]=qo,qo=e,$o=t}function er(e,t,n){Qo[Ko++]=Yo,Qo[Ko++]=Zo,Qo[Ko++]=Xo,Xo=e;var i=Yo;e=Zo;var o=32-at(i)-1;i&=~(1<<o),n+=1;var r=32-at(t)+o;if(30<r){var a=o-o%5;r=(i&(1<<a)-1).toString(32),i>>=a,o-=a,Yo=1<<32-at(t)+o|n<<o|i,Zo=r+e}else Yo=1<<r|n<<o|i,Zo=e}function tr(e){null!==e.return&&(Jo(e,1),er(e,1,0))}function nr(e){for(;e===qo;)qo=Uo[--Wo],Uo[Wo]=null,$o=Uo[--Wo],Uo[Wo]=null;for(;e===Xo;)Xo=Qo[--Ko],Qo[Ko]=null,Zo=Qo[--Ko],Qo[Ko]=null,Yo=Qo[--Ko],Qo[Ko]=null}var ir=null,or=null,rr=!1,ar=null;function sr(e,t){var n=Rc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lr(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ir=e,or=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ir=e,or=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Xo?{id:Yo,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Rc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ir=e,or=null,!0);default:return!1}}function cr(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ur(e){if(rr){var t=or;if(t){var n=t;if(!lr(e,t)){if(cr(e))throw Error(r(418));t=co(n.nextSibling);var i=ir;t&&lr(e,t)?sr(i,n):(e.flags=-4097&e.flags|2,rr=!1,ir=e)}}else{if(cr(e))throw Error(r(418));e.flags=-4097&e.flags|2,rr=!1,ir=e}}}function dr(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ir=e}function hr(e){if(e!==ir)return!1;if(!rr)return dr(e),rr=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=or)){if(cr(e))throw fr(),Error(r(418));for(;t;)sr(e,t),t=co(t.nextSibling)}if(dr(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(r(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){or=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}or=null}}else or=ir?co(e.stateNode.nextSibling):null;return!0}function fr(){for(var e=or;e;)e=co(e.nextSibling)}function pr(){or=ir=null,rr=!1}function vr(e){null===ar?ar=[e]:ar.push(e)}var yr=w.ReactCurrentBatchConfig;function gr(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var mr=Oo(null),br=null,wr=null,Sr=null;function _r(){Sr=wr=br=null}function Pr(e){var t=mr.current;Co(mr),e._currentValue=t}function xr(e,t,n){for(;null!==e;){var i=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==i&&(i.childLanes|=t)):null!==i&&(i.childLanes&t)!==t&&(i.childLanes|=t),e===n)break;e=e.return}}function Or(e,t){br=e,Sr=wr=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ws=!0),e.firstContext=null)}function Cr(e){var t=e._currentValue;if(Sr!==e)if(e={context:e,memoizedValue:t,next:null},null===wr){if(null===br)throw Error(r(308));wr=e,br.dependencies={lanes:0,firstContext:e}}else wr=wr.next=e;return t}var kr=null;function Er(e){null===kr?kr=[e]:kr.push(e)}function Ar(e,t,n,i){var o=t.interleaved;return null===o?(n.next=n,Er(t)):(n.next=o.next,o.next=n),t.interleaved=n,Mr(e,i)}function Mr(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Rr=!1;function Tr(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Vr(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function jr(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Lr(e,t,n){var i=e.updateQueue;if(null===i)return null;if(i=i.shared,0!=(2&El)){var o=i.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),i.pending=t,Mr(e,n)}return null===(o=i.interleaved)?(t.next=t,Er(i)):(t.next=o.next,o.next=t),i.interleaved=t,Mr(e,n)}function zr(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var i=t.lanes;n|=i&=e.pendingLanes,t.lanes=n,mt(e,n)}}function Ir(e,t){var n=e.updateQueue,i=e.alternate;if(null!==i&&n===(i=i.updateQueue)){var o=null,r=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===r?o=r=a:r=r.next=a,n=n.next}while(null!==n);null===r?o=r=t:r=r.next=t}else o=r=t;return n={baseState:i.baseState,firstBaseUpdate:o,lastBaseUpdate:r,shared:i.shared,effects:i.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Gr(e,t,n,i){var o=e.updateQueue;Rr=!1;var r=o.firstBaseUpdate,a=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var l=s,c=l.next;l.next=null,null===a?r=c:a.next=c,a=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==a&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==r){var d=o.baseState;for(a=0,u=c=l=null,s=r;;){var h=s.lane,f=s.eventTime;if((i&h)===h){null!==u&&(u=u.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,v=s;switch(h=t,f=n,v.tag){case 1:if("function"==typeof(p=v.payload)){d=p.call(f,d,h);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(h="function"==typeof(p=v.payload)?p.call(f,d,h):p))break e;d=I({},d,h);break e;case 2:Rr=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(h=o.effects)?o.effects=[s]:h.push(s))}else f={eventTime:f,lane:h,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=f,l=d):u=u.next=f,a|=h;if(null===(s=s.next)){if(null===(s=o.shared.pending))break;s=(h=s).next,h.next=null,o.lastBaseUpdate=h,o.shared.pending=null}}if(null===u&&(l=d),o.baseState=l,o.firstBaseUpdate=c,o.lastBaseUpdate=u,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===r&&(o.shared.lanes=0);zl|=a,e.lanes=a,e.memoizedState=d}}function Dr(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var i=e[t],o=i.callback;if(null!==o){if(i.callback=null,i=n,"function"!=typeof o)throw Error(r(191,o));o.call(i)}}}var Fr=(new i.Component).refs;function Nr(e,t,n,i){n=null==(n=n(i,t=e.memoizedState))?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Br={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var i=ec(),o=tc(e),r=jr(i,o);r.payload=t,null!=n&&(r.callback=n),null!==(t=Lr(e,r,o))&&(nc(t,e,o,i),zr(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var i=ec(),o=tc(e),r=jr(i,o);r.tag=1,r.payload=t,null!=n&&(r.callback=n),null!==(t=Lr(e,r,o))&&(nc(t,e,o,i),zr(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),i=tc(e),o=jr(n,i);o.tag=2,null!=t&&(o.callback=t),null!==(t=Lr(e,o,i))&&(nc(t,e,i,n),zr(t,e,i))}};function Hr(e,t,n,i,o,r,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(i,r,a):!(t.prototype&&t.prototype.isPureReactComponent&&li(n,i)&&li(o,r))}function Ur(e,t,n){var i=!1,o=Eo,r=t.contextType;return"object"==typeof r&&null!==r?r=Cr(r):(o=Vo(t)?Ro:Ao.current,r=(i=null!=(i=t.contextTypes))?To(e,o):Eo),t=new t(n,r),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Br,e.stateNode=t,t._reactInternals=e,i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=r),t}function Wr(e,t,n,i){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,i),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,i),t.state!==e&&Br.enqueueReplaceState(t,t.state,null)}function qr(e,t,n,i){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Fr,Tr(e);var r=t.contextType;"object"==typeof r&&null!==r?o.context=Cr(r):(r=Vo(t)?Ro:Ao.current,o.context=To(e,r)),o.state=e.memoizedState,"function"==typeof(r=t.getDerivedStateFromProps)&&(Nr(e,t,r,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Br.enqueueReplaceState(o,o.state,null),Gr(e,n,o,i),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function $r(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(r(309));var i=n.stateNode}if(!i)throw Error(r(147,e));var o=i,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Fr&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(r(284));if(!n._owner)throw Error(r(290,e))}return e}function Qr(e,t){throw e=Object.prototype.toString.call(t),Error(r(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Kr(e){return(0,e._init)(e._payload)}function Xr(e){function t(t,n){if(e){var i=t.deletions;null===i?(t.deletions=[n],t.flags|=16):i.push(n)}}function n(n,i){if(!e)return null;for(;null!==i;)t(n,i),i=i.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Vc(e,t)).index=0,e.sibling=null,e}function a(t,n,i){return t.index=i,e?null!==(i=t.alternate)?(i=i.index)<n?(t.flags|=2,n):i:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,i){return null===t||6!==t.tag?((t=Ic(n,e.mode,i)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,i){var r=n.type;return r===P?d(e,t,n.props.children,i,n.key):null!==t&&(t.elementType===r||"object"==typeof r&&null!==r&&r.$$typeof===T&&Kr(r)===t.type)?((i=o(t,n.props)).ref=$r(e,t,n),i.return=e,i):((i=jc(n.type,n.key,n.props,null,e.mode,i)).ref=$r(e,t,n),i.return=e,i)}function u(e,t,n,i){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gc(n,e.mode,i)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,i,r){return null===t||7!==t.tag?((t=Lc(n,e.mode,i,r)).return=e,t):((t=o(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ic(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=jc(t.type,t.key,t.props,null,e.mode,n)).ref=$r(e,null,t),n.return=e,n;case _:return(t=Gc(t,e.mode,n)).return=e,t;case T:return h(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Lc(t,e.mode,n,null)).return=e,t;Qr(e,t)}return null}function f(e,t,n,i){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:l(e,t,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?c(e,t,n,i):null;case _:return n.key===o?u(e,t,n,i):null;case T:return f(e,t,(o=n._init)(n._payload),i)}if(te(n)||L(n))return null!==o?null:d(e,t,n,i,null);Qr(e,n)}return null}function p(e,t,n,i,o){if("string"==typeof i&&""!==i||"number"==typeof i)return l(t,e=e.get(n)||null,""+i,o);if("object"==typeof i&&null!==i){switch(i.$$typeof){case S:return c(t,e=e.get(null===i.key?n:i.key)||null,i,o);case _:return u(t,e=e.get(null===i.key?n:i.key)||null,i,o);case T:return p(e,t,n,(0,i._init)(i._payload),o)}if(te(i)||L(i))return d(t,e=e.get(n)||null,i,o,null);Qr(t,i)}return null}function v(o,r,s,l){for(var c=null,u=null,d=r,v=r=0,y=null;null!==d&&v<s.length;v++){d.index>v?(y=d,d=null):y=d.sibling;var g=f(o,d,s[v],l);if(null===g){null===d&&(d=y);break}e&&d&&null===g.alternate&&t(o,d),r=a(g,r,v),null===u?c=g:u.sibling=g,u=g,d=y}if(v===s.length)return n(o,d),rr&&Jo(o,v),c;if(null===d){for(;v<s.length;v++)null!==(d=h(o,s[v],l))&&(r=a(d,r,v),null===u?c=d:u.sibling=d,u=d);return rr&&Jo(o,v),c}for(d=i(o,d);v<s.length;v++)null!==(y=p(d,o,v,s[v],l))&&(e&&null!==y.alternate&&d.delete(null===y.key?v:y.key),r=a(y,r,v),null===u?c=y:u.sibling=y,u=y);return e&&d.forEach((function(e){return t(o,e)})),rr&&Jo(o,v),c}function y(o,s,l,c){var u=L(l);if("function"!=typeof u)throw Error(r(150));if(null==(l=u.call(l)))throw Error(r(151));for(var d=u=null,v=s,y=s=0,g=null,m=l.next();null!==v&&!m.done;y++,m=l.next()){v.index>y?(g=v,v=null):g=v.sibling;var b=f(o,v,m.value,c);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(o,v),s=a(b,s,y),null===d?u=b:d.sibling=b,d=b,v=g}if(m.done)return n(o,v),rr&&Jo(o,y),u;if(null===v){for(;!m.done;y++,m=l.next())null!==(m=h(o,m.value,c))&&(s=a(m,s,y),null===d?u=m:d.sibling=m,d=m);return rr&&Jo(o,y),u}for(v=i(o,v);!m.done;y++,m=l.next())null!==(m=p(v,o,y,m.value,c))&&(e&&null!==m.alternate&&v.delete(null===m.key?y:m.key),s=a(m,s,y),null===d?u=m:d.sibling=m,d=m);return e&&v.forEach((function(e){return t(o,e)})),rr&&Jo(o,y),u}return function e(i,r,a,l){if("object"==typeof a&&null!==a&&a.type===P&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case S:e:{for(var c=a.key,u=r;null!==u;){if(u.key===c){if((c=a.type)===P){if(7===u.tag){n(i,u.sibling),(r=o(u,a.props.children)).return=i,i=r;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===T&&Kr(c)===u.type){n(i,u.sibling),(r=o(u,a.props)).ref=$r(i,u,a),r.return=i,i=r;break e}n(i,u);break}t(i,u),u=u.sibling}a.type===P?((r=Lc(a.props.children,i.mode,l,a.key)).return=i,i=r):((l=jc(a.type,a.key,a.props,null,i.mode,l)).ref=$r(i,r,a),l.return=i,i=l)}return s(i);case _:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(i,r.sibling),(r=o(r,a.children||[])).return=i,i=r;break e}n(i,r);break}t(i,r),r=r.sibling}(r=Gc(a,i.mode,l)).return=i,i=r}return s(i);case T:return e(i,r,(u=a._init)(a._payload),l)}if(te(a))return v(i,r,a,l);if(L(a))return y(i,r,a,l);Qr(i,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==r&&6===r.tag?(n(i,r.sibling),(r=o(r,a)).return=i,i=r):(n(i,r),(r=Ic(a,i.mode,l)).return=i,i=r),s(i)):n(i,r)}}var Yr=Xr(!0),Zr=Xr(!1),Jr={},ea=Oo(Jr),ta=Oo(Jr),na=Oo(Jr);function ia(e){if(e===Jr)throw Error(r(174));return e}function oa(e,t){switch(ko(na,t),ko(ta,e),ko(ea,Jr),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Co(ea),ko(ea,t)}function ra(){Co(ea),Co(ta),Co(na)}function aa(e){ia(na.current);var t=ia(ea.current),n=le(t,e.type);t!==n&&(ko(ta,e),ko(ea,n))}function sa(e){ta.current===e&&(Co(ea),Co(ta))}var la=Oo(0);function ca(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ua=[];function da(){for(var e=0;e<ua.length;e++)ua[e]._workInProgressVersionPrimary=null;ua.length=0}var ha=w.ReactCurrentDispatcher,fa=w.ReactCurrentBatchConfig,pa=0,va=null,ya=null,ga=null,ma=!1,ba=!1,wa=0,Sa=0;function _a(){throw Error(r(321))}function Pa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!si(e[n],t[n]))return!1;return!0}function xa(e,t,n,i,o,a){if(pa=a,va=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ha.current=null===e||null===e.memoizedState?ss:ls,e=n(i,o),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(r(301));a+=1,ga=ya=null,t.updateQueue=null,ha.current=cs,e=n(i,o)}while(ba)}if(ha.current=as,t=null!==ya&&null!==ya.next,pa=0,ga=ya=va=null,ma=!1,t)throw Error(r(300));return e}function Oa(){var e=0!==wa;return wa=0,e}function Ca(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ga?va.memoizedState=ga=e:ga=ga.next=e,ga}function ka(){if(null===ya){var e=va.alternate;e=null!==e?e.memoizedState:null}else e=ya.next;var t=null===ga?va.memoizedState:ga.next;if(null!==t)ga=t,ya=e;else{if(null===e)throw Error(r(310));e={memoizedState:(ya=e).memoizedState,baseState:ya.baseState,baseQueue:ya.baseQueue,queue:ya.queue,next:null},null===ga?va.memoizedState=ga=e:ga=ga.next=e}return ga}function Ea(e,t){return"function"==typeof t?t(e):t}function Aa(e){var t=ka(),n=t.queue;if(null===n)throw Error(r(311));n.lastRenderedReducer=e;var i=ya,o=i.baseQueue,a=n.pending;if(null!==a){if(null!==o){var s=o.next;o.next=a.next,a.next=s}i.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,i=i.baseState;var l=s=null,c=null,u=a;do{var d=u.lane;if((pa&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),i=u.hasEagerState?u.eagerState:e(i,u.action);else{var h={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=h,s=i):c=c.next=h,va.lanes|=d,zl|=d}u=u.next}while(null!==u&&u!==a);null===c?s=i:c.next=l,si(i,t.memoizedState)||(ws=!0),t.memoizedState=i,t.baseState=s,t.baseQueue=c,n.lastRenderedState=i}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,va.lanes|=a,zl|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ma(e){var t=ka(),n=t.queue;if(null===n)throw Error(r(311));n.lastRenderedReducer=e;var i=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{a=e(a,s.action),s=s.next}while(s!==o);si(a,t.memoizedState)||(ws=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,i]}function Ra(){}function Ta(e,t){var n=va,i=ka(),o=t(),a=!si(i.memoizedState,o);if(a&&(i.memoizedState=o,ws=!0),i=i.queue,Ua(La.bind(null,n,i,e),[e]),i.getSnapshot!==t||a||null!==ga&&1&ga.memoizedState.tag){if(n.flags|=2048,Da(9,ja.bind(null,n,i,o,t),void 0,null),null===Al)throw Error(r(349));0!=(30&pa)||Va(n,t,o)}return o}function Va(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=va.updateQueue)?(t={lastEffect:null,stores:null},va.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function ja(e,t,n,i){t.value=n,t.getSnapshot=i,za(t)&&Ia(e)}function La(e,t,n){return n((function(){za(t)&&Ia(e)}))}function za(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!si(e,n)}catch(e){return!0}}function Ia(e){var t=Mr(e,1);null!==t&&nc(t,e,1,-1)}function Ga(e){var t=Ca();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ea,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,va,e),[t.memoizedState,e]}function Da(e,t,n,i){return e={tag:e,create:t,destroy:n,deps:i,next:null},null===(t=va.updateQueue)?(t={lastEffect:null,stores:null},va.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(i=n.next,n.next=e,e.next=i,t.lastEffect=e),e}function Fa(){return ka().memoizedState}function Na(e,t,n,i){var o=Ca();va.flags|=e,o.memoizedState=Da(1|t,n,void 0,void 0===i?null:i)}function Ba(e,t,n,i){var o=ka();i=void 0===i?null:i;var r=void 0;if(null!==ya){var a=ya.memoizedState;if(r=a.destroy,null!==i&&Pa(i,a.deps))return void(o.memoizedState=Da(t,n,r,i))}va.flags|=e,o.memoizedState=Da(1|t,n,r,i)}function Ha(e,t){return Na(8390656,8,e,t)}function Ua(e,t){return Ba(2048,8,e,t)}function Wa(e,t){return Ba(4,2,e,t)}function qa(e,t){return Ba(4,4,e,t)}function $a(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qa(e,t,n){return n=null!=n?n.concat([e]):null,Ba(4,4,$a.bind(null,t,e),n)}function Ka(){}function Xa(e,t){var n=ka();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&Pa(t,i[1])?i[0]:(n.memoizedState=[e,t],e)}function Ya(e,t){var n=ka();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&Pa(t,i[1])?i[0]:(e=e(),n.memoizedState=[e,t],e)}function Za(e,t,n){return 0==(21&pa)?(e.baseState&&(e.baseState=!1,ws=!0),e.memoizedState=n):(si(n,t)||(n=vt(),va.lanes|=n,zl|=n,e.baseState=!0),t)}function Ja(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var i=fa.transition;fa.transition={};try{e(!1),t()}finally{bt=n,fa.transition=i}}function es(){return ka().memoizedState}function ts(e,t,n){var i=tc(e);n={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null},is(e)?os(t,n):null!==(n=Ar(e,t,n,i))&&(nc(n,e,i,ec()),rs(n,t,i))}function ns(e,t,n){var i=tc(e),o={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null};if(is(e))os(t,o);else{var r=e.alternate;if(0===e.lanes&&(null===r||0===r.lanes)&&null!==(r=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=r(a,n);if(o.hasEagerState=!0,o.eagerState=s,si(s,a)){var l=t.interleaved;return null===l?(o.next=o,Er(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ar(e,t,o,i))&&(nc(n,e,i,o=ec()),rs(n,t,i))}}function is(e){var t=e.alternate;return e===va||null!==t&&t===va}function os(e,t){ba=ma=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function rs(e,t,n){if(0!=(4194240&n)){var i=t.lanes;n|=i&=e.pendingLanes,t.lanes=n,mt(e,n)}}var as={readContext:Cr,useCallback:_a,useContext:_a,useEffect:_a,useImperativeHandle:_a,useInsertionEffect:_a,useLayoutEffect:_a,useMemo:_a,useReducer:_a,useRef:_a,useState:_a,useDebugValue:_a,useDeferredValue:_a,useTransition:_a,useMutableSource:_a,useSyncExternalStore:_a,useId:_a,unstable_isNewReconciler:!1},ss={readContext:Cr,useCallback:function(e,t){return Ca().memoizedState=[e,void 0===t?null:t],e},useContext:Cr,useEffect:Ha,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Na(4194308,4,$a.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Na(4194308,4,e,t)},useInsertionEffect:function(e,t){return Na(4,2,e,t)},useMemo:function(e,t){var n=Ca();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var i=Ca();return t=void 0!==n?n(t):t,i.memoizedState=i.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},i.queue=e,e=e.dispatch=ts.bind(null,va,e),[i.memoizedState,e]},useRef:function(e){return e={current:e},Ca().memoizedState=e},useState:Ga,useDebugValue:Ka,useDeferredValue:function(e){return Ca().memoizedState=e},useTransition:function(){var e=Ga(!1),t=e[0];return e=Ja.bind(null,e[1]),Ca().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var i=va,o=Ca();if(rr){if(void 0===n)throw Error(r(407));n=n()}else{if(n=t(),null===Al)throw Error(r(349));0!=(30&pa)||Va(i,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Ha(La.bind(null,i,a,e),[e]),i.flags|=2048,Da(9,ja.bind(null,i,a,n,t),void 0,null),n},useId:function(){var e=Ca(),t=Al.identifierPrefix;if(rr){var n=Zo;t=":"+t+"R"+(n=(Yo&~(1<<32-at(Yo)-1)).toString(32)+n),0<(n=wa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Sa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ls={readContext:Cr,useCallback:Xa,useContext:Cr,useEffect:Ua,useImperativeHandle:Qa,useInsertionEffect:Wa,useLayoutEffect:qa,useMemo:Ya,useReducer:Aa,useRef:Fa,useState:function(){return Aa(Ea)},useDebugValue:Ka,useDeferredValue:function(e){return Za(ka(),ya.memoizedState,e)},useTransition:function(){return[Aa(Ea)[0],ka().memoizedState]},useMutableSource:Ra,useSyncExternalStore:Ta,useId:es,unstable_isNewReconciler:!1},cs={readContext:Cr,useCallback:Xa,useContext:Cr,useEffect:Ua,useImperativeHandle:Qa,useInsertionEffect:Wa,useLayoutEffect:qa,useMemo:Ya,useReducer:Ma,useRef:Fa,useState:function(){return Ma(Ea)},useDebugValue:Ka,useDeferredValue:function(e){var t=ka();return null===ya?t.memoizedState=e:Za(t,ya.memoizedState,e)},useTransition:function(){return[Ma(Ea)[0],ka().memoizedState]},useMutableSource:Ra,useSyncExternalStore:Ta,useId:es,unstable_isNewReconciler:!1};function us(e,t){try{var n="",i=t;do{n+=N(i),i=i.return}while(i);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function ds(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function hs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fs="function"==typeof WeakMap?WeakMap:Map;function ps(e,t,n){(n=jr(-1,n)).tag=3,n.payload={element:null};var i=t.value;return n.callback=function(){Ul||(Ul=!0,Wl=i),hs(0,t)},n}function vs(e,t,n){(n=jr(-1,n)).tag=3;var i=e.type.getDerivedStateFromError;if("function"==typeof i){var o=t.value;n.payload=function(){return i(o)},n.callback=function(){hs(0,t)}}var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){hs(0,t),"function"!=typeof i&&(null===ql?ql=new Set([this]):ql.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ys(e,t,n){var i=e.pingCache;if(null===i){i=e.pingCache=new fs;var o=new Set;i.set(t,o)}else void 0===(o=i.get(t))&&(o=new Set,i.set(t,o));o.has(n)||(o.add(n),e=Oc.bind(null,e,t,n),t.then(e,e))}function gs(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function ms(e,t,n,i,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=jr(-1,1)).tag=2,Lr(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bs=w.ReactCurrentOwner,ws=!1;function Ss(e,t,n,i){t.child=null===e?Zr(t,null,n,i):Yr(t,e.child,n,i)}function _s(e,t,n,i,o){n=n.render;var r=t.ref;return Or(t,o),i=xa(e,t,n,i,r,o),n=Oa(),null===e||ws?(rr&&n&&tr(t),t.flags|=1,Ss(e,t,i,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Us(e,t,o))}function Ps(e,t,n,i,o){if(null===e){var r=n.type;return"function"!=typeof r||Tc(r)||void 0!==r.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=jc(n.type,null,i,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=r,xs(e,t,r,i,o))}if(r=e.child,0==(e.lanes&o)){var a=r.memoizedProps;if((n=null!==(n=n.compare)?n:li)(a,i)&&e.ref===t.ref)return Us(e,t,o)}return t.flags|=1,(e=Vc(r,i)).ref=t.ref,e.return=t,t.child=e}function xs(e,t,n,i,o){if(null!==e){var r=e.memoizedProps;if(li(r,i)&&e.ref===t.ref){if(ws=!1,t.pendingProps=i=r,0==(e.lanes&o))return t.lanes=e.lanes,Us(e,t,o);0!=(131072&e.flags)&&(ws=!0)}}return ks(e,t,n,i,o)}function Os(e,t,n){var i=t.pendingProps,o=i.children,r=null!==e?e.memoizedState:null;if("hidden"===i.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},ko(Vl,Tl),Tl|=n;else{if(0==(1073741824&n))return e=null!==r?r.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,ko(Vl,Tl),Tl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},i=null!==r?r.baseLanes:n,ko(Vl,Tl),Tl|=i}else null!==r?(i=r.baseLanes|n,t.memoizedState=null):i=n,ko(Vl,Tl),Tl|=i;return Ss(e,t,o,n),t.child}function Cs(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function ks(e,t,n,i,o){var r=Vo(n)?Ro:Ao.current;return r=To(t,r),Or(t,o),n=xa(e,t,n,i,r,o),i=Oa(),null===e||ws?(rr&&i&&tr(t),t.flags|=1,Ss(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Us(e,t,o))}function Es(e,t,n,i,o){if(Vo(n)){var r=!0;Io(t)}else r=!1;if(Or(t,o),null===t.stateNode)Hs(e,t),Ur(t,n,i),qr(t,n,i,o),i=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?Cr(c):To(t,c=Vo(n)?Ro:Ao.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==i||l!==c)&&Wr(t,a,i,c),Rr=!1;var h=t.memoizedState;a.state=h,Gr(t,i,a,o),l=t.memoizedState,s!==i||h!==l||Mo.current||Rr?("function"==typeof u&&(Nr(t,n,u,i),l=t.memoizedState),(s=Rr||Hr(t,n,s,i,h,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=i,t.memoizedState=l),a.props=i,a.state=l,a.context=c,i=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),i=!1)}else{a=t.stateNode,Vr(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:gr(t.type,s),a.props=c,d=t.pendingProps,h=a.context,l="object"==typeof(l=n.contextType)&&null!==l?Cr(l):To(t,l=Vo(n)?Ro:Ao.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||h!==l)&&Wr(t,a,i,l),Rr=!1,h=t.memoizedState,a.state=h,Gr(t,i,a,o);var p=t.memoizedState;s!==d||h!==p||Mo.current||Rr?("function"==typeof f&&(Nr(t,n,f,i),p=t.memoizedState),(c=Rr||Hr(t,n,c,i,h,p,l)||!1)?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(i,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(i,p,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),t.memoizedProps=i,t.memoizedState=p),a.props=i,a.state=p,a.context=l,i=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),i=!1)}return As(e,t,n,i,r,o)}function As(e,t,n,i,o,r){Cs(e,t);var a=0!=(128&t.flags);if(!i&&!a)return o&&Go(t,n,!1),Us(e,t,r);i=t.stateNode,bs.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return t.flags|=1,null!==e&&a?(t.child=Yr(t,e.child,null,r),t.child=Yr(t,null,s,r)):Ss(e,t,s,r),t.memoizedState=i.state,o&&Go(t,n,!0),t.child}function Ms(e){var t=e.stateNode;t.pendingContext?Lo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Lo(0,t.context,!1),oa(e,t.containerInfo)}function Rs(e,t,n,i,o){return pr(),vr(o),t.flags|=256,Ss(e,t,n,i),t.child}var Ts,Vs,js,Ls={dehydrated:null,treeContext:null,retryLane:0};function zs(e){return{baseLanes:e,cachePool:null,transitions:null}}function Is(e,t,n){var i,o=t.pendingProps,a=la.current,s=!1,l=0!=(128&t.flags);if((i=l)||(i=(null===e||null!==e.memoizedState)&&0!=(2&a)),i?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),ko(la,1&a),null===e)return ur(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=o.children,e=o.fallback,s?(o=t.mode,s=t.child,l={mode:"hidden",children:l},0==(1&o)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=zc(l,o,0,null),e=Lc(e,o,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=zs(n),t.memoizedState=Ls,e):Gs(t,l));if(null!==(a=e.memoizedState)&&null!==(i=a.dehydrated))return function(e,t,n,i,o,a,s){if(n)return 256&t.flags?(t.flags&=-257,Ds(e,t,s,i=ds(Error(r(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=i.fallback,o=t.mode,i=zc({mode:"visible",children:i.children},o,0,null),(a=Lc(a,o,s,null)).flags|=2,i.return=t,a.return=t,i.sibling=a,t.child=i,0!=(1&t.mode)&&Yr(t,e.child,null,s),t.child.memoizedState=zs(s),t.memoizedState=Ls,a);if(0==(1&t.mode))return Ds(e,t,s,null);if("$!"===o.data){if(i=o.nextSibling&&o.nextSibling.dataset)var l=i.dgst;return i=l,Ds(e,t,s,i=ds(a=Error(r(419)),i,void 0))}if(l=0!=(s&e.childLanes),ws||l){if(null!==(i=Al)){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(i.suspendedLanes|s))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Mr(e,o),nc(i,e,o,-1))}return vc(),Ds(e,t,s,i=ds(Error(r(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=kc.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,or=co(o.nextSibling),ir=t,rr=!0,ar=null,null!==e&&(Qo[Ko++]=Yo,Qo[Ko++]=Zo,Qo[Ko++]=Xo,Yo=e.id,Zo=e.overflow,Xo=t),(t=Gs(t,i.children)).flags|=4096,t)}(e,t,l,o,i,a,n);if(s){s=o.fallback,l=t.mode,i=(a=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&l)&&t.child!==a?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=Vc(a,c)).subtreeFlags=14680064&a.subtreeFlags,null!==i?s=Vc(i,s):(s=Lc(s,l,n,null)).flags|=2,s.return=t,o.return=t,o.sibling=s,t.child=o,o=s,s=t.child,l=null===(l=e.child.memoizedState)?zs(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Ls,o}return e=(s=e.child).sibling,o=Vc(s,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Gs(e,t){return(t=zc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ds(e,t,n,i){return null!==i&&vr(i),Yr(t,e.child,null,n),(e=Gs(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fs(e,t,n){e.lanes|=t;var i=e.alternate;null!==i&&(i.lanes|=t),xr(e.return,t,n)}function Ns(e,t,n,i,o){var r=e.memoizedState;null===r?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:o}:(r.isBackwards=t,r.rendering=null,r.renderingStartTime=0,r.last=i,r.tail=n,r.tailMode=o)}function Bs(e,t,n){var i=t.pendingProps,o=i.revealOrder,r=i.tail;if(Ss(e,t,i.children,n),0!=(2&(i=la.current)))i=1&i|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fs(e,n,t);else if(19===e.tag)Fs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}i&=1}if(ko(la,i),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ca(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ns(t,!1,o,n,r);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ca(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ns(t,!0,n,null,r);break;case"together":Ns(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Hs(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Us(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(r(153));if(null!==t.child){for(n=Vc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Vc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ws(e,t){if(!rr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var i=null;null!==n;)null!==n.alternate&&(i=n),n=n.sibling;null===i?t||null===e.tail?e.tail=null:e.tail.sibling=null:i.sibling=null}}function qs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,i=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,i|=14680064&o.subtreeFlags,i|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,i|=o.subtreeFlags,i|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=i,e.childLanes=n,t}function $s(e,t,n){var i=t.pendingProps;switch(nr(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return qs(t),null;case 1:case 17:return Vo(t.type)&&jo(),qs(t),null;case 3:return i=t.stateNode,ra(),Co(Mo),Co(Ao),da(),i.pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),null!==e&&null!==e.child||(hr(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ar&&(ac(ar),ar=null))),qs(t),null;case 5:sa(t);var o=ia(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Vs(e,t,n,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!i){if(null===t.stateNode)throw Error(r(166));return qs(t),null}if(e=ia(ea.current),hr(t)){i=t.stateNode,n=t.type;var a=t.memoizedProps;switch(i[fo]=t,i[po]=a,e=0!=(1&t.mode),n){case"dialog":Di("cancel",i),Di("close",i);break;case"iframe":case"object":case"embed":Di("load",i);break;case"video":case"audio":for(o=0;o<Li.length;o++)Di(Li[o],i);break;case"source":Di("error",i);break;case"img":case"image":case"link":Di("error",i),Di("load",i);break;case"details":Di("toggle",i);break;case"input":X(i,a),Di("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!a.multiple},Di("invalid",i);break;case"textarea":oe(i,a),Di("invalid",i)}for(var l in me(n,a),o=null,a)if(a.hasOwnProperty(l)){var c=a[l];"children"===l?"string"==typeof c?i.textContent!==c&&(!0!==a.suppressHydrationWarning&&Zi(i.textContent,c,e),o=["children",c]):"number"==typeof c&&i.textContent!==""+c&&(!0!==a.suppressHydrationWarning&&Zi(i.textContent,c,e),o=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Di("scroll",i)}switch(n){case"input":q(i),J(i,a,!0);break;case"textarea":q(i),ae(i);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(i.onclick=Ji)}i=o,t.updateQueue=i,null!==i&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof i.is?e=l.createElement(n,{is:i.is}):(e=l.createElement(n),"select"===n&&(l=e,i.multiple?l.multiple=!0:i.size&&(l.size=i.size))):e=l.createElementNS(e,n),e[fo]=t,e[po]=i,Ts(e,t),t.stateNode=e;e:{switch(l=be(n,i),n){case"dialog":Di("cancel",e),Di("close",e),o=i;break;case"iframe":case"object":case"embed":Di("load",e),o=i;break;case"video":case"audio":for(o=0;o<Li.length;o++)Di(Li[o],e);o=i;break;case"source":Di("error",e),o=i;break;case"img":case"image":case"link":Di("error",e),Di("load",e),o=i;break;case"details":Di("toggle",e),o=i;break;case"input":X(e,i),o=K(e,i),Di("invalid",e);break;case"option":default:o=i;break;case"select":e._wrapperState={wasMultiple:!!i.multiple},o=I({},i,{value:void 0}),Di("invalid",e);break;case"textarea":oe(e,i),o=ie(e,i),Di("invalid",e)}for(a in me(n,o),c=o)if(c.hasOwnProperty(a)){var u=c[a];"style"===a?ye(e,u):"dangerouslySetInnerHTML"===a?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===a?"string"==typeof u?("textarea"!==n||""!==u)&&he(e,u):"number"==typeof u&&he(e,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=u&&"onScroll"===a&&Di("scroll",e):null!=u&&b(e,a,u,l))}switch(n){case"input":q(e),J(e,i,!1);break;case"textarea":q(e),ae(e);break;case"option":null!=i.value&&e.setAttribute("value",""+U(i.value));break;case"select":e.multiple=!!i.multiple,null!=(a=i.value)?ne(e,!!i.multiple,a,!1):null!=i.defaultValue&&ne(e,!!i.multiple,i.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Ji)}switch(n){case"button":case"input":case"select":case"textarea":i=!!i.autoFocus;break e;case"img":i=!0;break e;default:i=!1}}i&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return qs(t),null;case 6:if(e&&null!=t.stateNode)js(0,t,e.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(r(166));if(n=ia(na.current),ia(ea.current),hr(t)){if(i=t.stateNode,n=t.memoizedProps,i[fo]=t,(a=i.nodeValue!==n)&&null!==(e=ir))switch(e.tag){case 3:Zi(i.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zi(i.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(i=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[fo]=t,t.stateNode=i}return qs(t),null;case 13:if(Co(la),i=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(rr&&null!==or&&0!=(1&t.mode)&&0==(128&t.flags))fr(),pr(),t.flags|=98560,a=!1;else if(a=hr(t),null!==i&&null!==i.dehydrated){if(null===e){if(!a)throw Error(r(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(r(317));a[fo]=t}else pr(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;qs(t),a=!1}else null!==ar&&(ac(ar),ar=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((i=null!==i)!=(null!==e&&null!==e.memoizedState)&&i&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&la.current)?0===jl&&(jl=3):vc())),null!==t.updateQueue&&(t.flags|=4),qs(t),null);case 4:return ra(),null===e&&Bi(t.stateNode.containerInfo),qs(t),null;case 10:return Pr(t.type._context),qs(t),null;case 19:if(Co(la),null===(a=t.memoizedState))return qs(t),null;if(i=0!=(128&t.flags),null===(l=a.rendering))if(i)Ws(a,!1);else{if(0!==jl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ca(e))){for(t.flags|=128,Ws(a,!1),null!==(i=l.updateQueue)&&(t.updateQueue=i,t.flags|=4),t.subtreeFlags=0,i=n,n=t.child;null!==n;)e=i,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ko(la,1&la.current|2),t.child}e=e.sibling}null!==a.tail&&Ye()>Bl&&(t.flags|=128,i=!0,Ws(a,!1),t.lanes=4194304)}else{if(!i)if(null!==(e=ca(l))){if(t.flags|=128,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Ws(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!rr)return qs(t),null}else 2*Ye()-a.renderingStartTime>Bl&&1073741824!==n&&(t.flags|=128,i=!0,Ws(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Ye(),t.sibling=null,n=la.current,ko(la,i?1&n|2:1&n),t):(qs(t),null);case 22:case 23:return dc(),i=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==i&&(t.flags|=8192),i&&0!=(1&t.mode)?0!=(1073741824&Tl)&&(qs(t),6&t.subtreeFlags&&(t.flags|=8192)):qs(t),null;case 24:case 25:return null}throw Error(r(156,t.tag))}function Qs(e,t){switch(nr(t),t.tag){case 1:return Vo(t.type)&&jo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ra(),Co(Mo),Co(Ao),da(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return sa(t),null;case 13:if(Co(la),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(r(340));pr()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Co(la),null;case 4:return ra(),null;case 10:return Pr(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Ts=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Vs=function(e,t,n,i){var o=e.memoizedProps;if(o!==i){e=t.stateNode,ia(ea.current);var r,a=null;switch(n){case"input":o=K(e,o),i=K(e,i),a=[];break;case"select":o=I({},o,{value:void 0}),i=I({},i,{value:void 0}),a=[];break;case"textarea":o=ie(e,o),i=ie(e,i),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof i.onClick&&(e.onclick=Ji)}for(u in me(n,i),n=null,o)if(!i.hasOwnProperty(u)&&o.hasOwnProperty(u)&&null!=o[u])if("style"===u){var l=o[u];for(r in l)l.hasOwnProperty(r)&&(n||(n={}),n[r]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?a||(a=[]):(a=a||[]).push(u,null));for(u in i){var c=i[u];if(l=null!=o?o[u]:void 0,i.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(r in l)!l.hasOwnProperty(r)||c&&c.hasOwnProperty(r)||(n||(n={}),n[r]="");for(r in c)c.hasOwnProperty(r)&&l[r]!==c[r]&&(n||(n={}),n[r]=c[r])}else n||(a||(a=[]),a.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(a=a||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Di("scroll",e),a||l===c||(a=[])):(a=a||[]).push(u,c))}n&&(a=a||[]).push("style",n);var u=a;(t.updateQueue=u)&&(t.flags|=4)}},js=function(e,t,n,i){n!==i&&(t.flags|=4)};var Ks=!1,Xs=!1,Ys="function"==typeof WeakSet?WeakSet:Set,Zs=null;function Js(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){xc(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){xc(e,t,n)}}var tl=!1;function nl(e,t,n){var i=t.updateQueue;if(null!==(i=null!==i?i.lastEffect:null)){var o=i=i.next;do{if((o.tag&e)===e){var r=o.destroy;o.destroy=void 0,void 0!==r&&el(t,n,r)}o=o.next}while(o!==i)}}function il(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var i=n.create;n.destroy=i()}n=n.next}while(n!==t)}}function ol(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function rl(e){var t=e.alternate;null!==t&&(e.alternate=null,rl(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fo],delete t[po],delete t[yo],delete t[go],delete t[mo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var i=e.tag;if(5===i||6===i)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ji));else if(4!==i&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function cl(e,t,n){var i=e.tag;if(5===i||6===i)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==i&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}var ul=null,dl=!1;function hl(e,t,n){for(n=n.child;null!==n;)fl(e,t,n),n=n.sibling}function fl(e,t,n){if(rt&&"function"==typeof rt.onCommitFiberUnmount)try{rt.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xs||Js(n,t);case 6:var i=ul,o=dl;ul=null,hl(e,t,n),dl=o,null!==(ul=i)&&(dl?(e=ul,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ul.removeChild(n.stateNode));break;case 18:null!==ul&&(dl?(e=ul,n=n.stateNode,8===e.nodeType?lo(e.parentNode,n):1===e.nodeType&&lo(e,n),Bt(e)):lo(ul,n.stateNode));break;case 4:i=ul,o=dl,ul=n.stateNode.containerInfo,dl=!0,hl(e,t,n),ul=i,dl=o;break;case 0:case 11:case 14:case 15:if(!Xs&&null!==(i=n.updateQueue)&&null!==(i=i.lastEffect)){o=i=i.next;do{var r=o,a=r.destroy;r=r.tag,void 0!==a&&(0!=(2&r)||0!=(4&r))&&el(n,t,a),o=o.next}while(o!==i)}hl(e,t,n);break;case 1:if(!Xs&&(Js(n,t),"function"==typeof(i=n.stateNode).componentWillUnmount))try{i.props=n.memoizedProps,i.state=n.memoizedState,i.componentWillUnmount()}catch(e){xc(n,t,e)}hl(e,t,n);break;case 21:hl(e,t,n);break;case 22:1&n.mode?(Xs=(i=Xs)||null!==n.memoizedState,hl(e,t,n),Xs=i):hl(e,t,n);break;default:hl(e,t,n)}}function pl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ys),t.forEach((function(t){var i=Ec.bind(null,e,t);n.has(t)||(n.add(t),t.then(i,i))}))}}function vl(e,t){var n=t.deletions;if(null!==n)for(var i=0;i<n.length;i++){var o=n[i];try{var a=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,dl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===ul)throw Error(r(160));fl(a,s,o),ul=null,dl=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){xc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yl(t,e),t=t.sibling}function yl(e,t){var n=e.alternate,i=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vl(t,e),gl(e),4&i){try{nl(3,e,e.return),il(3,e)}catch(t){xc(e,e.return,t)}try{nl(5,e,e.return)}catch(t){xc(e,e.return,t)}}break;case 1:vl(t,e),gl(e),512&i&&null!==n&&Js(n,n.return);break;case 5:if(vl(t,e),gl(e),512&i&&null!==n&&Js(n,n.return),32&e.flags){var o=e.stateNode;try{he(o,"")}catch(t){xc(e,e.return,t)}}if(4&i&&null!=(o=e.stateNode)){var a=e.memoizedProps,s=null!==n?n.memoizedProps:a,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===a.type&&null!=a.name&&Y(o,a),be(l,s);var u=be(l,a);for(s=0;s<c.length;s+=2){var d=c[s],h=c[s+1];"style"===d?ye(o,h):"dangerouslySetInnerHTML"===d?de(o,h):"children"===d?he(o,h):b(o,d,h,u)}switch(l){case"input":Z(o,a);break;case"textarea":re(o,a);break;case"select":var f=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var p=a.value;null!=p?ne(o,!!a.multiple,p,!1):f!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[po]=a}catch(t){xc(e,e.return,t)}}break;case 6:if(vl(t,e),gl(e),4&i){if(null===e.stateNode)throw Error(r(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){xc(e,e.return,t)}}break;case 3:if(vl(t,e),gl(e),4&i&&null!==n&&n.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){xc(e,e.return,t)}break;case 4:default:vl(t,e),gl(e);break;case 13:vl(t,e),gl(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Nl=Ye())),4&i&&pl(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xs=(u=Xs)||d,vl(t,e),Xs=u):vl(t,e),gl(e),8192&i){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&0!=(1&e.mode))for(Zs=e,d=e.child;null!==d;){for(h=Zs=d;null!==Zs;){switch(p=(f=Zs).child,f.tag){case 0:case 11:case 14:case 15:nl(4,f,f.return);break;case 1:Js(f,f.return);var v=f.stateNode;if("function"==typeof v.componentWillUnmount){i=f,n=f.return;try{t=i,v.props=t.memoizedProps,v.state=t.memoizedState,v.componentWillUnmount()}catch(e){xc(i,n,e)}}break;case 5:Js(f,f.return);break;case 22:if(null!==f.memoizedState){Sl(h);continue}}null!==p?(p.return=f,Zs=p):Sl(h)}d=d.sibling}e:for(d=null,h=e;;){if(5===h.tag){if(null===d){d=h;try{o=h.stateNode,u?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=h.stateNode,s=null!=(c=h.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=ve("display",s))}catch(t){xc(e,e.return,t)}}}else if(6===h.tag){if(null===d)try{h.stateNode.nodeValue=u?"":h.memoizedProps}catch(t){xc(e,e.return,t)}}else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===e)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===e)break e;for(;null===h.sibling;){if(null===h.return||h.return===e)break e;d===h&&(d=null),h=h.return}d===h&&(d=null),h.sibling.return=h.return,h=h.sibling}}break;case 19:vl(t,e),gl(e),4&i&&pl(e);case 21:}}function gl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var i=n;break e}n=n.return}throw Error(r(160))}switch(i.tag){case 5:var o=i.stateNode;32&i.flags&&(he(o,""),i.flags&=-33),cl(e,sl(e),o);break;case 3:case 4:var a=i.stateNode.containerInfo;ll(e,sl(e),a);break;default:throw Error(r(161))}}catch(t){xc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function ml(e,t,n){Zs=e,bl(e,t,n)}function bl(e,t,n){for(var i=0!=(1&e.mode);null!==Zs;){var o=Zs,r=o.child;if(22===o.tag&&i){var a=null!==o.memoizedState||Ks;if(!a){var s=o.alternate,l=null!==s&&null!==s.memoizedState||Xs;s=Ks;var c=Xs;if(Ks=a,(Xs=l)&&!c)for(Zs=o;null!==Zs;)l=(a=Zs).child,22===a.tag&&null!==a.memoizedState?_l(o):null!==l?(l.return=a,Zs=l):_l(o);for(;null!==r;)Zs=r,bl(r,t,n),r=r.sibling;Zs=o,Ks=s,Xs=c}wl(e)}else 0!=(8772&o.subtreeFlags)&&null!==r?(r.return=o,Zs=r):wl(e)}}function wl(e){for(;null!==Zs;){var t=Zs;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xs||il(5,t);break;case 1:var i=t.stateNode;if(4&t.flags&&!Xs)if(null===n)i.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:gr(t.type,n.memoizedProps);i.componentDidUpdate(o,n.memoizedState,i.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Dr(t,a,i);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Dr(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var h=d.dehydrated;null!==h&&Bt(h)}}}break;default:throw Error(r(163))}Xs||512&t.flags&&ol(t)}catch(e){xc(t,t.return,e)}}if(t===e){Zs=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zs=n;break}Zs=t.return}}function Sl(e){for(;null!==Zs;){var t=Zs;if(t===e){Zs=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zs=n;break}Zs=t.return}}function _l(e){for(;null!==Zs;){var t=Zs;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{il(4,t)}catch(e){xc(t,n,e)}break;case 1:var i=t.stateNode;if("function"==typeof i.componentDidMount){var o=t.return;try{i.componentDidMount()}catch(e){xc(t,o,e)}}var r=t.return;try{ol(t)}catch(e){xc(t,r,e)}break;case 5:var a=t.return;try{ol(t)}catch(e){xc(t,a,e)}}}catch(e){xc(t,t.return,e)}if(t===e){Zs=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Zs=s;break}Zs=t.return}}var Pl,xl=Math.ceil,Ol=w.ReactCurrentDispatcher,Cl=w.ReactCurrentOwner,kl=w.ReactCurrentBatchConfig,El=0,Al=null,Ml=null,Rl=0,Tl=0,Vl=Oo(0),jl=0,Ll=null,zl=0,Il=0,Gl=0,Dl=null,Fl=null,Nl=0,Bl=1/0,Hl=null,Ul=!1,Wl=null,ql=null,$l=!1,Ql=null,Kl=0,Xl=0,Yl=null,Zl=-1,Jl=0;function ec(){return 0!=(6&El)?Ye():-1!==Zl?Zl:Zl=Ye()}function tc(e){return 0==(1&e.mode)?1:0!=(2&El)&&0!==Rl?Rl&-Rl:null!==yr.transition?(0===Jl&&(Jl=vt()),Jl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Xt(e.type)}function nc(e,t,n,i){if(50<Xl)throw Xl=0,Yl=null,Error(r(185));gt(e,n,i),0!=(2&El)&&e===Al||(e===Al&&(0==(2&El)&&(Il|=n),4===jl&&sc(e,Rl)),ic(e,i),1===n&&0===El&&0==(1&t.mode)&&(Bl=Ye()+500,Fo&&Ho()))}function ic(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,i=e.pingedLanes,o=e.expirationTimes,r=e.pendingLanes;0<r;){var a=31-at(r),s=1<<a,l=o[a];-1===l?0!=(s&n)&&0==(s&i)||(o[a]=ft(s,t)):l<=t&&(e.expiredLanes|=s),r&=~s}}(e,t);var i=ht(e,e===Al?Rl:0);if(0===i)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=i&-i,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Fo=!0,Bo(e)}(lc.bind(null,e)):Bo(lc.bind(null,e)),ao((function(){0==(6&El)&&Ho()})),n=null;else{switch(wt(i)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=it}n=Ac(n,oc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function oc(e,t){if(Zl=-1,Jl=0,0!=(6&El))throw Error(r(327));var n=e.callbackNode;if(_c()&&e.callbackNode!==n)return null;var i=ht(e,e===Al?Rl:0);if(0===i)return null;if(0!=(30&i)||0!=(i&e.expiredLanes)||t)t=yc(e,i);else{t=i;var o=El;El|=2;var a=pc();for(Al===e&&Rl===t||(Hl=null,Bl=Ye()+500,hc(e,t));;)try{mc();break}catch(t){fc(e,t)}_r(),Ol.current=a,El=o,null!==Ml?t=0:(Al=null,Rl=0,t=jl)}if(0!==t){if(2===t&&0!==(o=pt(e))&&(i=o,t=rc(e,o)),1===t)throw n=Ll,hc(e,0),sc(e,i),ic(e,Ye()),n;if(6===t)sc(e,i);else{if(o=e.current.alternate,0==(30&i)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var i=0;i<n.length;i++){var o=n[i],r=o.getSnapshot;o=o.value;try{if(!si(r(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=yc(e,i))&&0!==(a=pt(e))&&(i=a,t=rc(e,a)),1===t))throw n=Ll,hc(e,0),sc(e,i),ic(e,Ye()),n;switch(e.finishedWork=o,e.finishedLanes=i,t){case 0:case 1:throw Error(r(345));case 2:case 5:Sc(e,Fl,Hl);break;case 3:if(sc(e,i),(130023424&i)===i&&10<(t=Nl+500-Ye())){if(0!==ht(e,0))break;if(((o=e.suspendedLanes)&i)!==i){ec(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=io(Sc.bind(null,e,Fl,Hl),t);break}Sc(e,Fl,Hl);break;case 4:if(sc(e,i),(4194240&i)===i)break;for(t=e.eventTimes,o=-1;0<i;){var s=31-at(i);a=1<<s,(s=t[s])>o&&(o=s),i&=~a}if(i=o,10<(i=(120>(i=Ye()-i)?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*xl(i/1960))-i)){e.timeoutHandle=io(Sc.bind(null,e,Fl,Hl),i);break}Sc(e,Fl,Hl);break;default:throw Error(r(329))}}}return ic(e,Ye()),e.callbackNode===n?oc.bind(null,e):null}function rc(e,t){var n=Dl;return e.current.memoizedState.isDehydrated&&(hc(e,t).flags|=256),2!==(e=yc(e,t))&&(t=Fl,Fl=n,null!==t&&ac(t)),e}function ac(e){null===Fl?Fl=e:Fl.push.apply(Fl,e)}function sc(e,t){for(t&=~Gl,t&=~Il,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),i=1<<n;e[n]=-1,t&=~i}}function lc(e){if(0!=(6&El))throw Error(r(327));_c();var t=ht(e,0);if(0==(1&t))return ic(e,Ye()),null;var n=yc(e,t);if(0!==e.tag&&2===n){var i=pt(e);0!==i&&(t=i,n=rc(e,i))}if(1===n)throw n=Ll,hc(e,0),sc(e,t),ic(e,Ye()),n;if(6===n)throw Error(r(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Sc(e,Fl,Hl),ic(e,Ye()),null}function cc(e,t){var n=El;El|=1;try{return e(t)}finally{0===(El=n)&&(Bl=Ye()+500,Fo&&Ho())}}function uc(e){null!==Ql&&0===Ql.tag&&0==(6&El)&&_c();var t=El;El|=1;var n=kl.transition,i=bt;try{if(kl.transition=null,bt=1,e)return e()}finally{bt=i,kl.transition=n,0==(6&(El=t))&&Ho()}}function dc(){Tl=Vl.current,Co(Vl)}function hc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Ml)for(n=Ml.return;null!==n;){var i=n;switch(nr(i),i.tag){case 1:null!=(i=i.type.childContextTypes)&&jo();break;case 3:ra(),Co(Mo),Co(Ao),da();break;case 5:sa(i);break;case 4:ra();break;case 13:case 19:Co(la);break;case 10:Pr(i.type._context);break;case 22:case 23:dc()}n=n.return}if(Al=e,Ml=e=Vc(e.current,null),Rl=Tl=t,jl=0,Ll=null,Gl=Il=zl=0,Fl=Dl=null,null!==kr){for(t=0;t<kr.length;t++)if(null!==(i=(n=kr[t]).interleaved)){n.interleaved=null;var o=i.next,r=n.pending;if(null!==r){var a=r.next;r.next=o,i.next=a}n.pending=i}kr=null}return e}function fc(e,t){for(;;){var n=Ml;try{if(_r(),ha.current=as,ma){for(var i=va.memoizedState;null!==i;){var o=i.queue;null!==o&&(o.pending=null),i=i.next}ma=!1}if(pa=0,ga=ya=va=null,ba=!1,wa=0,Cl.current=null,null===n||null===n.return){jl=1,Ll=t,Ml=null;break}e:{var a=e,s=n.return,l=n,c=t;if(t=Rl,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,h=d.tag;if(0==(1&d.mode)&&(0===h||11===h||15===h)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=gs(s);if(null!==p){p.flags&=-257,ms(p,s,l,0,t),1&p.mode&&ys(a,u,t),c=u;var v=(t=p).updateQueue;if(null===v){var y=new Set;y.add(c),t.updateQueue=y}else v.add(c);break e}if(0==(1&t)){ys(a,u,t),vc();break e}c=Error(r(426))}else if(rr&&1&l.mode){var g=gs(s);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),ms(g,s,l,0,t),vr(us(c,l));break e}}a=c=us(c,l),4!==jl&&(jl=2),null===Dl?Dl=[a]:Dl.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Ir(a,ps(0,c,t));break e;case 1:l=c;var m=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof m.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===ql||!ql.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,Ir(a,vs(a,l,t));break e}}a=a.return}while(null!==a)}wc(n)}catch(e){t=e,Ml===n&&null!==n&&(Ml=n=n.return);continue}break}}function pc(){var e=Ol.current;return Ol.current=as,null===e?as:e}function vc(){0!==jl&&3!==jl&&2!==jl||(jl=4),null===Al||0==(268435455&zl)&&0==(268435455&Il)||sc(Al,Rl)}function yc(e,t){var n=El;El|=2;var i=pc();for(Al===e&&Rl===t||(Hl=null,hc(e,t));;)try{gc();break}catch(t){fc(e,t)}if(_r(),El=n,Ol.current=i,null!==Ml)throw Error(r(261));return Al=null,Rl=0,jl}function gc(){for(;null!==Ml;)bc(Ml)}function mc(){for(;null!==Ml&&!Ke();)bc(Ml)}function bc(e){var t=Pl(e.alternate,e,Tl);e.memoizedProps=e.pendingProps,null===t?wc(e):Ml=t,Cl.current=null}function wc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=$s(n,t,Tl)))return void(Ml=n)}else{if(null!==(n=Qs(n,t)))return n.flags&=32767,void(Ml=n);if(null===e)return jl=6,void(Ml=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ml=t);Ml=t=e}while(null!==t);0===jl&&(jl=5)}function Sc(e,t,n){var i=bt,o=kl.transition;try{kl.transition=null,bt=1,function(e,t,n,i){do{_c()}while(null!==Ql);if(0!=(6&El))throw Error(r(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(r(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var i=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),r=1<<o;t[o]=0,i[o]=-1,e[o]=-1,n&=~r}}(e,a),e===Al&&(Ml=Al=null,Rl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||$l||($l=!0,Ac(tt,(function(){return _c(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=kl.transition,kl.transition=null;var s=bt;bt=1;var l=El;El|=4,Cl.current=null,function(e,t){if(eo=Ut,fi(e=hi())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var i=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(i&&0!==i.rangeCount){n=i.anchorNode;var o=i.anchorOffset,a=i.focusNode;i=i.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,l=-1,c=-1,u=0,d=0,h=e,f=null;t:for(;;){for(var p;h!==n||0!==o&&3!==h.nodeType||(l=s+o),h!==a||0!==i&&3!==h.nodeType||(c=s+i),3===h.nodeType&&(s+=h.nodeValue.length),null!==(p=h.firstChild);)f=h,h=p;for(;;){if(h===e)break t;if(f===n&&++u===o&&(l=s),f===a&&++d===i&&(c=s),null!==(p=h.nextSibling))break;f=(h=f).parentNode}h=p}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Ut=!1,Zs=t;null!==Zs;)if(e=(t=Zs).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zs=e;else for(;null!==Zs;){t=Zs;try{var v=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==v){var y=v.memoizedProps,g=v.memoizedState,m=t.stateNode,b=m.getSnapshotBeforeUpdate(t.elementType===t.type?y:gr(t.type,y),g);m.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(r(163))}}catch(e){xc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zs=e;break}Zs=t.return}v=tl,tl=!1}(e,n),yl(n,e),pi(to),Ut=!!eo,to=eo=null,e.current=n,ml(n,e,o),Xe(),El=l,bt=s,kl.transition=a}else e.current=n;if($l&&($l=!1,Ql=e,Kl=o),0===(a=e.pendingLanes)&&(ql=null),function(e){if(rt&&"function"==typeof rt.onCommitFiberRoot)try{rt.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ic(e,Ye()),null!==t)for(i=e.onRecoverableError,n=0;n<t.length;n++)i((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Ul)throw Ul=!1,e=Wl,Wl=null,e;0!=(1&Kl)&&0!==e.tag&&_c(),0!=(1&(a=e.pendingLanes))?e===Yl?Xl++:(Xl=0,Yl=e):Xl=0,Ho()}(e,t,n,i)}finally{kl.transition=o,bt=i}return null}function _c(){if(null!==Ql){var e=wt(Kl),t=kl.transition,n=bt;try{if(kl.transition=null,bt=16>e?16:e,null===Ql)var i=!1;else{if(e=Ql,Ql=null,Kl=0,0!=(6&El))throw Error(r(331));var o=El;for(El|=4,Zs=e.current;null!==Zs;){var a=Zs,s=a.child;if(0!=(16&Zs.flags)){var l=a.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Zs=u;null!==Zs;){var d=Zs;switch(d.tag){case 0:case 11:case 15:nl(8,d,a)}var h=d.child;if(null!==h)h.return=d,Zs=h;else for(;null!==Zs;){var f=(d=Zs).sibling,p=d.return;if(rl(d),d===u){Zs=null;break}if(null!==f){f.return=p,Zs=f;break}Zs=p}}}var v=a.alternate;if(null!==v){var y=v.child;if(null!==y){v.child=null;do{var g=y.sibling;y.sibling=null,y=g}while(null!==y)}}Zs=a}}if(0!=(2064&a.subtreeFlags)&&null!==s)s.return=a,Zs=s;else e:for(;null!==Zs;){if(0!=(2048&(a=Zs).flags))switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var m=a.sibling;if(null!==m){m.return=a.return,Zs=m;break e}Zs=a.return}}var b=e.current;for(Zs=b;null!==Zs;){var w=(s=Zs).child;if(0!=(2064&s.subtreeFlags)&&null!==w)w.return=s,Zs=w;else e:for(s=b;null!==Zs;){if(0!=(2048&(l=Zs).flags))try{switch(l.tag){case 0:case 11:case 15:il(9,l)}}catch(e){xc(l,l.return,e)}if(l===s){Zs=null;break e}var S=l.sibling;if(null!==S){S.return=l.return,Zs=S;break e}Zs=l.return}}if(El=o,Ho(),rt&&"function"==typeof rt.onPostCommitFiberRoot)try{rt.onPostCommitFiberRoot(ot,e)}catch(e){}i=!0}return i}finally{bt=n,kl.transition=t}}return!1}function Pc(e,t,n){e=Lr(e,t=ps(0,t=us(n,t),1),1),t=ec(),null!==e&&(gt(e,1,t),ic(e,t))}function xc(e,t,n){if(3===e.tag)Pc(e,e,n);else for(;null!==t;){if(3===t.tag){Pc(t,e,n);break}if(1===t.tag){var i=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===ql||!ql.has(i))){t=Lr(t,e=vs(t,e=us(n,e),1),1),e=ec(),null!==t&&(gt(t,1,e),ic(t,e));break}}t=t.return}}function Oc(e,t,n){var i=e.pingCache;null!==i&&i.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Al===e&&(Rl&n)===n&&(4===jl||3===jl&&(130023424&Rl)===Rl&&500>Ye()-Nl?hc(e,0):Gl|=n),ic(e,t)}function Cc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=ec();null!==(e=Mr(e,t))&&(gt(e,t,n),ic(e,n))}function kc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cc(e,n)}function Ec(e,t){var n=0;switch(e.tag){case 13:var i=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:i=e.stateNode;break;default:throw Error(r(314))}null!==i&&i.delete(t),Cc(e,n)}function Ac(e,t){return $e(e,t)}function Mc(e,t,n,i){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Rc(e,t,n,i){return new Mc(e,t,n,i)}function Tc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vc(e,t){var n=e.alternate;return null===n?((n=Rc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function jc(e,t,n,i,o,a){var s=2;if(i=e,"function"==typeof e)Tc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case P:return Lc(n.children,o,a,t);case x:s=8,o|=8;break;case O:return(e=Rc(12,n,t,2|o)).elementType=O,e.lanes=a,e;case A:return(e=Rc(13,n,t,o)).elementType=A,e.lanes=a,e;case M:return(e=Rc(19,n,t,o)).elementType=M,e.lanes=a,e;case V:return zc(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:s=10;break e;case k:s=9;break e;case E:s=11;break e;case R:s=14;break e;case T:s=16,i=null;break e}throw Error(r(130,null==e?e:typeof e,""))}return(t=Rc(s,n,t,o)).elementType=e,t.type=i,t.lanes=a,t}function Lc(e,t,n,i){return(e=Rc(7,e,i,t)).lanes=n,e}function zc(e,t,n,i){return(e=Rc(22,e,i,t)).elementType=V,e.lanes=n,e.stateNode={isHidden:!1},e}function Ic(e,t,n){return(e=Rc(6,e,null,t)).lanes=n,e}function Gc(e,t,n){return(t=Rc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Dc(e,t,n,i,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yt(0),this.expirationTimes=yt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yt(0),this.identifierPrefix=i,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Fc(e,t,n,i,o,r,a,s,l){return e=new Dc(e,t,n,s,l),1===t?(t=1,!0===r&&(t|=8)):t=0,r=Rc(3,null,null,t),e.current=r,r.stateNode=e,r.memoizedState={element:i,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Tr(r),e}function Nc(e,t,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:_,key:null==i?null:""+i,children:e,containerInfo:t,implementation:n}}function Bc(e){if(!e)return Eo;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(r(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Vo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(r(171))}if(1===e.tag){var n=e.type;if(Vo(n))return zo(e,n,t)}return t}function Hc(e,t,n,i,o,r,a,s,l){return(e=Fc(n,i,!0,e,0,r,0,s,l)).context=Bc(null),n=e.current,(r=jr(i=ec(),o=tc(n))).callback=null!=t?t:null,Lr(n,r,o),e.current.lanes=o,gt(e,o,i),ic(e,i),e}function Uc(e,t,n,i){var o=t.current,r=ec(),a=tc(o);return n=Bc(n),null===t.context?t.context=n:t.pendingContext=n,(t=jr(r,a)).payload={element:e},null!==(i=void 0===i?null:i)&&(t.callback=i),null!==(e=Lr(o,t,a))&&(nc(e,o,a,r),zr(e,o,a)),a}function Wc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function $c(e,t){qc(e,t),(e=e.alternate)&&qc(e,t)}Pl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Mo.current)ws=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ws=!1,function(e,t,n){switch(t.tag){case 3:Ms(t),pr();break;case 5:aa(t);break;case 1:Vo(t.type)&&Io(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var i=t.type._context,o=t.memoizedProps.value;ko(mr,i._currentValue),i._currentValue=o;break;case 13:if(null!==(i=t.memoizedState))return null!==i.dehydrated?(ko(la,1&la.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Is(e,t,n):(ko(la,1&la.current),null!==(e=Us(e,t,n))?e.sibling:null);ko(la,1&la.current);break;case 19:if(i=0!=(n&t.childLanes),0!=(128&e.flags)){if(i)return Bs(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),ko(la,la.current),i)break;return null;case 22:case 23:return t.lanes=0,Os(e,t,n)}return Us(e,t,n)}(e,t,n);ws=0!=(131072&e.flags)}else ws=!1,rr&&0!=(1048576&t.flags)&&er(t,$o,t.index);switch(t.lanes=0,t.tag){case 2:var i=t.type;Hs(e,t),e=t.pendingProps;var o=To(t,Ao.current);Or(t,n),o=xa(null,t,i,e,o,n);var a=Oa();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Vo(i)?(a=!0,Io(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Tr(t),o.updater=Br,t.stateNode=o,o._reactInternals=t,qr(t,i,e,n),t=As(null,t,i,!0,a,n)):(t.tag=0,rr&&a&&tr(t),Ss(null,t,o,n),t=t.child),t;case 16:i=t.elementType;e:{switch(Hs(e,t),e=t.pendingProps,i=(o=i._init)(i._payload),t.type=i,o=t.tag=function(e){if("function"==typeof e)return Tc(e)?1:0;if(null!=e){if((e=e.$$typeof)===E)return 11;if(e===R)return 14}return 2}(i),e=gr(i,e),o){case 0:t=ks(null,t,i,e,n);break e;case 1:t=Es(null,t,i,e,n);break e;case 11:t=_s(null,t,i,e,n);break e;case 14:t=Ps(null,t,i,gr(i.type,e),n);break e}throw Error(r(306,i,""))}return t;case 0:return i=t.type,o=t.pendingProps,ks(e,t,i,o=t.elementType===i?o:gr(i,o),n);case 1:return i=t.type,o=t.pendingProps,Es(e,t,i,o=t.elementType===i?o:gr(i,o),n);case 3:e:{if(Ms(t),null===e)throw Error(r(387));i=t.pendingProps,o=(a=t.memoizedState).element,Vr(e,t),Gr(t,i,null,n);var s=t.memoizedState;if(i=s.element,a.isDehydrated){if(a={element:i,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Rs(e,t,i,n,o=us(Error(r(423)),t));break e}if(i!==o){t=Rs(e,t,i,n,o=us(Error(r(424)),t));break e}for(or=co(t.stateNode.containerInfo.firstChild),ir=t,rr=!0,ar=null,n=Zr(t,null,i,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pr(),i===o){t=Us(e,t,n);break e}Ss(e,t,i,n)}t=t.child}return t;case 5:return aa(t),null===e&&ur(t),i=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,s=o.children,no(i,o)?s=null:null!==a&&no(i,a)&&(t.flags|=32),Cs(e,t),Ss(e,t,s,n),t.child;case 6:return null===e&&ur(t),null;case 13:return Is(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),i=t.pendingProps,null===e?t.child=Yr(t,null,i,n):Ss(e,t,i,n),t.child;case 11:return i=t.type,o=t.pendingProps,_s(e,t,i,o=t.elementType===i?o:gr(i,o),n);case 7:return Ss(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ss(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(i=t.type._context,o=t.pendingProps,a=t.memoizedProps,s=o.value,ko(mr,i._currentValue),i._currentValue=s,null!==a)if(si(a.value,s)){if(a.children===o.children&&!Mo.current){t=Us(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var c=l.firstContext;null!==c;){if(c.context===i){if(1===a.tag){(c=jr(-1,n&-n)).tag=2;var u=a.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}a.lanes|=n,null!==(c=a.alternate)&&(c.lanes|=n),xr(a.return,n,t),l.lanes|=n;break}c=c.next}}else if(10===a.tag)s=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(r(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),xr(s,n,t),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}Ss(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,i=t.pendingProps.children,Or(t,n),i=i(o=Cr(o)),t.flags|=1,Ss(e,t,i,n),t.child;case 14:return o=gr(i=t.type,t.pendingProps),Ps(e,t,i,o=gr(i.type,o),n);case 15:return xs(e,t,t.type,t.pendingProps,n);case 17:return i=t.type,o=t.pendingProps,o=t.elementType===i?o:gr(i,o),Hs(e,t),t.tag=1,Vo(i)?(e=!0,Io(t)):e=!1,Or(t,n),Ur(t,i,o),qr(t,i,o,n),As(null,t,i,!0,e,n);case 19:return Bs(e,t,n);case 22:return Os(e,t,n)}throw Error(r(156,t.tag))};var Qc="function"==typeof reportError?reportError:function(e){console.error(e)};function Kc(e){this._internalRoot=e}function Xc(e){this._internalRoot=e}function Yc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function eu(e,t,n,i,o){var r=n._reactRootContainer;if(r){var a=r;if("function"==typeof o){var s=o;o=function(){var e=Wc(a);s.call(e)}}Uc(t,a,e,o)}else a=function(e,t,n,i,o){if(o){if("function"==typeof i){var r=i;i=function(){var e=Wc(a);r.call(e)}}var a=Hc(t,i,e,0,null,!1,0,"",Jc);return e._reactRootContainer=a,e[vo]=a.current,Bi(8===e.nodeType?e.parentNode:e),uc(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof i){var s=i;i=function(){var e=Wc(l);s.call(e)}}var l=Fc(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=l,e[vo]=l.current,Bi(8===e.nodeType?e.parentNode:e),uc((function(){Uc(t,l,n,i)})),l}(n,t,e,o,i);return Wc(a)}Xc.prototype.render=Kc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(r(409));Uc(e,t,null,null)},Xc.prototype.unmount=Kc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;uc((function(){Uc(null,e,null,null)})),t[vo]=null}},Xc.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Vt.length&&0!==t&&t<Vt[n].priority;n++);Vt.splice(n,0,e),0===n&&It(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(mt(t,1|n),ic(t,Ye()),0==(6&El)&&(Bl=Ye()+500,Ho()))}break;case 13:uc((function(){var t=Mr(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),$c(e,1)}},_t=function(e){if(13===e.tag){var t=Mr(e,134217728);null!==t&&nc(t,e,134217728,ec()),$c(e,134217728)}},Pt=function(e){if(13===e.tag){var t=tc(e),n=Mr(e,t);null!==n&&nc(n,e,t,ec()),$c(e,t)}},xt=function(){return bt},Ot=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},_e=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var i=n[t];if(i!==e&&i.form===e.form){var o=_o(i);if(!o)throw Error(r(90));$(i),Z(i,o)}}}break;case"textarea":re(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ee=cc,Ae=uc;var tu={usingClientEntryPoint:!1,Events:[wo,So,_o,Ce,ke,cc]},nu={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},iu={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ou=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ou.isDisabled&&ou.supportsFiber)try{ot=ou.inject(iu),rt=ou}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Yc(t))throw Error(r(200));return Nc(e,t,null,n)},t.createRoot=function(e,t){if(!Yc(e))throw Error(r(299));var n=!1,i="",o=Qc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Fc(e,1,!1,null,0,n,0,i,o),e[vo]=t.current,Bi(8===e.nodeType?e.parentNode:e),new Kc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(r(188));throw e=Object.keys(e).join(","),Error(r(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return uc(e)},t.hydrate=function(e,t,n){if(!Zc(t))throw Error(r(200));return eu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Yc(e))throw Error(r(405));var i=null!=n&&n.hydratedSources||null,o=!1,a="",s=Qc;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Hc(t,null,e,1,null!=n?n:null,o,0,a,s),e[vo]=t.current,Bi(e),i)for(e=0;e<i.length;e++)o=(o=(n=i[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Xc(t)},t.render=function(e,t,n){if(!Zc(t))throw Error(r(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zc(e))throw Error(r(40));return!!e._reactRootContainer&&(uc((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[vo]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,i){if(!Zc(n))throw Error(r(200));if(null==e||void 0===e._reactInternals)throw Error(r(38));return eu(e,t,n,!1,i)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var i=n(3935);t.createRoot=i.createRoot,t.hydrateRoot=i.hydrateRoot},3935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},8359:function(e,t){"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},2973:function(e,t,n){"use strict";n(8359)},6438:function(e,t,n){(()=>{var e={757:(e,t,n)=>{e.exports=n(666)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,i=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},r=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function c(e,t,n,i){var o=t&&t.prototype instanceof y?t:y,r=Object.create(o.prototype),a=new E(i||[]);return r._invoke=function(e,t,n){var i=d;return function(o,r){if(i===f)throw new Error("Generator is already running");if(i===p){if("throw"===o)throw r;return M()}for(n.method=o,n.arg=r;;){var a=n.delegate;if(a){var s=O(a,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===d)throw i=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=f;var l=u(e,t,n);if("normal"===l.type){if(i=n.done?p:h,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(i=p,n.method="throw",n.arg=l.arg)}}}(e,n,a),r}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var d="suspendedStart",h="suspendedYield",f="executing",p="completed",v={};function y(){}function g(){}function m(){}var b={};b[r]=function(){return this};var w=Object.getPrototypeOf,S=w&&w(w(A([])));S&&S!==n&&i.call(S,r)&&(b=S);var _=m.prototype=y.prototype=Object.create(b);function P(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,r,a,s){var l=u(e[o],e,r);if("throw"!==l.type){var c=l.arg,d=c.value;return d&&"object"==typeof d&&i.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(d).then((function(e){c.value=e,a(c)}),(function(e){return n("throw",e,a,s)}))}s(l.arg)}var o;this._invoke=function(e,i){function r(){return new t((function(t,o){n(e,i,t,o)}))}return o=o?o.then(r,r):r()}}function O(e,n){var i=e.iterator[n.method];if(i===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,O(e,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=u(i,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var r=o.arg;return r?r.done?(n[e.resultName]=r.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,v):r:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function A(e){if(e){var n=e[r];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(i.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:M}}function M(){return{value:t,done:!0}}return g.prototype=_.constructor=m,m.constructor=g,g.displayName=l(m,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,l(e,s,"GeneratorFunction")),e.prototype=Object.create(_),e},e.awrap=function(e){return{__await:e}},P(x.prototype),x.prototype[a]=function(){return this},e.AsyncIterator=x,e.async=function(t,n,i,o,r){void 0===r&&(r=Promise);var a=new x(c(t,n,i,o),r);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},P(_),l(_,s,"Generator"),_[r]=function(){return this},_.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var i=t.pop();if(i in e)return n.value=i,n.done=!1,n}return n.done=!0,n}},e.values=A,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(k),!e)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(i,o){return s.type="throw",s.arg=e,n.next=i,o&&(n.method="next",n.arg=t),!!o}for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var l=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&i.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var r=o;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var a=r?r.completion:{};return a.type=e,a.arg=t,r?(this.method="next",this.next=r.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var i=n.completion;if("throw"===i.type){var o=i.arg;k(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,i){return this.delegate={iterator:A(e),resultName:n,nextLoc:i},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}}},i={};function o(t){var n=i[t];if(void 0!==n)return n.exports;var r=i[t]={exports:{}};return e[t](r,r.exports,o),r.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{"use strict";function e(t){return(e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(t)}function t(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=e(t)););return t}function i(){return(i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,n,i){var o=t(e,n);if(o){var r=Object.getOwnPropertyDescriptor(o,n);return r.get?r.get.call(arguments.length<3?e:i):r.value}}).apply(this,arguments)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}o.r(r),o.d(r,{Particles:()=>g,default:()=>m});var c=o(757),u=o.n(c);const d=n(7294);var h=o.n(d);const f=n(5417),p=n(8252);var v=o.n(p),y=function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))},g=function(t){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");Object.defineProperty(e,"prototype",{value:Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),writable:!1}),t&&a(e,t)}(d,t);var n,o,r,s,c=(r=d,s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var t,n=e(r);if(s){var i=e(this).constructor;t=Reflect.construct(n,arguments,i)}else t=n.apply(this,arguments);return l(this,t)});function d(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),(t=c.call(this,e)).state={library:void 0},t}return n=d,(o=[{key:"destroy",value:function(){this.state.library&&(this.state.library.destroy(),this.setState({library:void 0}))}},{key:"shouldComponentUpdate",value:function(e){return!v()(e,this.props)}},{key:"componentDidUpdate",value:function(){this.refresh()}},{key:"forceUpdate",value:function(){var t=this;this.refresh().then((function(){i(e(d.prototype),"forceUpdate",t).call(t)}))}},{key:"componentDidMount",value:function(){y(this,void 0,void 0,u().mark((function e(){return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.props.init){e.next=3;break}return e.next=3,this.props.init(f.tsParticles);case 3:return e.next=5,this.loadParticles();case 5:case"end":return e.stop()}}),e,this)})))}},{key:"componentWillUnmount",value:function(){this.destroy()}},{key:"render",value:function(){var e=this.props,t=e.width,n=e.height,i=e.className,o=e.canvasClassName,r=e.id;return h().createElement("div",{className:i,id:r},h().createElement("canvas",{className:o,style:Object.assign(Object.assign({},this.props.style),{width:t,height:n})}))}},{key:"refresh",value:function(){return y(this,void 0,void 0,u().mark((function e(){return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.destroy(),e.next=3,this.loadParticles();case 3:case"end":return e.stop()}}),e,this)})))}},{key:"loadParticles",value:function(){var e;return y(this,void 0,void 0,u().mark((function t(){var n,i,o=this;return u().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=function(e){return y(o,void 0,void 0,u().mark((function t(){return u().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this.props.container&&(this.props.container.current=e),this.setState({library:e}),!this.props.loaded){t.next=5;break}return t.next=5,this.props.loaded(e);case 5:case"end":return t.stop()}}),t,this)})))},!this.props.url){t.next=7;break}return t.next=4,f.tsParticles.loadJSON(this.props.id,this.props.url);case 4:t.t0=t.sent,t.next=10;break;case 7:return t.next=9,f.tsParticles.load(this.props.id,null!==(e=this.props.params)&&void 0!==e?e:this.props.options);case 9:t.t0=t.sent;case 10:return i=t.t0,t.next=13,n(i);case 13:case"end":return t.stop()}}),t,this)})))}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),d}(d.Component);g.defaultProps={width:"100%",height:"100%",options:{},style:{},url:void 0,id:"tsparticles"};const m=g})();var a=t;for(var s in r)a[s]=r[s];r.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})})()},6868:function(e,t,n){const i=n(6438);for(let e in i)i.default[e]=i[e];e.exports=i.default},5479:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Canvas=void 0;const i=n(1072),o=n(7129),r=n(6715),a=n(4351);t.Canvas=class{constructor(e){this.container=e,this.size={height:0,width:0},this.context=null,this.generatedCanvas=!1}init(){this.resize(),this.initStyle(),this.initCover(),this.initTrail(),this.initBackground(),this.paint()}loadCanvas(e){var t;this.generatedCanvas&&(null===(t=this.element)||void 0===t||t.remove()),this.generatedCanvas=e.dataset&&r.Constants.generatedAttribute in e.dataset?"true"===e.dataset[r.Constants.generatedAttribute]:this.generatedCanvas,this.element=e,this.originalStyle=(0,a.deepExtend)({},this.element.style),this.size.height=e.offsetHeight,this.size.width=e.offsetWidth,this.context=this.element.getContext("2d"),this.container.retina.init(),this.initBackground()}destroy(){var e;this.generatedCanvas&&(null===(e=this.element)||void 0===e||e.remove()),this.draw((e=>{(0,i.clear)(e,this.size)}))}paint(){const e=this.container.actualOptions;this.draw((t=>{e.backgroundMask.enable&&e.backgroundMask.cover?((0,i.clear)(t,this.size),this.paintBase(this.coverColorStyle)):this.paintBase()}))}clear(){const e=this.container.actualOptions,t=e.particles.move.trail;e.backgroundMask.enable?this.paint():t.enable&&t.length>0&&this.trailFillColor?this.paintBase((0,o.getStyleFromRgb)(this.trailFillColor,1/t.length)):this.draw((e=>{(0,i.clear)(e,this.size)}))}async windowResize(){if(!this.element)return;this.resize();const e=this.container,t=e.updateActualOptions();e.particles.setDensity();for(const[,t]of e.plugins)void 0!==t.resize&&t.resize();t&&await e.refresh()}resize(){if(!this.element)return;const e=this.container,t=e.retina.pixelRatio,n=e.canvas.size,i=this.element.offsetWidth*t,o=this.element.offsetHeight*t;if(o===n.height&&i===n.width&&o===this.element.height&&i===this.element.width)return;const r=Object.assign({},n);this.element.width=n.width=this.element.offsetWidth*t,this.element.height=n.height=this.element.offsetHeight*t,this.container.started&&(this.resizeFactor={width:n.width/r.width,height:n.height/r.height})}drawConnectLine(e,t){this.draw((n=>{var o;const r=this.lineStyle(e,t);if(!r)return;const a=e.getPosition(),s=t.getPosition();(0,i.drawConnectLine)(n,null!==(o=e.retina.linksWidth)&&void 0!==o?o:this.container.retina.linksWidth,r,a,s)}))}drawGrabLine(e,t,n,o){const r=this.container;this.draw((a=>{var s;const l=e.getPosition();(0,i.drawGrabLine)(a,null!==(s=e.retina.linksWidth)&&void 0!==s?s:r.retina.linksWidth,l,o,t,n)}))}drawParticle(e,t){var n,r,a,s,l,c;if(e.spawning||e.destroyed)return;const u=e.getRadius();if(u<=0)return;const d=e.getFillColor(),h=null!==(n=e.getStrokeColor())&&void 0!==n?n:d;if(!d&&!h)return;let[f,p]=this.getPluginParticleColors(e);f&&p||(f||(f=d||void 0),p||(p=h||void 0));const v=this.container.actualOptions,y=e.options.zIndex,g=(1-e.zIndexFactor)**y.opacityRate,m=null!==(s=null!==(r=e.bubble.opacity)&&void 0!==r?r:null===(a=e.opacity)||void 0===a?void 0:a.value)&&void 0!==s?s:1,b=null!==(c=null===(l=e.stroke)||void 0===l?void 0:l.opacity)&&void 0!==c?c:m,w=m*g,S=b*g,_={fill:f?(0,o.getStyleFromHsl)(f,w):void 0};_.stroke=p?(0,o.getStyleFromHsl)(p,S):_.fill,this.draw((n=>{const o=(1-e.zIndexFactor)**y.sizeRate,r=this.container;for(const t of r.particles.updaters)if(t.beforeDraw&&t.beforeDraw(e),t.getColorStyles){const{fill:i,stroke:o}=t.getColorStyles(e,n,u,w);i&&(_.fill=i),o&&(_.stroke=o)}(0,i.drawParticle)(r,n,e,t,_,v.backgroundMask.enable,v.backgroundMask.composite,u*o,w,e.options.shadow);for(const t of r.particles.updaters)t.afterDraw&&t.afterDraw(e)}))}drawPlugin(e,t){this.draw((n=>{(0,i.drawPlugin)(n,e,t)}))}drawParticlePlugin(e,t,n){this.draw((o=>{(0,i.drawParticlePlugin)(o,e,t,n)}))}initBackground(){const e=this.container.actualOptions.background,t=this.element,n=null==t?void 0:t.style;if(n){if(e.color){const t=(0,o.colorToRgb)(e.color);n.backgroundColor=t?(0,o.getStyleFromRgb)(t,e.opacity):""}else n.backgroundColor="";n.backgroundImage=e.image||"",n.backgroundPosition=e.position||"",n.backgroundRepeat=e.repeat||"",n.backgroundSize=e.size||""}}draw(e){if(this.context)return e(this.context)}initCover(){const e=this.container.actualOptions.backgroundMask.cover,t=e.color,n=(0,o.colorToRgb)(t);if(n){const t={r:n.r,g:n.g,b:n.b,a:e.opacity};this.coverColorStyle=(0,o.getStyleFromRgb)(t,t.a)}}initTrail(){const e=this.container.actualOptions,t=e.particles.move.trail,n=(0,o.colorToRgb)(t.fillColor);if(n){const t=e.particles.move.trail;this.trailFillColor={r:n.r,g:n.g,b:n.b,a:1/t.length}}}getPluginParticleColors(e){let t,n;for(const[,i]of this.container.plugins)if(!t&&i.particleFillColor&&(t=(0,o.colorToHsl)(i.particleFillColor(e))),!n&&i.particleStrokeColor&&(n=(0,o.colorToHsl)(i.particleStrokeColor(e))),t&&n)break;return[t,n]}initStyle(){const e=this.element,t=this.container.actualOptions;if(!e)return;const n=this.originalStyle;t.fullScreen.enable?(this.originalStyle=(0,a.deepExtend)({},e.style),e.style.setProperty("position","fixed","important"),e.style.setProperty("z-index",t.fullScreen.zIndex.toString(10),"important"),e.style.setProperty("top","0","important"),e.style.setProperty("left","0","important"),e.style.setProperty("width","100%","important"),e.style.setProperty("height","100%","important")):n&&(e.style.position=n.position,e.style.zIndex=n.zIndex,e.style.top=n.top,e.style.left=n.left,e.style.width=n.width,e.style.height=n.height);for(const n in t.style){if(!n||!t.style)continue;const i=t.style[n];i&&e.style.setProperty(n,i,"important")}}paintBase(e){this.draw((t=>{(0,i.paintBase)(t,this.size,e)}))}lineStyle(e,t){return this.draw((n=>{const o=this.container.actualOptions.interactivity.modes.connect;return(0,i.gradient)(n,e,t,o.links.opacity)}))}}},6503:function(e,t,n){"use strict";var i,o=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},r=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Container=void 0;const a=n(4351),s=n(5479),l=n(4263),c=n(696),u=n(9285),d=n(7018),h=n(1676),f=n(8061),p=n(7266);t.Container=class{constructor(e,t,n,...a){this.id=t,i.set(this,void 0),o(this,i,e,"f"),this.fpsLimit=120,this.duration=0,this.lifeTime=0,this.firstStart=!0,this.started=!1,this.destroyed=!1,this.paused=!0,this.lastFrameTime=0,this.zLayers=100,this.pageHidden=!1,this._sourceOptions=n,this._initialSourceOptions=n,this.retina=new h.Retina(this),this.canvas=new s.Canvas(this),this.particles=new d.Particles(r(this,i,"f"),this),this.drawer=new c.FrameManager(this),this.presets=a,this.pathGenerator={generate:()=>{const e=f.Vector.create(0,0);return e.length=Math.random(),e.angle=Math.random()*Math.PI*2,e},init:()=>{},update:()=>{}},this.interactivity={mouse:{clicking:!1,inside:!1}},this.plugins=new Map,this.drawers=new Map,this.density=1,this._options=new u.Options(r(this,i,"f")),this.actualOptions=new u.Options(r(this,i,"f")),this.eventListeners=new l.EventListeners(this),"undefined"!=typeof IntersectionObserver&&IntersectionObserver&&(this.intersectionObserver=new IntersectionObserver((e=>this.intersectionManager(e))))}get options(){return this._options}get sourceOptions(){return this._sourceOptions}play(e){const t=this.paused||e;if(!this.firstStart||this.actualOptions.autoPlay){if(this.paused&&(this.paused=!1),t)for(const[,e]of this.plugins)e.play&&e.play();this.draw(t||!1)}else this.firstStart=!1}pause(){if(void 0!==this.drawAnimationFrame&&((0,a.cancelAnimation)()(this.drawAnimationFrame),delete this.drawAnimationFrame),!this.paused){for(const[,e]of this.plugins)e.pause&&e.pause();this.pageHidden||(this.paused=!0)}}draw(e){let t=e;this.drawAnimationFrame=(0,a.animate)()((async e=>{t&&(this.lastFrameTime=void 0,t=!1),await this.drawer.nextFrame(e)}))}getAnimationStatus(){return!this.paused&&!this.pageHidden}setNoise(e,t,n){this.setPath(e,t,n)}setPath(e,t,n){var i,o,r;if(e)if("function"==typeof e)this.pathGenerator.generate=e,t&&(this.pathGenerator.init=t),n&&(this.pathGenerator.update=n);else{const t=this.pathGenerator;this.pathGenerator=e,(i=this.pathGenerator).generate||(i.generate=t.generate),(o=this.pathGenerator).init||(o.init=t.init),(r=this.pathGenerator).update||(r.update=t.update)}}destroy(){this.stop(),this.canvas.destroy();for(const[,e]of this.drawers)e.destroy&&e.destroy(this);for(const e of this.drawers.keys())this.drawers.delete(e);this.destroyed=!0}exportImg(e){this.exportImage(e)}exportImage(e,t,n){var i;return null===(i=this.canvas.element)||void 0===i?void 0:i.toBlob(e,null!=t?t:"image/png",n)}exportConfiguration(){return JSON.stringify(this.actualOptions,void 0,2)}refresh(){return this.stop(),this.start()}reset(){return this._options=new u.Options(r(this,i,"f")),this.refresh()}stop(){if(this.started){this.firstStart=!0,this.started=!1,this.eventListeners.removeListeners(),this.pause(),this.particles.clear(),this.canvas.clear(),this.interactivity.element instanceof HTMLElement&&this.intersectionObserver&&this.intersectionObserver.unobserve(this.interactivity.element);for(const[,e]of this.plugins)e.stop&&e.stop();for(const e of this.plugins.keys())this.plugins.delete(e);this.particles.linksColors=new Map,delete this.particles.grabLineColor,delete this.particles.linksColor,this._sourceOptions=this._options}}async loadTheme(e){this.currentTheme=e,await this.refresh()}async start(){if(!this.started){await this.init(),this.started=!0,this.eventListeners.addListeners(),this.interactivity.element instanceof HTMLElement&&this.intersectionObserver&&this.intersectionObserver.observe(this.interactivity.element);for(const[,e]of this.plugins)void 0!==e.startAsync?await e.startAsync():void 0!==e.start&&e.start();this.play()}}addClickHandler(e){const t=this.interactivity.element;if(!t)return;const n=(t,n,i)=>{if(this.destroyed)return;const o=this.retina.pixelRatio,r={x:n.x*o,y:n.y*o},a=this.particles.quadTree.queryCircle(r,i*o);e(t,a)};let i=!1,o=!1;t.addEventListener("click",(e=>{if(this.destroyed)return;const t=e,i={x:t.offsetX||t.clientX,y:t.offsetY||t.clientY};n(e,i,1)})),t.addEventListener("touchstart",(()=>{this.destroyed||(i=!0,o=!1)})),t.addEventListener("touchmove",(()=>{this.destroyed||(o=!0)})),t.addEventListener("touchend",(e=>{var t,r,a;if(!this.destroyed){if(i&&!o){const i=e;let o=i.touches[i.touches.length-1];if(!o&&(o=i.changedTouches[i.changedTouches.length-1],!o))return;const s=null===(t=this.canvas.element)||void 0===t?void 0:t.getBoundingClientRect(),l={x:o.clientX-(null!==(r=null==s?void 0:s.left)&&void 0!==r?r:0),y:o.clientY-(null!==(a=null==s?void 0:s.top)&&void 0!==a?a:0)};n(e,l,Math.max(o.radiusX,o.radiusY))}i=!1,o=!1}})),t.addEventListener("touchcancel",(()=>{this.destroyed||(i=!1,o=!1)}))}handleClickMode(e){this.particles.handleClickMode(e);for(const[,t]of this.plugins)t.handleClickMode&&t.handleClickMode(e)}updateActualOptions(){this.actualOptions.responsive=[];const e=this.actualOptions.setResponsive(this.canvas.size.width,this.retina.pixelRatio,this._options);return this.actualOptions.setTheme(this.currentTheme),this.responsiveMaxWidth!=e&&(this.responsiveMaxWidth=e,!0)}async init(){this._options=new u.Options(r(this,i,"f"));for(const e of this.presets)this._options.load(r(this,i,"f").plugins.getPreset(e));const e=r(this,i,"f").plugins.getSupportedShapes();for(const t of e){const e=r(this,i,"f").plugins.getShapeDrawer(t);e&&this.drawers.set(t,e)}this._options.load(this._initialSourceOptions),this._options.load(this._sourceOptions),this.actualOptions=new u.Options(r(this,i,"f")),this.actualOptions.load(this._options),this.retina.init(),this.canvas.init(),this.updateActualOptions(),this.canvas.initBackground(),this.canvas.resize(),this.zLayers=this.actualOptions.zLayers,this.duration=(0,p.getRangeValue)(this.actualOptions.duration),this.lifeTime=0,this.fpsLimit=this.actualOptions.fpsLimit>0?this.actualOptions.fpsLimit:120;const t=r(this,i,"f").plugins.getAvailablePlugins(this);for(const[e,n]of t)this.plugins.set(e,n);for(const[,e]of this.drawers)e.init&&await e.init(this);for(const[,e]of this.plugins)e.init?e.init(this.actualOptions):void 0!==e.initAsync&&await e.initAsync(this.actualOptions);const n=this.actualOptions.particles.move.path;n.generator&&this.setPath(r(this,i,"f").plugins.getPathGenerator(n.generator)),this.particles.init(),this.particles.setDensity();for(const[,e]of this.plugins)void 0!==e.particlesSetup&&e.particlesSetup()}intersectionManager(e){if(this.actualOptions.pauseOnOutsideViewport)for(const t of e)t.target===this.interactivity.element&&(t.isIntersecting?this.play():this.pause())}},i=new WeakMap},7918:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4467:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3195:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1748:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6482:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},968:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4535:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6701:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8855:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8545:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8195:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4114:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5656:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8755:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4324:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1883:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},97:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},465:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3393:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8235:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3921:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8527:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1278:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8035:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9147:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},2295:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5903:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},7010:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4173:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1938:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6799:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4015:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1291:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8437:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9562:function(e,t,n){"use strict";var i,o=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},r=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Loader=void 0;const a=n(6715),s=n(6503),l=n(4351);t.Loader=class{constructor(e){i.set(this,void 0),o(this,i,e,"f")}dom(){return r(this,i,"f").domArray}domItem(e){const t=this.dom(),n=t[e];if(n&&!n.destroyed)return n;t.splice(e,1)}async loadOptions(e){var t,n,o;const c=null!==(t=e.tagId)&&void 0!==t?t:`tsparticles${Math.floor(1e4*Math.random())}`,{options:u,index:d}=e;let h=null!==(n=e.element)&&void 0!==n?n:document.getElementById(c);h||(h=document.createElement("div"),h.id=c,null===(o=document.querySelector("body"))||void 0===o||o.append(h));const f=u instanceof Array?(0,l.itemFromArray)(u,d):u,p=this.dom(),v=p.findIndex((e=>e.id===c));if(v>=0){const e=this.domItem(v);e&&!e.destroyed&&(e.destroy(),p.splice(v,1))}let y;if("canvas"===h.tagName.toLowerCase())y=h,y.dataset[a.Constants.generatedAttribute]="false";else{const e=h.getElementsByTagName("canvas");e.length?(y=e[0],y.dataset[a.Constants.generatedAttribute]="false"):(y=document.createElement("canvas"),y.dataset[a.Constants.generatedAttribute]="true",y.style.width="100%",y.style.height="100%",h.appendChild(y))}const g=new s.Container(r(this,i,"f"),c,f);return v>=0?p.splice(v,0,g):p.push(g),g.canvas.loadCanvas(y),await g.start(),g}async loadRemoteOptions(e){const{url:t,index:n}=e,i=t instanceof Array?(0,l.itemFromArray)(t,n):t;if(!i)return;const o=await fetch(i);if(!o.ok)return r=o.status,console.error(`Error tsParticles - fetch status: ${r}`),void console.error("Error tsParticles - File config not found");var r;const a=await o.json();return this.loadOptions({tagId:e.tagId,element:e.element,index:n,options:a})}load(e,t,n){const i={index:n};return"string"==typeof e?i.tagId=e:i.options=e,"number"==typeof t?i.index=null!=t?t:i.index:i.options=null!=t?t:i.options,this.loadOptions(i)}async set(e,t,n,i){const o={index:i};return"string"==typeof e?o.tagId=e:o.element=e,t instanceof HTMLElement?o.element=t:o.options=t,"number"==typeof n?o.index=n:o.options=null!=n?n:o.options,this.loadOptions(o)}async loadJSON(e,t,n){let i,o;return"number"==typeof t||void 0===t?i=e:(o=e,i=t),this.loadRemoteOptions({tagId:o,url:i,index:n})}async setJSON(e,t,n,i){let o,r,a,s;return e instanceof HTMLElement?(s=e,o=t,a=n):(r=e,s=t,o=n,a=i),this.loadRemoteOptions({tagId:r,url:o,index:a,element:s})}setOnClickHandler(e){const t=this.dom();if(!t.length)throw new Error("Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()");for(const n of t)n.addClickHandler(e)}},i=new WeakMap},5142:function(e,t,n){"use strict";var i,o=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},r=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Particle=void 0;const a=n(7266),s=n(7129),l=n(4351),c=n(6268),u=n(3403),d=n(8061),h=n(8514),f=n(1072),p=e=>{((0,l.isInArray)(e.outMode,e.checkModes)||(0,l.isInArray)(e.outMode,e.checkModes))&&(e.coord>e.maxCoord-2*e.radius?e.setCb(-e.radius):e.coord<2*e.radius&&e.setCb(e.radius))};t.Particle=class{constructor(e,t,n,h,f,p){var v,y,g,m,b,w,S;this.id=t,this.container=n,this.group=p,i.set(this,void 0),o(this,i,e,"f"),this.fill=!0,this.close=!0,this.lastPathTime=0,this.destroyed=!1,this.unbreakable=!1,this.splitCount=0,this.misplaced=!1,this.retina={maxDistance:{}},this.ignoresResizeRatio=!0;const _=n.retina.pixelRatio,P=n.actualOptions,x=new c.ParticlesOptions;x.load(P.particles);const O=x.shape.type,C=x.reduceDuplicates;if(this.shape=O instanceof Array?(0,l.itemFromArray)(O,this.id,C):O,null==f?void 0:f.shape){if(f.shape.type){const e=f.shape.type;this.shape=e instanceof Array?(0,l.itemFromArray)(e,this.id,C):e}const e=new u.Shape;e.load(f.shape),this.shape&&(this.shapeData=this.loadShapeData(e,C))}else this.shapeData=this.loadShapeData(x.shape,C);void 0!==f&&x.load(f),void 0!==(null===(v=this.shapeData)||void 0===v?void 0:v.particles)&&x.load(null===(y=this.shapeData)||void 0===y?void 0:y.particles),this.fill=null!==(m=null===(g=this.shapeData)||void 0===g?void 0:g.fill)&&void 0!==m?m:this.fill,this.close=null!==(w=null===(b=this.shapeData)||void 0===b?void 0:b.close)&&void 0!==w?w:this.close,this.options=x,this.pathDelay=1e3*(0,a.getValue)(this.options.move.path.delay);const k=(0,a.getRangeValue)(this.options.zIndex.value);n.retina.initParticle(this);const E=this.options.size,A=E.value;this.size={enable:E.animation.enable,value:(0,a.getValue)(E)*n.retina.pixelRatio,max:(0,a.getRangeMax)(A)*_,min:(0,a.getRangeMin)(A)*_,loops:0,maxLoops:(0,a.getRangeValue)(E.animation.count)};const M=E.animation;if(M.enable){switch(this.size.status=0,M.startValue){case"min":this.size.value=this.size.min,this.size.status=0;break;case"random":this.size.value=(0,a.randomInRange)(this.size)*_,this.size.status=Math.random()>=.5?0:1;break;default:this.size.value=this.size.max,this.size.status=1}this.size.velocity=(null!==(S=this.retina.sizeAnimationSpeed)&&void 0!==S?S:n.retina.sizeAnimationSpeed)/100*n.retina.reduceFactor,M.sync||(this.size.velocity*=Math.random())}this.direction=(0,a.getParticleDirectionAngle)(this.options.move.direction),this.bubble={inRange:!1},this.initialVelocity=this.calculateVelocity(),this.velocity=this.initialVelocity.copy(),this.moveDecay=1-(0,a.getRangeValue)(this.options.move.decay);const R=this.options.move.gravity;this.gravity={enable:R.enable,acceleration:(0,a.getRangeValue)(R.acceleration),inverse:R.inverse},this.position=this.calcPosition(n,h,(0,a.clamp)(k,0,n.zLayers)),this.initialPosition=this.position.copy(),this.offset=d.Vector.origin;const T=n.particles;T.needsSort=T.needsSort||T.lastZIndex<this.position.z,T.lastZIndex=this.position.z,this.zIndexFactor=this.position.z/n.zLayers,this.sides=24;let V=n.drawers.get(this.shape);V||(V=r(this,i,"f").plugins.getShapeDrawer(this.shape),V&&n.drawers.set(this.shape,V)),(null==V?void 0:V.loadShape)&&(null==V||V.loadShape(this));const j=null==V?void 0:V.getSidesCount;j&&(this.sides=j(this)),this.life=this.loadLife(),this.spawning=this.life.delay>0,this.shadowColor=(0,s.colorToRgb)(this.options.shadow.color);for(const e of n.particles.updaters)e.init&&e.init(this);V&&V.particleInit&&V.particleInit(n,this);for(const[,e]of n.plugins)e.particleCreated&&e.particleCreated(this)}isVisible(){return!this.destroyed&&!this.spawning&&this.isInsideCanvas()}isInsideCanvas(){const e=this.getRadius(),t=this.container.canvas.size;return this.position.x>=-e&&this.position.y>=-e&&this.position.y<=t.height+e&&this.position.x<=t.width+e}draw(e){const t=this.container;for(const[,n]of t.plugins)t.canvas.drawParticlePlugin(n,this,e);t.canvas.drawParticle(this,e)}getPosition(){return{x:this.position.x+this.offset.x,y:this.position.y+this.offset.y,z:this.position.z}}getRadius(){var e;return null!==(e=this.bubble.radius)&&void 0!==e?e:this.size.value}getMass(){return this.getRadius()**2*Math.PI/2}getFillColor(){var e,t;const n=null!==(e=this.bubble.color)&&void 0!==e?e:(0,s.getHslFromAnimation)(this.color);if(n&&this.roll&&(this.backColor||this.roll.alter)){const e="both"===this.options.roll.mode?2:1,i="horizontal"===this.options.roll.mode?Math.PI/2:0;if(Math.floor(((null!==(t=this.roll.angle)&&void 0!==t?t:0)+i)/(Math.PI/e))%2){if(this.backColor)return this.backColor;if(this.roll.alter)return(0,f.alterHsl)(n,this.roll.alter.type,this.roll.alter.value)}}return n}getStrokeColor(){var e,t;return null!==(t=null!==(e=this.bubble.color)&&void 0!==e?e:(0,s.getHslFromAnimation)(this.strokeColor))&&void 0!==t?t:this.getFillColor()}destroy(e){if(this.destroyed=!0,this.bubble.inRange=!1,!this.unbreakable){this.destroyed=!0,this.bubble.inRange=!1;for(const[,t]of this.container.plugins)t.particleDestroyed&&t.particleDestroyed(this,e);e||"split"===this.options.destroy.mode&&this.split()}}reset(){this.opacity&&(this.opacity.loops=0),this.size.loops=0}split(){const e=this.options.destroy.split;if(e.count>=0&&this.splitCount++>e.count)return;const t=(0,a.getRangeValue)(e.rate.value);for(let e=0;e<t;e++)this.container.particles.addSplitParticle(this)}calcPosition(e,t,n,i=0){var o,r,s,l;for(const[,i]of e.plugins){const e=void 0!==i.particlePosition?i.particlePosition(t,this):void 0;if(void 0!==e)return h.Vector3d.create(e.x,e.y,n)}const c=e.canvas.size,u=(0,a.calcExactPositionOrRandomFromSize)({size:c,position:t}),d=h.Vector3d.create(u.x,u.y,n),f=this.getRadius(),v=this.options.move.outModes,y=t=>{p({outMode:t,checkModes:["bounce","bounce-horizontal"],coord:d.x,maxCoord:e.canvas.size.width,setCb:e=>d.x+=e,radius:f})},g=t=>{p({outMode:t,checkModes:["bounce","bounce-vertical"],coord:d.y,maxCoord:e.canvas.size.height,setCb:e=>d.y+=e,radius:f})};return y(null!==(o=v.left)&&void 0!==o?o:v.default),y(null!==(r=v.right)&&void 0!==r?r:v.default),g(null!==(s=v.top)&&void 0!==s?s:v.default),g(null!==(l=v.bottom)&&void 0!==l?l:v.default),this.checkOverlap(d,i)?this.calcPosition(e,void 0,n,i+1):d}checkOverlap(e,t=0){const n=this.options.collisions,i=this.getRadius();if(!n.enable)return!1;const o=n.overlap;if(o.enable)return!1;const r=o.retries;if(r>=0&&t>r)throw new Error("Particle is overlapping and can't be placed");let s=!1;for(const t of this.container.particles.array)if((0,a.getDistance)(e,t.position)<i+t.getRadius()){s=!0;break}return s}calculateVelocity(){const e=(0,a.getParticleBaseVelocity)(this.direction).copy(),t=this.options.move,n=Math.PI/180*(0,a.getRangeValue)(t.angle.value),i=Math.PI/180*(0,a.getRangeValue)(t.angle.offset),o={left:i-n/2,right:i+n/2};return t.straight||(e.angle+=(0,a.randomInRange)((0,a.setRangeValue)(o.left,o.right))),t.random&&"number"==typeof t.speed&&(e.length*=Math.random()),e}loadShapeData(e,t){const n=e.options[this.shape];if(n)return(0,l.deepExtend)({},n instanceof Array?(0,l.itemFromArray)(n,this.id,t):n)}loadLife(){const e=this.container,t=this.options,n=t.life,i={delay:e.retina.reduceFactor?(0,a.getRangeValue)(n.delay.value)*(n.delay.sync?1:Math.random())/e.retina.reduceFactor*1e3:0,delayTime:0,duration:e.retina.reduceFactor?(0,a.getRangeValue)(n.duration.value)*(n.duration.sync?1:Math.random())/e.retina.reduceFactor*1e3:0,time:0,count:t.life.count};return i.duration<=0&&(i.duration=-1),i.count<=0&&(i.count=-1),i}},i=new WeakMap},7018:function(e,t,n){"use strict";var i,o=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},r=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Particles=void 0;const a=n(7266),s=n(5331),l=n(5142),c=n(6268),u=n(1401),d=n(3917),h=n(5840);t.Particles=class{constructor(e,t){this.container=t,i.set(this,void 0),o(this,i,e,"f"),this.nextId=0,this.array=[],this.zArray=[],this.limit=0,this.needsSort=!1,this.lastZIndex=0,this.freqs={links:new Map,triangles:new Map},this.interactionManager=new s.InteractionManager(r(this,i,"f"),t);const n=this.container.canvas.size;this.linksColors=new Map,this.quadTree=new d.QuadTree(new h.Rectangle(-n.width/4,-n.height/4,3*n.width/2,3*n.height/2),4),this.movers=r(this,i,"f").plugins.getMovers(t,!0),this.updaters=r(this,i,"f").plugins.getUpdaters(t,!0)}get count(){return this.array.length}init(){var e;const t=this.container,n=t.actualOptions;this.lastZIndex=0,this.needsSort=!1,this.freqs.links=new Map,this.freqs.triangles=new Map;let o=!1;this.updaters=r(this,i,"f").plugins.getUpdaters(t,!0),this.interactionManager.init();for(const[,e]of t.plugins)if(void 0!==e.particlesInitialization&&(o=e.particlesInitialization()),o)break;if(this.addManualParticles(),!o){for(const t in n.particles.groups){const i=n.particles.groups[t];for(let o=this.count,r=0;r<(null===(e=i.number)||void 0===e?void 0:e.value)&&o<n.particles.number.value;o++,r++)this.addParticle(void 0,i,t)}for(let e=this.count;e<n.particles.number.value;e++)this.addParticle()}t.pathGenerator.init(t)}async redraw(){this.clear(),this.init(),await this.draw({value:0,factor:0})}removeAt(e,t=1,n,i){if(!(e>=0&&e<=this.count))return;let o=0;for(let r=e;o<t&&r<this.count;r++){const e=this.array[r];if(!e||e.group!==n)continue;e.destroy(i),this.array.splice(r--,1);const t=this.zArray.indexOf(e);this.zArray.splice(t,1),o++}}remove(e,t,n){this.removeAt(this.array.indexOf(e),void 0,t,n)}async update(e){const t=this.container,n=[];t.pathGenerator.update();for(const[,n]of t.plugins)void 0!==n.update&&n.update(e);for(const i of this.array){const o=t.canvas.resizeFactor;o&&!i.ignoresResizeRatio&&(i.position.x*=o.width,i.position.y*=o.height),i.ignoresResizeRatio=!1,i.bubble.inRange=!1;for(const[,t]of this.container.plugins){if(i.destroyed)break;t.particleUpdate&&t.particleUpdate(i,e)}for(const t of this.movers)t.isEnabled(i)&&t.move(i,e);i.destroyed?n.push(i):this.quadTree.insert(new u.Point(i.getPosition(),i))}for(const e of n)this.remove(e);await this.interactionManager.externalInteract(e);for(const n of t.particles.array){for(const t of this.updaters)t.update(n,e);n.destroyed||n.spawning||await this.interactionManager.particlesInteract(n,e)}delete t.canvas.resizeFactor}async draw(e){const t=this.container,n=this.container.canvas.size;this.quadTree=new d.QuadTree(new h.Rectangle(-n.width/4,-n.height/4,3*n.width/2,3*n.height/2),4),t.canvas.clear(),await this.update(e),this.needsSort&&(this.zArray.sort(((e,t)=>t.position.z-e.position.z||e.id-t.id)),this.lastZIndex=this.zArray[this.zArray.length-1].position.z,this.needsSort=!1);for(const[,n]of t.plugins)t.canvas.drawPlugin(n,e);for(const t of this.zArray)t.draw(e)}clear(){this.array=[],this.zArray=[]}push(e,t,n,i){this.pushing=!0;for(let o=0;o<e;o++)this.addParticle(null==t?void 0:t.position,n,i);this.pushing=!1}addParticle(e,t,n){const i=this.container,o=i.actualOptions.particles.number.limit*i.density;if(o>0){const e=this.count+1-o;e>0&&this.removeQuantity(e)}return this.pushParticle(e,t,n)}addSplitParticle(e){const t=e.options.destroy.split,n=new c.ParticlesOptions;n.load(e.options);const i=(0,a.getRangeValue)(t.factor.value);n.color.load({value:{hsl:e.getFillColor()}}),"number"==typeof n.size.value?n.size.value/=i:(n.size.value.min/=i,n.size.value.max/=i),n.load(t.particles);const o=t.sizeOffset?(0,a.setRangeValue)(-e.size.value,e.size.value):0,r={x:e.position.x+(0,a.randomInRange)(o),y:e.position.y+(0,a.randomInRange)(o)};return this.pushParticle(r,n,e.group,(t=>!(t.size.value<.5||(t.velocity.length=(0,a.randomInRange)((0,a.setRangeValue)(e.velocity.length,t.velocity.length)),t.splitCount=e.splitCount+1,t.unbreakable=!0,setTimeout((()=>{t.unbreakable=!1}),500),0))))}removeQuantity(e,t){this.removeAt(0,e,t)}getLinkFrequency(e,t){const n=(0,a.setRangeValue)(e.id,t.id),i=`${(0,a.getRangeMin)(n)}_${(0,a.getRangeMax)(n)}`;let o=this.freqs.links.get(i);return void 0===o&&(o=Math.random(),this.freqs.links.set(i,o)),o}getTriangleFrequency(e,t,n){let[i,o,r]=[e.id,t.id,n.id];i>o&&([o,i]=[i,o]),o>r&&([r,o]=[o,r]),i>r&&([r,i]=[i,r]);const a=`${i}_${o}_${r}`;let s=this.freqs.triangles.get(a);return void 0===s&&(s=Math.random(),this.freqs.triangles.set(a,s)),s}addManualParticles(){const e=this.container,t=e.actualOptions;for(const n of t.manualParticles)this.addParticle((0,a.calcPositionFromSize)({size:e.canvas.size,position:n.position}),n.options)}setDensity(){const e=this.container.actualOptions;for(const t in e.particles.groups)this.applyDensity(e.particles.groups[t],0,t);this.applyDensity(e.particles,e.manualParticles.length)}handleClickMode(e){this.interactionManager.handleClickMode(e)}applyDensity(e,t,n){var i;if(!(null===(i=e.number.density)||void 0===i?void 0:i.enable))return;const o=e.number,r=this.initDensityFactor(o.density),a=o.value,s=o.limit>0?o.limit:a,l=Math.min(a,s)*r+t,c=Math.min(this.count,this.array.filter((e=>e.group===n)).length);this.limit=o.limit*r,c<l?this.push(Math.abs(l-c),void 0,e,n):c>l&&this.removeQuantity(c-l,n)}initDensityFactor(e){const t=this.container;if(!t.canvas.element||!e.enable)return 1;const n=t.canvas.element,i=t.retina.pixelRatio;return n.width*n.height/(e.factor*i**2*e.area)}pushParticle(e,t,n,o){try{const a=new l.Particle(r(this,i,"f"),this.nextId,this.container,e,t,n);let s=!0;if(o&&(s=o(a)),!s)return;return this.array.push(a),this.zArray.push(a),this.nextId++,a}catch(e){return void console.warn(`error adding particle: ${e}`)}}},i=new WeakMap},1676:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Retina=void 0;const i=n(7266),o=n(4351);t.Retina=class{constructor(e){this.container=e}init(){const e=this.container,t=e.actualOptions;this.pixelRatio=!t.detectRetina||(0,o.isSsr)()?1:window.devicePixelRatio;const n=this.container.actualOptions.motion;if(n&&(n.disable||n.reduce.value))if((0,o.isSsr)()||"undefined"==typeof matchMedia||!matchMedia)this.reduceFactor=1;else{const t=matchMedia("(prefers-reduced-motion: reduce)");if(t){this.handleMotionChange(t);const n=()=>{this.handleMotionChange(t),e.refresh().catch((()=>{}))};void 0!==t.addEventListener?t.addEventListener("change",n):void 0!==t.addListener&&t.addListener(n)}}else this.reduceFactor=1;const r=this.pixelRatio;if(e.canvas.element){const t=e.canvas.element;e.canvas.size.width=t.offsetWidth*r,e.canvas.size.height=t.offsetHeight*r}const a=t.particles;this.attractDistance=(0,i.getRangeValue)(a.move.attract.distance)*r,this.linksDistance=a.links.distance*r,this.linksWidth=a.links.width*r,this.sizeAnimationSpeed=(0,i.getRangeValue)(a.size.animation.speed)*r,this.maxSpeed=(0,i.getRangeValue)(a.move.gravity.maxSpeed)*r;const s=t.interactivity.modes;this.connectModeDistance=s.connect.distance*r,this.connectModeRadius=s.connect.radius*r,this.grabModeDistance=s.grab.distance*r,this.repulseModeDistance=s.repulse.distance*r,this.bounceModeDistance=s.bounce.distance*r,this.attractModeDistance=s.attract.distance*r,this.slowModeRadius=s.slow.radius*r,this.bubbleModeDistance=s.bubble.distance*r,s.bubble.size&&(this.bubbleModeSize=s.bubble.size*r)}initParticle(e){const t=e.options,n=this.pixelRatio,o=t.move.distance,r=e.retina;r.attractDistance=(0,i.getRangeValue)(t.move.attract.distance)*n,r.linksDistance=t.links.distance*n,r.linksWidth=t.links.width*n,r.moveDrift=(0,i.getRangeValue)(t.move.drift)*n,r.moveSpeed=(0,i.getRangeValue)(t.move.speed)*n,r.sizeAnimationSpeed=(0,i.getRangeValue)(t.size.animation.speed)*n;const a=r.maxDistance;a.horizontal=void 0!==o.horizontal?o.horizontal*n:void 0,a.vertical=void 0!==o.vertical?o.vertical*n:void 0,r.maxSpeed=(0,i.getRangeValue)(t.move.gravity.maxSpeed)*n}handleMotionChange(e){const t=this.container.actualOptions;if(e.matches){const e=t.motion;this.reduceFactor=e.disable?0:e.reduce.value?1/e.reduce.factor:1}else this.reduceFactor=1}}},7434:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Circle=void 0;const i=n(7641),o=n(7266);class r extends i.Range{constructor(e,t,n){super(e,t),this.radius=n}contains(e){return(0,o.getDistance)(e,this.position)<=this.radius}intersects(e){const t=e,n=e,i=this.position,o=e.position,r=Math.abs(o.x-i.x),a=Math.abs(o.y-i.y),s=this.radius;if(void 0!==n.radius)return s+n.radius>Math.sqrt(r*r+a+a);if(void 0!==t.size){const e=t.size.width,n=t.size.height,i=Math.pow(r-e,2)+Math.pow(a-n,2);return!(r>s+e||a>s+n)&&(r<=e||a<=n||i<=s*s)}return!1}}t.Circle=r},51:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CircleWarp=void 0;const i=n(7434),o=n(5840);class r extends i.Circle{constructor(e,t,n,i){super(e,t,n),this.canvasSize=i,this.canvasSize=Object.assign({},i)}contains(e){if(super.contains(e))return!0;const t={x:e.x-this.canvasSize.width,y:e.y};if(super.contains(t))return!0;const n={x:e.x-this.canvasSize.width,y:e.y-this.canvasSize.height};if(super.contains(n))return!0;const i={x:e.x,y:e.y-this.canvasSize.height};return super.contains(i)}intersects(e){if(super.intersects(e))return!0;const t=e,n=e,r={x:e.position.x-this.canvasSize.width,y:e.position.y-this.canvasSize.height};if(void 0!==n.radius){const e=new i.Circle(r.x,r.y,2*n.radius);return super.intersects(e)}if(void 0!==t.size){const e=new o.Rectangle(r.x,r.y,2*t.size.width,2*t.size.height);return super.intersects(e)}return!1}}t.CircleWarp=r},6715:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Constants=void 0;class n{}t.Constants=n,n.generatedAttribute="generated",n.randomColorValue="random",n.midColorValue="mid",n.touchEndEvent="touchend",n.mouseDownEvent="mousedown",n.mouseUpEvent="mouseup",n.mouseMoveEvent="mousemove",n.touchStartEvent="touchstart",n.touchMoveEvent="touchmove",n.mouseLeaveEvent="mouseleave",n.mouseOutEvent="mouseout",n.touchCancelEvent="touchcancel",n.resizeEvent="resize",n.visibilityChangeEvent="visibilitychange",n.noPolygonDataLoaded="No polygon data loaded.",n.noPolygonFound="No polygon found, you need to specify SVG url in config."},4263:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventListeners=void 0;const i=n(6715),o=n(4351);function r(e,t,n,i,o){if(i){let i={passive:!0};"boolean"==typeof o?i.capture=o:void 0!==o&&(i=o),e.addEventListener(t,n,i)}else{const i=o;e.removeEventListener(t,n,i)}}t.EventListeners=class{constructor(e){this.container=e,this.canPush=!0,this.mouseMoveHandler=e=>this.mouseTouchMove(e),this.touchStartHandler=e=>this.mouseTouchMove(e),this.touchMoveHandler=e=>this.mouseTouchMove(e),this.touchEndHandler=()=>this.mouseTouchFinish(),this.mouseLeaveHandler=()=>this.mouseTouchFinish(),this.touchCancelHandler=()=>this.mouseTouchFinish(),this.touchEndClickHandler=e=>this.mouseTouchClick(e),this.mouseUpHandler=e=>this.mouseTouchClick(e),this.mouseDownHandler=()=>this.mouseDown(),this.visibilityChangeHandler=()=>this.handleVisibilityChange(),this.themeChangeHandler=e=>this.handleThemeChange(e),this.oldThemeChangeHandler=e=>this.handleThemeChange(e),this.resizeHandler=()=>this.handleWindowResize()}addListeners(){this.manageListeners(!0)}removeListeners(){this.manageListeners(!1)}manageListeners(e){var t;const n=this.container,a=n.actualOptions,s=a.interactivity.detectsOn;let l=i.Constants.mouseLeaveEvent;if("window"===s)n.interactivity.element=window,l=i.Constants.mouseOutEvent;else if("parent"===s&&n.canvas.element){const e=n.canvas.element;n.interactivity.element=null!==(t=e.parentElement)&&void 0!==t?t:e.parentNode}else n.interactivity.element=n.canvas.element;const c=!(0,o.isSsr)()&&"undefined"!=typeof matchMedia&&matchMedia("(prefers-color-scheme: dark)");c&&(void 0!==c.addEventListener?r(c,"change",this.themeChangeHandler,e):void 0!==c.addListener&&(e?c.addListener(this.oldThemeChangeHandler):c.removeListener(this.oldThemeChangeHandler)));const u=n.interactivity.element;if(!u)return;const d=u;(a.interactivity.events.onHover.enable||a.interactivity.events.onClick.enable)&&(r(u,i.Constants.mouseMoveEvent,this.mouseMoveHandler,e),r(u,i.Constants.touchStartEvent,this.touchStartHandler,e),r(u,i.Constants.touchMoveEvent,this.touchMoveHandler,e),a.interactivity.events.onClick.enable?(r(u,i.Constants.touchEndEvent,this.touchEndClickHandler,e),r(u,i.Constants.mouseUpEvent,this.mouseUpHandler,e),r(u,i.Constants.mouseDownEvent,this.mouseDownHandler,e)):r(u,i.Constants.touchEndEvent,this.touchEndHandler,e),r(u,l,this.mouseLeaveHandler,e),r(u,i.Constants.touchCancelEvent,this.touchCancelHandler,e)),n.canvas.element&&(n.canvas.element.style.pointerEvents=d===n.canvas.element?"initial":"none"),a.interactivity.events.resize&&("undefined"!=typeof ResizeObserver?this.resizeObserver&&!e?(n.canvas.element&&this.resizeObserver.unobserve(n.canvas.element),this.resizeObserver.disconnect(),delete this.resizeObserver):!this.resizeObserver&&e&&n.canvas.element&&(this.resizeObserver=new ResizeObserver((e=>{e.find((e=>e.target===n.canvas.element))&&this.handleWindowResize()})),this.resizeObserver.observe(n.canvas.element)):r(window,i.Constants.resizeEvent,this.resizeHandler,e)),document&&r(document,i.Constants.visibilityChangeEvent,this.visibilityChangeHandler,e,!1)}handleWindowResize(){this.resizeTimeout&&(clearTimeout(this.resizeTimeout),delete this.resizeTimeout),this.resizeTimeout=setTimeout((async()=>{var e;return await(null===(e=this.container.canvas)||void 0===e?void 0:e.windowResize())}),500)}handleVisibilityChange(){const e=this.container,t=e.actualOptions;this.mouseTouchFinish(),t.pauseOnBlur&&((null===document||void 0===document?void 0:document.hidden)?(e.pageHidden=!0,e.pause()):(e.pageHidden=!1,e.getAnimationStatus()?e.play(!0):e.draw(!0)))}mouseDown(){const e=this.container.interactivity;if(e){const t=e.mouse;t.clicking=!0,t.downPosition=t.position}}mouseTouchMove(e){var t,n,o,r,a,s,l;const c=this.container,u=c.actualOptions;if(!(null===(t=c.interactivity)||void 0===t?void 0:t.element))return;let d;c.interactivity.mouse.inside=!0;const h=c.canvas.element;if(e.type.startsWith("mouse")){this.canPush=!0;const t=e;if(c.interactivity.element===window){if(h){const e=h.getBoundingClientRect();d={x:t.clientX-e.left,y:t.clientY-e.top}}}else if("parent"===u.interactivity.detectsOn){const e=t.target,i=t.currentTarget,r=c.canvas.element;if(e&&i&&r){const n=e.getBoundingClientRect(),o=i.getBoundingClientRect(),a=r.getBoundingClientRect();d={x:t.offsetX+2*n.left-(o.left+a.left),y:t.offsetY+2*n.top-(o.top+a.top)}}else d={x:null!==(n=t.offsetX)&&void 0!==n?n:t.clientX,y:null!==(o=t.offsetY)&&void 0!==o?o:t.clientY}}else t.target===c.canvas.element&&(d={x:null!==(r=t.offsetX)&&void 0!==r?r:t.clientX,y:null!==(a=t.offsetY)&&void 0!==a?a:t.clientY})}else{this.canPush="touchmove"!==e.type;const t=e,n=t.touches[t.touches.length-1],i=null==h?void 0:h.getBoundingClientRect();d={x:n.clientX-(null!==(s=null==i?void 0:i.left)&&void 0!==s?s:0),y:n.clientY-(null!==(l=null==i?void 0:i.top)&&void 0!==l?l:0)}}const f=c.retina.pixelRatio;d&&(d.x*=f,d.y*=f),c.interactivity.mouse.position=d,c.interactivity.status=i.Constants.mouseMoveEvent}mouseTouchFinish(){const e=this.container.interactivity;if(!e)return;const t=e.mouse;delete t.position,delete t.clickPosition,delete t.downPosition,e.status=i.Constants.mouseLeaveEvent,t.inside=!1,t.clicking=!1}mouseTouchClick(e){const t=this.container,n=t.actualOptions,i=t.interactivity.mouse;i.inside=!0;let o=!1;const r=i.position;if(r&&n.interactivity.events.onClick.enable){for(const[,e]of t.plugins)if(e.clickPositionValid&&(o=e.clickPositionValid(r),o))break;o||this.doMouseTouchClick(e),i.clicking=!1}}doMouseTouchClick(e){const t=this.container,n=t.actualOptions;if(this.canPush){const e=t.interactivity.mouse.position;if(!e)return;t.interactivity.mouse.clickPosition={x:e.x,y:e.y},t.interactivity.mouse.clickTime=(new Date).getTime();const i=n.interactivity.events.onClick;if(i.mode instanceof Array)for(const e of i.mode)this.handleClickMode(e);else this.handleClickMode(i.mode)}"touchend"===e.type&&setTimeout((()=>this.mouseTouchFinish()),500)}handleThemeChange(e){const t=e.matches?this.container.options.defaultDarkTheme:this.container.options.defaultLightTheme,n=this.container.options.themes.find((e=>e.name===t));n&&n.default.auto&&this.container.loadTheme(t)}handleClickMode(e){this.container.handleClickMode(e)}}},4552:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExternalInteractorBase=void 0,t.ExternalInteractorBase=class{constructor(e){this.container=e,this.type=0}}},696:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FrameManager=void 0,t.FrameManager=class{constructor(e){this.container=e}async nextFrame(e){var t;try{const n=this.container;if(void 0!==n.lastFrameTime&&e<n.lastFrameTime+1e3/n.fpsLimit)return void n.draw(!1);null!==(t=n.lastFrameTime)&&void 0!==t||(n.lastFrameTime=e);const i=e-n.lastFrameTime,o={value:i,factor:60*i/1e3};if(n.lifeTime+=o.value,n.lastFrameTime=e,i>1e3)return void n.draw(!1);if(await n.particles.draw(o),n.duration>0&&n.lifeTime>n.duration)return void n.destroy();n.getAnimationStatus()&&n.draw(!1)}catch(e){console.error("tsParticles error in animation loop",e)}}}},5331:function(e,t){"use strict";var n,i=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.InteractionManager=void 0,t.InteractionManager=class{constructor(e,t){this.container=t,n.set(this,void 0),i(this,n,e,"f"),this.externalInteractors=[],this.particleInteractors=[],this.init()}init(){const e=o(this,n,"f").plugins.getInteractors(this.container,!0);this.externalInteractors=[],this.particleInteractors=[];for(const t of e)switch(t.type){case 0:this.externalInteractors.push(t);break;case 1:this.particleInteractors.push(t)}}async externalInteract(e){for(const t of this.externalInteractors)t.isEnabled()&&await t.interact(e)}async particlesInteract(e,t){for(const t of this.externalInteractors)t.reset(e);for(const n of this.particleInteractors)n.isEnabled(e)&&await n.interact(e,t)}handleClickMode(e){for(const t of this.externalInteractors)t.handleClickMode&&t.handleClickMode(e)}},n=new WeakMap},1636:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParticlesInteractorBase=void 0,t.ParticlesInteractorBase=class{constructor(e){this.container=e,this.type=1}}},77:function(e,t){"use strict";var n,i=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n};Object.defineProperty(t,"__esModule",{value:!0}),t.Plugins=void 0,t.Plugins=class{constructor(e){n.set(this,void 0),i(this,n,e,"f"),this.plugins=[],this.interactorsInitializers=new Map,this.moversInitializers=new Map,this.updatersInitializers=new Map,this.interactors=new Map,this.movers=new Map,this.updaters=new Map,this.presets=new Map,this.drawers=new Map,this.pathGenerators=new Map}getPlugin(e){return this.plugins.find((t=>t.id===e))}addPlugin(e){this.getPlugin(e.id)||this.plugins.push(e)}getAvailablePlugins(e){const t=new Map;for(const n of this.plugins)n.needsPlugin(e.actualOptions)&&t.set(n.id,n.getPlugin(e));return t}loadOptions(e,t){for(const n of this.plugins)n.loadOptions(e,t)}getPreset(e){return this.presets.get(e)}addPreset(e,t,n=!1){!n&&this.getPreset(e)||this.presets.set(e,t)}getShapeDrawer(e){return this.drawers.get(e)}addShapeDrawer(e,t){this.getShapeDrawer(e)||this.drawers.set(e,t)}getSupportedShapes(){return this.drawers.keys()}getPathGenerator(e){return this.pathGenerators.get(e)}addPathGenerator(e,t){this.getPathGenerator(e)||this.pathGenerators.set(e,t)}getInteractors(e,t=!1){let n=this.interactors.get(e);return n&&!t||(n=[...this.interactorsInitializers.values()].map((t=>t(e))),this.interactors.set(e,n)),n}addInteractor(e,t){this.interactorsInitializers.set(e,t)}getUpdaters(e,t=!1){let n=this.updaters.get(e);return n&&!t||(n=[...this.updatersInitializers.values()].map((t=>t(e))),this.updaters.set(e,n)),n}addParticleUpdater(e,t){this.updatersInitializers.set(e,t)}getMovers(e,t=!1){let n=this.movers.get(e);return n&&!t||(n=[...this.moversInitializers.values()].map((t=>t(e))),this.movers.set(e,n)),n}addParticleMover(e,t){this.moversInitializers.set(e,t)}},n=new WeakMap},1401:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Point=void 0,t.Point=class{constructor(e,t){this.position=e,this.particle=t}}},3917:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.QuadTree=void 0;const i=n(7434),o=n(51),r=n(5840),a=n(7266);class s{constructor(e,t){this.rectangle=e,this.capacity=t,this.points=[],this.divided=!1}insert(e){var t,n,i,o,r;return!!this.rectangle.contains(e.position)&&(this.points.length<this.capacity?(this.points.push(e),!0):(this.divided||this.subdivide(),null!==(r=(null===(t=this.northEast)||void 0===t?void 0:t.insert(e))||(null===(n=this.northWest)||void 0===n?void 0:n.insert(e))||(null===(i=this.southEast)||void 0===i?void 0:i.insert(e))||(null===(o=this.southWest)||void 0===o?void 0:o.insert(e)))&&void 0!==r&&r))}queryCircle(e,t){return this.query(new i.Circle(e.x,e.y,t))}queryCircleWarp(e,t,n){const i=n,r=n;return this.query(new o.CircleWarp(e.x,e.y,t,void 0!==i.canvas?i.canvas.size:r))}queryRectangle(e,t){return this.query(new r.Rectangle(e.x,e.y,t.width,t.height))}query(e,t){var n,i,o,r;const s=null!=t?t:[];if(!e.intersects(this.rectangle))return[];for(const t of this.points)!e.contains(t.position)&&(0,a.getDistance)(e.position,t.position)>t.particle.getRadius()||s.push(t.particle);return this.divided&&(null===(n=this.northEast)||void 0===n||n.query(e,s),null===(i=this.northWest)||void 0===i||i.query(e,s),null===(o=this.southEast)||void 0===o||o.query(e,s),null===(r=this.southWest)||void 0===r||r.query(e,s)),s}subdivide(){const e=this.rectangle.position.x,t=this.rectangle.position.y,n=this.rectangle.size.width,i=this.rectangle.size.height,o=this.capacity;this.northEast=new s(new r.Rectangle(e,t,n/2,i/2),o),this.northWest=new s(new r.Rectangle(e+n/2,t,n/2,i/2),o),this.southEast=new s(new r.Rectangle(e,t+i/2,n/2,i/2),o),this.southWest=new s(new r.Rectangle(e+n/2,t+i/2,n/2,i/2),o),this.divided=!0}}t.QuadTree=s},7641:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Range=void 0,t.Range=class{constructor(e,t){this.position={x:e,y:t}}}},5840:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Rectangle=void 0;const i=n(7641);class o extends i.Range{constructor(e,t,n,i){super(e,t),this.size={height:i,width:n}}contains(e){const t=this.size.width,n=this.size.height,i=this.position;return e.x>=i.x&&e.x<=i.x+t&&e.y>=i.y&&e.y<=i.y+n}intersects(e){const t=e,n=e,i=this.size.width,o=this.size.height,r=this.position,a=e.position;if(void 0!==n.radius)return n.intersects(this);if(!t.size)return!1;const s=t.size,l=s.width,c=s.height;return a.x<r.x+i&&a.x+l>r.x&&a.y<r.y+o&&a.y+c>r.y}}t.Rectangle=o},8061:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector=void 0;class n{constructor(e,t){if("number"!=typeof e&&e)this.x=e.x,this.y=e.y;else{if(void 0===e||void 0===t)throw new Error("tsParticles - Vector not initialized correctly");this.x=e,this.y=t}}static clone(e){return n.create(e.x,e.y)}static create(e,t){return new n(e,t)}static get origin(){return n.create(0,0)}get angle(){return Math.atan2(this.y,this.x)}set angle(e){this.updateFromAngle(e,this.length)}get length(){return Math.sqrt(this.getLengthSq())}set length(e){this.updateFromAngle(this.angle,e)}add(e){return n.create(this.x+e.x,this.y+e.y)}addTo(e){this.x+=e.x,this.y+=e.y}sub(e){return n.create(this.x-e.x,this.y-e.y)}subFrom(e){this.x-=e.x,this.y-=e.y}mult(e){return n.create(this.x*e,this.y*e)}multTo(e){this.x*=e,this.y*=e}div(e){return n.create(this.x/e,this.y/e)}divTo(e){this.x/=e,this.y/=e}distanceTo(e){return this.sub(e).length}getLengthSq(){return this.x**2+this.y**2}distanceToSq(e){return this.sub(e).getLengthSq()}manhattanDistanceTo(e){return Math.abs(e.x-this.x)+Math.abs(e.y-this.y)}copy(){return n.clone(this)}setTo(e){this.x=e.x,this.y=e.y}rotate(e){return n.create(this.x*Math.cos(e)-this.y*Math.sin(e),this.x*Math.sin(e)+this.y*Math.cos(e))}updateFromAngle(e,t){this.x=Math.cos(e)*t,this.y=Math.sin(e)*t}}t.Vector=n},8514:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Vector3d=void 0;const i=n(8061);class o extends i.Vector{constructor(e,t,n){if(super(e,t),"number"!=typeof e&&e)this.z=e.z;else{if(void 0===n)throw new Error("tsParticles - Vector not initialized correctly");this.z=n}}static clone(e){return o.create(e.x,e.y,e.z)}static create(e,t,n){return new o(e,t,n)}static get origin(){return o.create(0,0,0)}add(e){return e instanceof o?o.create(this.x+e.x,this.y+e.y,this.z+e.z):super.add(e)}addTo(e){super.addTo(e),e instanceof o&&(this.z+=e.z)}sub(e){return e instanceof o?o.create(this.x-e.x,this.y-e.y,this.z-e.z):super.sub(e)}subFrom(e){super.subFrom(e),e instanceof o&&(this.z-=e.z)}mult(e){return o.create(this.x*e,this.y*e,this.z*e)}multTo(e){super.multTo(e),this.z*=e}div(e){return o.create(this.x/e,this.y/e,this.z/e)}divTo(e){super.divTo(e),this.z/=e}copy(){return o.clone(this)}setTo(e){super.setTo(e);const t=e;void 0!==t.z&&(this.z=t.z)}}t.Vector3d=o},4602:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},7187:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},7169:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1798:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6595:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},944:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6362:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4605:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},7729:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},2794:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},2565:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},2467:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5153:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6453:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9961:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},2555:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3722:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9556:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1592:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4090:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3407:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4918:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},396:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5270:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4995:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Attractor=void 0;const i=n(7266),o=n(7434),r=n(6715),a=n(4552),s=n(8061),l=n(4351);class c extends a.ExternalInteractorBase{constructor(e){super(e),e.attract||(e.attract={particles:[]}),this.handleClickMode=t=>{const n=this.container.actualOptions;if("attract"===t){e.attract||(e.attract={particles:[]}),e.attract.clicking=!0,e.attract.count=0;for(const t of e.attract.particles)t.velocity.setTo(t.initialVelocity);e.attract.particles=[],e.attract.finish=!1,setTimeout((()=>{e.destroyed||(e.attract||(e.attract={particles:[]}),e.attract.clicking=!1)}),1e3*n.interactivity.modes.attract.duration)}}}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,i=t.interactivity.events;if(!(n.position&&i.onHover.enable||n.clickPosition&&i.onClick.enable))return!1;const o=i.onHover.mode,r=i.onClick.mode;return(0,l.isInArray)("attract",o)||(0,l.isInArray)("attract",r)}reset(){}async interact(){const e=this.container,t=e.actualOptions,n=e.interactivity.status===r.Constants.mouseMoveEvent,i=t.interactivity.events,o=i.onHover.enable,a=i.onHover.mode,s=i.onClick.enable,c=i.onClick.mode;n&&o&&(0,l.isInArray)("attract",a)?this.hoverAttract():s&&(0,l.isInArray)("attract",c)&&this.clickAttract()}hoverAttract(){const e=this.container,t=e.interactivity.mouse.position;if(!t)return;const n=e.retina.attractModeDistance;this.processAttract(t,n,new o.Circle(t.x,t.y,n))}processAttract(e,t,n){const o=this.container,r=o.actualOptions.interactivity.modes.attract,a=o.particles.quadTree.query(n);for(const n of a){const{dx:o,dy:a,distance:l}=(0,i.getDistances)(n.position,e),c=r.speed*r.factor,u=(0,i.clamp)((0,i.calcEasing)(1-l/t,r.easing)*c,0,r.maxSpeed),d=s.Vector.create(0===l?c:o/l*u,0===l?c:a/l*u);n.position.subFrom(d)}}clickAttract(){const e=this.container;if(e.attract||(e.attract={particles:[]}),e.attract.finish||(e.attract.count||(e.attract.count=0),e.attract.count++,e.attract.count===e.particles.count&&(e.attract.finish=!0)),e.attract.clicking){const t=e.interactivity.mouse.clickPosition;if(!t)return;const n=e.retina.attractModeDistance;this.processAttract(t,n,new o.Circle(t.x,t.y,n))}else!1===e.attract.clicking&&(e.attract.particles=[])}}t.Attractor=c},715:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalAttractInteraction=void 0;const i=n(4995);t.loadExternalAttractInteraction=async function(e){await e.addInteractor("externalAttract",(e=>new i.Attractor(e)))}},8033:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bouncer=void 0;const i=n(4351),o=n(7434),r=n(6715),a=n(4552),s=n(5840),l=n(8061);class c extends a.ExternalInteractorBase{constructor(e){super(e)}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,o=t.interactivity.events,r=o.onDiv;return n.position&&o.onHover.enable&&(0,i.isInArray)("bounce",o.onHover.mode)||(0,i.isDivModeEnabled)("bounce",r)}async interact(){const e=this.container,t=e.actualOptions.interactivity.events,n=e.interactivity.status===r.Constants.mouseMoveEvent,o=t.onHover.enable,a=t.onHover.mode,s=t.onDiv;n&&o&&(0,i.isInArray)("bounce",a)?this.processMouseBounce():(0,i.divModeExecute)("bounce",s,((e,t)=>this.singleSelectorBounce(e,t)))}reset(){}processMouseBounce(){const e=this.container,t=10*e.retina.pixelRatio,n=e.interactivity.mouse.position,i=e.retina.bounceModeDistance;n&&this.processBounce(n,i,new o.Circle(n.x,n.y,i+t))}singleSelectorBounce(e,t){const n=this.container,i=document.querySelectorAll(e);i.length&&i.forEach((e=>{const i=e,r=n.retina.pixelRatio,a={x:(i.offsetLeft+i.offsetWidth/2)*r,y:(i.offsetTop+i.offsetHeight/2)*r},l=i.offsetWidth/2*r,c=10*r,u="circle"===t.type?new o.Circle(a.x,a.y,l+c):new s.Rectangle(i.offsetLeft*r-c,i.offsetTop*r-c,i.offsetWidth*r+2*c,i.offsetHeight*r+2*c);this.processBounce(a,l,u)}))}processBounce(e,t,n){const r=this.container.particles.quadTree.query(n);for(const a of r)n instanceof o.Circle?(0,i.circleBounce)((0,i.circleBounceDataFromParticle)(a),{position:e,radius:t,mass:t**2*Math.PI/2,velocity:l.Vector.origin,factor:l.Vector.origin}):n instanceof s.Rectangle&&(0,i.rectBounce)(a,(0,i.calculateBounds)(e,t))}}t.Bouncer=c},8696:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalBounceInteraction=void 0;const i=n(8033);t.loadExternalBounceInteraction=async function(e){await e.addInteractor("externalBounce",(e=>new i.Bouncer(e)))}},8769:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bubbler=void 0;const i=n(7266),o=n(7129),r=n(4351),a=n(7434),s=n(6715),l=n(4552),c=n(5840);function u(e,t,n,o){if(t>=n){const r=e+(t-n)*o;return(0,i.clamp)(r,e,t)}if(t<n){const r=e-(n-t)*o;return(0,i.clamp)(r,t,e)}}class d extends l.ExternalInteractorBase{constructor(e){super(e),e.bubble||(e.bubble={}),this.handleClickMode=t=>{"bubble"===t&&(e.bubble||(e.bubble={}),e.bubble.clicking=!0)}}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,i=t.interactivity.events,o=i.onDiv,a=(0,r.isDivModeEnabled)("bubble",o);if(!(a||i.onHover.enable&&n.position||i.onClick.enable&&n.clickPosition))return!1;const s=i.onHover.mode,l=i.onClick.mode;return(0,r.isInArray)("bubble",s)||(0,r.isInArray)("bubble",l)||a}reset(e,t){e.bubble.inRange&&!t||(delete e.bubble.div,delete e.bubble.opacity,delete e.bubble.radius,delete e.bubble.color)}async interact(){const e=this.container.actualOptions.interactivity.events,t=e.onHover,n=e.onClick,i=t.enable,o=t.mode,a=n.enable,s=n.mode,l=e.onDiv;i&&(0,r.isInArray)("bubble",o)?this.hoverBubble():a&&(0,r.isInArray)("bubble",s)?this.clickBubble():(0,r.divModeExecute)("bubble",l,((e,t)=>this.singleSelectorHover(e,t)))}singleSelectorHover(e,t){const n=this.container,i=document.querySelectorAll(e);i.length&&i.forEach((e=>{const i=e,o=n.retina.pixelRatio,s={x:(i.offsetLeft+i.offsetWidth/2)*o,y:(i.offsetTop+i.offsetHeight/2)*o},l=i.offsetWidth/2*o,u="circle"===t.type?new a.Circle(s.x,s.y,l):new c.Rectangle(i.offsetLeft*o,i.offsetTop*o,i.offsetWidth*o,i.offsetHeight*o),d=n.particles.quadTree.query(u);for(const e of d){if(!u.contains(e.getPosition()))continue;e.bubble.inRange=!0;const t=n.actualOptions.interactivity.modes.bubble.divs,o=(0,r.divMode)(t,i);e.bubble.div&&e.bubble.div===i||(this.reset(e,!0),e.bubble.div=i),this.hoverBubbleSize(e,1,o),this.hoverBubbleOpacity(e,1,o),this.hoverBubbleColor(e,1,o)}}))}process(e,t,n,i){const o=this.container,r=i.bubbleObj.optValue;if(void 0===r)return;const a=o.actualOptions.interactivity.modes.bubble.duration,s=o.retina.bubbleModeDistance,l=i.particlesObj.optValue,c=i.bubbleObj.value,u=i.particlesObj.value||0,d=i.type;if(r!==l)if(o.bubble||(o.bubble={}),o.bubble.durationEnd)c&&("size"===d&&delete e.bubble.radius,"opacity"===d&&delete e.bubble.opacity);else if(t<=s){if((null!=c?c:u)!==r){const t=u-n*(u-r)/a;"size"===d&&(e.bubble.radius=t),"opacity"===d&&(e.bubble.opacity=t)}}else"size"===d&&delete e.bubble.radius,"opacity"===d&&delete e.bubble.opacity}clickBubble(){var e,t;const n=this.container,o=n.actualOptions,r=n.interactivity.mouse.clickPosition;if(!r)return;n.bubble||(n.bubble={});const a=n.retina.bubbleModeDistance,s=n.particles.quadTree.queryCircle(r,a);for(const a of s){if(!n.bubble.clicking)continue;a.bubble.inRange=!n.bubble.durationEnd;const s=a.getPosition(),l=(0,i.getDistance)(s,r),c=((new Date).getTime()-(n.interactivity.mouse.clickTime||0))/1e3;c>o.interactivity.modes.bubble.duration&&(n.bubble.durationEnd=!0),c>2*o.interactivity.modes.bubble.duration&&(n.bubble.clicking=!1,n.bubble.durationEnd=!1);const u={bubbleObj:{optValue:n.retina.bubbleModeSize,value:a.bubble.radius},particlesObj:{optValue:(0,i.getRangeMax)(a.options.size.value)*n.retina.pixelRatio,value:a.size.value},type:"size"};this.process(a,l,c,u);const d={bubbleObj:{optValue:o.interactivity.modes.bubble.opacity,value:a.bubble.opacity},particlesObj:{optValue:(0,i.getRangeMax)(a.options.opacity.value),value:null!==(t=null===(e=a.opacity)||void 0===e?void 0:e.value)&&void 0!==t?t:1},type:"opacity"};this.process(a,l,c,d),n.bubble.durationEnd?delete a.bubble.color:l<=n.retina.bubbleModeDistance?this.hoverBubbleColor(a,l):delete a.bubble.color}}hoverBubble(){const e=this.container,t=e.interactivity.mouse.position;if(void 0===t)return;const n=e.retina.bubbleModeDistance,o=e.particles.quadTree.queryCircle(t,n);for(const r of o){r.bubble.inRange=!0;const o=r.getPosition(),a=(0,i.getDistance)(o,t),l=1-a/n;a<=n?l>=0&&e.interactivity.status===s.Constants.mouseMoveEvent&&(this.hoverBubbleSize(r,l),this.hoverBubbleOpacity(r,l),this.hoverBubbleColor(r,l)):this.reset(r),e.interactivity.status===s.Constants.mouseLeaveEvent&&this.reset(r)}}hoverBubbleSize(e,t,n){const o=this.container,r=(null==n?void 0:n.size)?n.size*o.retina.pixelRatio:o.retina.bubbleModeSize;if(void 0===r)return;const a=(0,i.getRangeMax)(e.options.size.value)*o.retina.pixelRatio,s=u(e.size.value,r,a,t);void 0!==s&&(e.bubble.radius=s)}hoverBubbleOpacity(e,t,n){var o,r,a;const s=this.container.actualOptions,l=null!==(o=null==n?void 0:n.opacity)&&void 0!==o?o:s.interactivity.modes.bubble.opacity;if(!l)return;const c=e.options.opacity.value,d=u(null!==(a=null===(r=e.opacity)||void 0===r?void 0:r.value)&&void 0!==a?a:1,l,(0,i.getRangeMax)(c),t);void 0!==d&&(e.bubble.opacity=d)}hoverBubbleColor(e,t,n){const i=this.container.actualOptions,a=null!=n?n:i.interactivity.modes.bubble;if(!e.bubble.finalColor){const t=a.color;if(!t)return;const n=t instanceof Array?(0,r.itemFromArray)(t):t;e.bubble.finalColor=(0,o.colorToHsl)(n)}if(e.bubble.finalColor)if(a.mix){e.bubble.color=void 0;const n=e.getFillColor();e.bubble.color=n?(0,o.rgbToHsl)((0,o.colorMix)(n,e.bubble.finalColor,1-t,t)):e.bubble.finalColor}else e.bubble.color=e.bubble.finalColor}}t.Bubbler=d},7064:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalBubbleInteraction=void 0;const i=n(8769);t.loadExternalBubbleInteraction=async function(e){await e.addInteractor("externalBubble",(e=>new i.Bubbler(e)))}},4906:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Connector=void 0;const i=n(4552),o=n(4351);class r extends i.ExternalInteractorBase{constructor(e){super(e)}isEnabled(){const e=this.container,t=e.interactivity.mouse,n=e.actualOptions.interactivity.events;return!(!n.onHover.enable||!t.position)&&(0,o.isInArray)("connect",n.onHover.mode)}reset(){}async interact(){const e=this.container;if(e.actualOptions.interactivity.events.onHover.enable&&"mousemove"===e.interactivity.status){const t=e.interactivity.mouse.position;if(!t)return;const n=Math.abs(e.retina.connectModeRadius),i=e.particles.quadTree.queryCircle(t,n);let o=0;for(const t of i){const n=t.getPosition();for(const r of i.slice(o+1)){const i=r.getPosition(),o=Math.abs(e.retina.connectModeDistance),a=Math.abs(n.x-i.x),s=Math.abs(n.y-i.y);a<o&&s<o&&e.canvas.drawConnectLine(t,r)}++o}}}}t.Connector=r},8722:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalConnectInteraction=void 0;const i=n(4906);t.loadExternalConnectInteraction=async function(e){await e.addInteractor("externalConnect",(e=>new i.Connector(e)))}},3371:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Grabber=void 0;const i=n(7129),o=n(6715),r=n(4552),a=n(7266),s=n(4351);class l extends r.ExternalInteractorBase{constructor(e){super(e)}isEnabled(){const e=this.container,t=e.interactivity.mouse,n=e.actualOptions.interactivity.events;return n.onHover.enable&&!!t.position&&(0,s.isInArray)("grab",n.onHover.mode)}reset(){}async interact(){var e;const t=this.container,n=t.actualOptions,r=n.interactivity;if(!r.events.onHover.enable||t.interactivity.status!==o.Constants.mouseMoveEvent)return;const s=t.interactivity.mouse.position;if(!s)return;const l=t.retina.grabModeDistance,c=t.particles.quadTree.queryCircle(s,l);for(const o of c){const c=o.getPosition(),u=(0,a.getDistance)(c,s);if(u>l)continue;const d=r.modes.grab.links,h=d.opacity,f=h-u*h/l;if(f<=0)continue;const p=null!==(e=d.color)&&void 0!==e?e:o.options.links.color;if(!t.particles.grabLineColor){const e=n.interactivity.modes.grab.links;t.particles.grabLineColor=(0,i.getLinkRandomColor)(p,e.blink,e.consent)}const v=(0,i.getLinkColor)(o,void 0,t.particles.grabLineColor);if(!v)return;t.canvas.drawGrabLine(o,v,f,s)}}}t.Grabber=l},6574:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalGrabInteraction=void 0;const i=n(3371);t.loadExternalGrabInteraction=async function(e){await e.addInteractor("externalGrab",(e=>new i.Grabber(e)))}},4276:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pauser=void 0;const i=n(4552);class o extends i.ExternalInteractorBase{constructor(e){super(e),this.handleClickMode=e=>{if("pause"!==e)return;const t=this.container;t.getAnimationStatus()?t.pause():t.play()}}isEnabled(){return!0}reset(){}async interact(){}}t.Pauser=o},5089:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalPauseInteraction=void 0;const i=n(4276);t.loadExternalPauseInteraction=async function(e){await e.addInteractor("externalPause",(e=>new i.Pauser(e)))}},1473:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pusher=void 0;const i=n(4552),o=n(4351);class r extends i.ExternalInteractorBase{constructor(e){super(e),this.handleClickMode=e=>{if("push"!==e)return;const t=this.container,n=t.actualOptions,i=n.interactivity.modes.push.quantity;if(i<=0)return;const r=n.interactivity.modes.push,a=(0,o.itemFromArray)([void 0,...r.groups]),s=void 0!==a?t.actualOptions.particles.groups[a]:void 0;t.particles.push(i,t.interactivity.mouse,s,a)}}isEnabled(){return!0}reset(){}async interact(){}}t.Pusher=r},8795:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalPushInteraction=void 0;const i=n(1473);t.loadExternalPushInteraction=async function(e){await e.addInteractor("externalPush",(e=>new i.Pusher(e)))}},5714:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Remover=void 0;const i=n(4552);class o extends i.ExternalInteractorBase{constructor(e){super(e),this.handleClickMode=e=>{if("remove"!==e)return;const t=this.container,n=t.actualOptions.interactivity.modes.remove.quantity;t.particles.removeQuantity(n)}}isEnabled(){return!0}reset(){}async interact(){}}t.Remover=o},2879:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalRemoveInteraction=void 0;const i=n(5714);t.loadExternalRemoveInteraction=async function(e){await e.addInteractor("externalRemove",(e=>new i.Remover(e)))}},1269:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Repulser=void 0;const i=n(7266),o=n(4351),r=n(7434),a=n(6715),s=n(4552),l=n(5840),c=n(8061);class u extends s.ExternalInteractorBase{constructor(e){super(e),e.repulse||(e.repulse={particles:[]}),this.handleClickMode=t=>{const n=this.container.actualOptions;if("repulse"===t){e.repulse||(e.repulse={particles:[]}),e.repulse.clicking=!0,e.repulse.count=0;for(const t of e.repulse.particles)t.velocity.setTo(t.initialVelocity);e.repulse.particles=[],e.repulse.finish=!1,setTimeout((()=>{e.destroyed||(e.repulse||(e.repulse={particles:[]}),e.repulse.clicking=!1)}),1e3*n.interactivity.modes.repulse.duration)}}}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,i=t.interactivity.events,r=i.onDiv,a=(0,o.isDivModeEnabled)("repulse",r);if(!(a||i.onHover.enable&&n.position||i.onClick.enable&&n.clickPosition))return!1;const s=i.onHover.mode,l=i.onClick.mode;return(0,o.isInArray)("repulse",s)||(0,o.isInArray)("repulse",l)||a}reset(){}async interact(){const e=this.container,t=e.actualOptions,n=e.interactivity.status===a.Constants.mouseMoveEvent,i=t.interactivity.events,r=i.onHover.enable,s=i.onHover.mode,l=i.onClick.enable,c=i.onClick.mode,u=i.onDiv;n&&r&&(0,o.isInArray)("repulse",s)?this.hoverRepulse():l&&(0,o.isInArray)("repulse",c)?this.clickRepulse():(0,o.divModeExecute)("repulse",u,((e,t)=>this.singleSelectorRepulse(e,t)))}singleSelectorRepulse(e,t){const n=this.container,i=document.querySelectorAll(e);i.length&&i.forEach((e=>{const i=e,a=n.retina.pixelRatio,s={x:(i.offsetLeft+i.offsetWidth/2)*a,y:(i.offsetTop+i.offsetHeight/2)*a},c=i.offsetWidth/2*a,u="circle"===t.type?new r.Circle(s.x,s.y,c):new l.Rectangle(i.offsetLeft*a,i.offsetTop*a,i.offsetWidth*a,i.offsetHeight*a),d=n.actualOptions.interactivity.modes.repulse.divs,h=(0,o.divMode)(d,i);this.processRepulse(s,c,u,h)}))}hoverRepulse(){const e=this.container,t=e.interactivity.mouse.position;if(!t)return;const n=e.retina.repulseModeDistance;this.processRepulse(t,n,new r.Circle(t.x,t.y,n))}processRepulse(e,t,n,o){var r;const a=this.container,s=a.particles.quadTree.query(n),l=a.actualOptions.interactivity.modes.repulse;for(const n of s){const{dx:a,dy:s,distance:u}=(0,i.getDistances)(n.position,e),d=(null!==(r=null==o?void 0:o.speed)&&void 0!==r?r:l.speed)*l.factor,h=(0,i.clamp)((0,i.calcEasing)(1-u/t,l.easing)*d,0,l.maxSpeed),f=c.Vector.create(0===u?d:a/u*h,0===u?d:s/u*h);n.position.addTo(f)}}clickRepulse(){const e=this.container;if(e.repulse||(e.repulse={particles:[]}),e.repulse.finish||(e.repulse.count||(e.repulse.count=0),e.repulse.count++,e.repulse.count===e.particles.count&&(e.repulse.finish=!0)),e.repulse.clicking){const t=e.retina.repulseModeDistance,n=Math.pow(t/6,3),o=e.interactivity.mouse.clickPosition;if(void 0===o)return;const a=new r.Circle(o.x,o.y,n),s=e.particles.quadTree.query(a);for(const t of s){const{dx:r,dy:a,distance:s}=(0,i.getDistances)(o,t.position),l=s**2,u=e.actualOptions.interactivity.modes.repulse.speed,d=-n*u/l;if(l<=n){e.repulse.particles.push(t);const n=c.Vector.create(r,a);n.length=d,t.velocity.setTo(n)}}}else if(!1===e.repulse.clicking){for(const t of e.repulse.particles)t.velocity.setTo(t.initialVelocity);e.repulse.particles=[]}}}t.Repulser=u},6423:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalRepulseInteraction=void 0;const i=n(1269);t.loadExternalRepulseInteraction=async function(e){await e.addInteractor("externalRepulse",(e=>new i.Repulser(e)))}},1006:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TrailMaker=void 0;const i=n(4552),o=n(4351);class r extends i.ExternalInteractorBase{constructor(e){super(e),this.delay=0}async interact(e){var t,n,i,o;if(!this.container.retina.reduceFactor)return;const r=this.container,a=r.actualOptions.interactivity.modes.trail,s=1e3*a.delay/this.container.retina.reduceFactor;if(this.delay<s&&(this.delay+=e.value),this.delay<s)return;let l=!0;a.pauseOnStop&&(r.interactivity.mouse.position===this.lastPosition||(null===(t=r.interactivity.mouse.position)||void 0===t?void 0:t.x)===(null===(n=this.lastPosition)||void 0===n?void 0:n.x)&&(null===(i=r.interactivity.mouse.position)||void 0===i?void 0:i.y)===(null===(o=this.lastPosition)||void 0===o?void 0:o.y))&&(l=!1),r.interactivity.mouse.position?this.lastPosition={x:r.interactivity.mouse.position.x,y:r.interactivity.mouse.position.y}:delete this.lastPosition,l&&r.particles.push(a.quantity,r.interactivity.mouse,a.particles),this.delay-=s}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,i=t.interactivity.events;return n.clicking&&n.inside&&!!n.position&&(0,o.isInArray)("trail",i.onClick.mode)||n.inside&&!!n.position&&(0,o.isInArray)("trail",i.onHover.mode)}reset(){}}t.TrailMaker=r},3229:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadExternalTrailInteraction=void 0;const i=n(1006);t.loadExternalTrailInteraction=async function(e){await e.addInteractor("externalTrail",(e=>new i.TrailMaker(e)))}},8615:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Attractor=void 0;const i=n(1636),o=n(7266);class r extends i.ParticlesInteractorBase{constructor(e){super(e)}async interact(e){var t;const n=this.container,i=null!==(t=e.retina.attractDistance)&&void 0!==t?t:n.retina.attractDistance,r=e.getPosition(),a=n.particles.quadTree.queryCircle(r,i);for(const t of a){if(e===t||!t.options.move.attract.enable||t.destroyed||t.spawning)continue;const n=t.getPosition(),{dx:i,dy:a}=(0,o.getDistances)(r,n),s=e.options.move.attract.rotate,l=i/(1e3*s.x),c=a/(1e3*s.y),u=t.size.value/e.size.value,d=1/u;e.velocity.x-=l*u,e.velocity.y-=c*u,t.velocity.x+=l*d,t.velocity.y+=c*d}}isEnabled(e){return e.options.move.attract.enable}reset(){}}t.Attractor=r},55:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadParticlesAttractInteraction=void 0;const i=n(8615);t.loadParticlesAttractInteraction=async function(e){await e.addInteractor("particlesAttract",(e=>new i.Attractor(e)))}},705:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Collider=void 0;const i=n(4351),o=n(7266),r=n(1636);function a(e,t){(0,i.circleBounce)((0,i.circleBounceDataFromParticle)(e),(0,i.circleBounceDataFromParticle)(t))}class s extends r.ParticlesInteractorBase{constructor(e){super(e)}isEnabled(e){return e.options.collisions.enable}reset(){}async interact(e){const t=this.container,n=e.getPosition(),i=e.getRadius(),r=t.particles.quadTree.queryCircle(n,2*i);for(const t of r){if(e===t||!t.options.collisions.enable||e.options.collisions.mode!==t.options.collisions.mode||t.destroyed||t.spawning)continue;const r=t.getPosition();Math.round(n.z)===Math.round(r.z)&&((0,o.getDistance)(n,r)<=i+t.getRadius()&&this.resolveCollision(e,t))}}resolveCollision(e,t){switch(e.options.collisions.mode){case"absorb":this.absorb(e,t);break;case"bounce":a(e,t);break;case"destroy":!function(e,t){e.unbreakable||t.unbreakable||a(e,t),void 0===e.getRadius()&&void 0!==t.getRadius()?e.destroy():void 0!==e.getRadius()&&void 0===t.getRadius()?t.destroy():void 0!==e.getRadius()&&void 0!==t.getRadius()&&(e.getRadius()>=t.getRadius()?t.destroy():e.destroy())}(e,t)}}absorb(e,t){const n=this.container,i=n.fpsLimit/1e3;if(void 0===e.getRadius()&&void 0!==t.getRadius())e.destroy();else if(void 0!==e.getRadius()&&void 0===t.getRadius())t.destroy();else if(void 0!==e.getRadius()&&void 0!==t.getRadius())if(e.getRadius()>=t.getRadius()){const r=(0,o.clamp)(e.getRadius()/t.getRadius(),0,t.getRadius())*i;e.size.value+=r,t.size.value-=r,t.getRadius()<=n.retina.pixelRatio&&(t.size.value=0,t.destroy())}else{const r=(0,o.clamp)(t.getRadius()/e.getRadius(),0,e.getRadius())*i;e.size.value-=r,t.size.value+=r,e.getRadius()<=n.retina.pixelRatio&&(e.size.value=0,e.destroy())}}}t.Collider=s},7818:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadParticlesCollisionsInteraction=void 0;const i=n(705);t.loadParticlesCollisionsInteraction=async function(e){await e.addInteractor("particlesCollisions",(e=>new i.Collider(e)))}},253:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LinkInstance=void 0;const i=n(7129),o=n(1072),r=n(7266);t.LinkInstance=class{constructor(e){this.container=e}particleCreated(e){e.links=[]}particleDestroyed(e){e.links=[]}drawParticle(e,t){const n=t,i=this.container,o=i.particles,r=t.options;if(n.links.length<=0)return;e.save();const a=n.links.filter((e=>i.particles.getLinkFrequency(n,e.destination)<=r.links.frequency));for(const e of a){const t=e.destination;if(r.links.triangles.enable){const s=a.map((e=>e.destination)),l=t.links.filter((e=>i.particles.getLinkFrequency(t,e.destination)<=t.options.links.frequency&&s.indexOf(e.destination)>=0));if(l.length)for(const i of l){const a=i.destination;o.getTriangleFrequency(n,t,a)>r.links.triangles.frequency||this.drawLinkTriangle(n,e,i)}}e.opacity>0&&i.retina.linksWidth>0&&this.drawLinkLine(n,e)}e.restore()}drawLinkTriangle(e,t,n){var a;const s=this.container,l=s.actualOptions,c=t.destination,u=n.destination,d=e.options.links.triangles,h=null!==(a=d.opacity)&&void 0!==a?a:(t.opacity+n.opacity)/2;if(h<=0)return;const f=e.getPosition(),p=c.getPosition(),v=u.getPosition();s.canvas.draw((t=>{if((0,r.getDistance)(f,p)>s.retina.linksDistance||(0,r.getDistance)(v,p)>s.retina.linksDistance||(0,r.getDistance)(v,f)>s.retina.linksDistance)return;let n=(0,i.colorToRgb)(d.color);if(!n){const t=e.options.links,o=void 0!==t.id?s.particles.linksColors.get(t.id):s.particles.linksColor;n=(0,i.getLinkColor)(e,c,o)}n&&(0,o.drawLinkTriangle)(t,f,p,v,l.backgroundMask.enable,l.backgroundMask.composite,n,h)}))}drawLinkLine(e,t){const n=this.container,a=n.actualOptions,s=t.destination,l=e.getPosition(),c=s.getPosition();let u=t.opacity;n.canvas.draw((t=>{var d,h;let f;const p=e.options.twinkle.lines;if(p.enable){const e=p.frequency,t=(0,i.colorToRgb)(p.color);Math.random()<e&&t&&(f=t,u=(0,r.getRangeValue)(p.opacity))}if(!f){const t=e.options.links,o=void 0!==t.id?n.particles.linksColors.get(t.id):n.particles.linksColor;f=(0,i.getLinkColor)(e,s,o)}if(!f)return;const v=null!==(d=e.retina.linksWidth)&&void 0!==d?d:n.retina.linksWidth,y=null!==(h=e.retina.linksDistance)&&void 0!==h?h:n.retina.linksDistance;(0,o.drawLinkLine)(t,v,l,c,y,n.canvas.size,e.options.links.warp,a.backgroundMask.enable,a.backgroundMask.composite,f,u,e.options.links.shadow)}))}}},913:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Linker=void 0;const i=n(7434),o=n(51),r=n(1636),a=n(7266),s=n(7129);function l(e,t,n,i,o){let r=(0,a.getDistance)(e,t);if(!o||r<=n)return r;const s={x:t.x-i.width,y:t.y};if(r=(0,a.getDistance)(e,s),r<=n)return r;const l={x:t.x-i.width,y:t.y-i.height};if(r=(0,a.getDistance)(e,l),r<=n)return r;const c={x:t.x,y:t.y-i.height};return r=(0,a.getDistance)(e,c),r}class c extends r.ParticlesInteractorBase{constructor(e){super(e)}isEnabled(e){return e.options.links.enable}reset(){}async interact(e){var t;e.links=[];const n=e.getPosition(),r=this.container,a=r.canvas.size;if(n.x<0||n.y<0||n.x>a.width||n.y>a.height)return;const s=e.options.links,c=s.opacity,u=null!==(t=e.retina.linksDistance)&&void 0!==t?t:r.retina.linksDistance,d=s.warp,h=d?new o.CircleWarp(n.x,n.y,u,a):new i.Circle(n.x,n.y,u),f=r.particles.quadTree.query(h);for(const t of f){const i=t.options.links;if(e===t||!i.enable||s.id!==i.id||t.spawning||t.destroyed||-1!==e.links.map((e=>e.destination)).indexOf(t)||-1!==t.links.map((e=>e.destination)).indexOf(e))continue;const o=t.getPosition();if(o.x<0||o.y<0||o.x>a.width||o.y>a.height)continue;const r=l(n,o,u,a,d&&i.warp);if(r>u)return;const h=(1-r/u)*c;this.setColor(e),e.links.push({destination:t,opacity:h})}}setColor(e){const t=this.container,n=e.options.links;let i=void 0===n.id?t.particles.linksColor:t.particles.linksColors.get(n.id);if(!i){const e=n.color;i=(0,s.getLinkRandomColor)(e,n.blink,n.consent),void 0===n.id?t.particles.linksColor=i:t.particles.linksColors.set(n.id,i)}}}t.Linker=c},5923:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadParticlesLinksInteraction=void 0;const i=n(2957),o=n(9878);t.loadParticlesLinksInteraction=async function(e){await(0,i.loadInteraction)(e),await(0,o.loadPlugin)(e)}},2957:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadInteraction=void 0;const i=n(913);t.loadInteraction=async function(e){await e.addInteractor("particlesLinks",(e=>new i.Linker(e)))}},9878:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadPlugin=void 0;const i=n(253);class o{constructor(){this.id="links"}getPlugin(e){return new i.LinkInstance(e)}needsPlugin(){return!0}loadOptions(){}}t.loadPlugin=async function(e){const t=new o;await e.addPlugin(t)}},2111:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseMover=void 0;const i=n(5010),o=n(7266);t.BaseMover=class{init(e){var t;const n=e.container,i=e.options.move.spin;if(i.enable){const r=null!==(t=i.position)&&void 0!==t?t:{x:50,y:50},a={x:r.x/100*n.canvas.size.width,y:r.y/100*n.canvas.size.height},s=e.getPosition(),l=(0,o.getDistance)(s,a),c=(0,o.getRangeValue)(i.acceleration);e.retina.spinAcceleration=c*n.retina.pixelRatio,e.spin={center:a,direction:e.velocity.x>=0?"clockwise":"counter-clockwise",angle:e.velocity.angle,radius:l,acceleration:e.retina.spinAcceleration}}}isEnabled(e){return!e.destroyed&&e.options.move.enable}move(e,t){var n,r,a,s,l;const c=e.options,u=c.move;if(!u.enable)return;const d=e.container,h=(0,i.getProximitySpeedFactor)(e),f=(null!==(n=(s=e.retina).moveSpeed)&&void 0!==n?n:s.moveSpeed=(0,o.getRangeValue)(u.speed)*d.retina.pixelRatio)*d.retina.reduceFactor,p=null!==(r=(l=e.retina).moveDrift)&&void 0!==r?r:l.moveDrift=(0,o.getRangeValue)(e.options.move.drift)*d.retina.pixelRatio,v=(0,o.getRangeMax)(c.size.value)*d.retina.pixelRatio,y=f*((u.size?e.getRadius()/v:1)*h*(t.factor||1))/2;(0,i.applyPath)(e,t);const g=e.gravity,m=g.enable&&g.inverse?-1:1;g.enable&&y&&(e.velocity.y+=m*(g.acceleration*t.factor)/(60*y)),p&&y&&(e.velocity.x+=p*t.factor/(60*y));const b=e.moveDecay;1!=b&&e.velocity.multTo(b);const w=e.velocity.mult(y),S=null!==(a=e.retina.maxSpeed)&&void 0!==a?a:d.retina.maxSpeed;g.enable&&S>0&&(!g.inverse&&w.y>=0&&w.y>=S||g.inverse&&w.y<=0&&w.y<=-S)&&(w.y=m*S,y&&(e.velocity.y=w.y/y));const _=e.options.zIndex,P=(1-e.zIndexFactor)**_.velocityRate;u.spin.enable?(0,i.spin)(e,y):(1!=P&&w.multTo(P),e.position.addTo(w),u.vibrate&&(e.position.x+=Math.sin(e.position.x*Math.cos(e.position.y)),e.position.y+=Math.cos(e.position.y*Math.sin(e.position.x)))),(0,i.applyDistance)(e)}}},5010:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getProximitySpeedFactor=t.applyPath=t.spin=t.applyDistance=void 0;const i=n(7266),o=n(4351);t.applyDistance=function(e){const t=e.initialPosition,{dx:n,dy:o}=(0,i.getDistances)(t,e.position),r=Math.abs(n),a=Math.abs(o),s=e.retina.maxDistance.horizontal,l=e.retina.maxDistance.vertical;if(s||l)if((s&&r>=s||l&&a>=l)&&!e.misplaced)e.misplaced=!!s&&r>s||!!l&&a>l,s&&(e.velocity.x=e.velocity.y/2-e.velocity.x),l&&(e.velocity.y=e.velocity.x/2-e.velocity.y);else if((!s||r<s)&&(!l||a<l)&&e.misplaced)e.misplaced=!1;else if(e.misplaced){const n=e.position,i=e.velocity;s&&(n.x<t.x&&i.x<0||n.x>t.x&&i.x>0)&&(i.x*=-Math.random()),l&&(n.y<t.y&&i.y<0||n.y>t.y&&i.y>0)&&(i.y*=-Math.random())}},t.spin=function(e,t){const n=e.container;if(!e.spin)return;const i={x:"clockwise"===e.spin.direction?Math.cos:Math.sin,y:"clockwise"===e.spin.direction?Math.sin:Math.cos};e.position.x=e.spin.center.x+e.spin.radius*i.x(e.spin.angle),e.position.y=e.spin.center.y+e.spin.radius*i.y(e.spin.angle),e.spin.radius+=e.spin.acceleration;const o=Math.max(n.canvas.size.width,n.canvas.size.height);e.spin.radius>o/2?(e.spin.radius=o/2,e.spin.acceleration*=-1):e.spin.radius<0&&(e.spin.radius=0,e.spin.acceleration*=-1),e.spin.angle+=t/100*(1-e.spin.radius/o)},t.applyPath=function(e,t){const n=e.options.move.path;if(!n.enable)return;const o=e.container;if(e.lastPathTime<=e.pathDelay)return void(e.lastPathTime+=t.value);const r=o.pathGenerator.generate(e);e.velocity.addTo(r),n.clamp&&(e.velocity.x=(0,i.clamp)(e.velocity.x,-1,1),e.velocity.y=(0,i.clamp)(e.velocity.y,-1,1)),e.lastPathTime-=e.pathDelay},t.getProximitySpeedFactor=function(e){const t=e.container,n=t.actualOptions;if(!(0,o.isInArray)("slow",n.interactivity.events.onHover.mode))return 1;const r=e.container.interactivity.mouse.position;if(!r)return 1;const a=e.getPosition(),s=(0,i.getDistance)(r,a),l=t.retina.slowModeRadius;return s>l?1:(s/l||0)/n.interactivity.modes.slow.factor}},971:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadBaseMover=void 0;const i=n(2111);t.loadBaseMover=async function(e){e.addMover("base",(()=>new i.BaseMover))}},1309:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParallaxMover=void 0;const i=n(4351);t.ParallaxMover=class{init(){}isEnabled(e){return!(0,i.isSsr)()&&!e.destroyed&&e.container.actualOptions.interactivity.events.onHover.parallax.enable}move(e){const t=e.container,n=t.actualOptions;if((0,i.isSsr)()||!n.interactivity.events.onHover.parallax.enable)return;const o=n.interactivity.events.onHover.parallax.force,r=t.interactivity.mouse.position;if(!r)return;const a=t.canvas.size.width/2,s=t.canvas.size.height/2,l=n.interactivity.events.onHover.parallax.smooth,c=e.getRadius()/o,u=(r.x-a)*c,d=(r.y-s)*c;e.offset.x+=(u-e.offset.x)/l,e.offset.y+=(d-e.offset.y)/l}}},8851:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadParallaxMover=void 0;const i=n(1309);t.loadParallaxMover=async function(e){e.addMover("parallax",(()=>new i.ParallaxMover))}},8258:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AnimatableColor=void 0;const i=n(8871),o=n(343);class r extends o.OptionsColor{constructor(){super(),this.animation=new i.HslAnimation}static create(e,t){const n=new r;return n.load(e),void 0!==t&&("string"==typeof t||t instanceof Array?n.load({value:t}):n.load(t)),n}load(e){if(super.load(e),!e)return;const t=e.animation;void 0!==t&&(void 0!==t.enable?this.animation.h.load(t):this.animation.load(e.animation))}}t.AnimatableColor=r},362:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GradientColorOpacityAnimation=t.GradientAngleAnimation=t.AnimatableGradientColor=t.GradientColorOpacity=t.GradientAngle=t.AnimatableGradient=void 0;const i=n(8258),o=n(7266);t.AnimatableGradient=class{constructor(){this.angle=new r,this.colors=[],this.type="random"}load(e){e&&(this.angle.load(e.angle),void 0!==e.colors&&(this.colors=e.colors.map((e=>{const t=new s;return t.load(e),t}))),void 0!==e.type&&(this.type=e.type))}};class r{constructor(){this.value=0,this.animation=new l,this.direction="clockwise"}load(e){e&&(this.animation.load(e.animation),void 0!==e.value&&(this.value=e.value),void 0!==e.direction&&(this.direction=e.direction))}}t.GradientAngle=r;class a{constructor(){this.value=0,this.animation=new c}load(e){e&&(this.animation.load(e.animation),void 0!==e.value&&(this.value=(0,o.setRangeValue)(e.value)))}}t.GradientColorOpacity=a;class s{constructor(){this.stop=0,this.value=new i.AnimatableColor}load(e){e&&(void 0!==e.stop&&(this.stop=e.stop),this.value=i.AnimatableColor.create(this.value,e.value),void 0!==e.opacity&&(this.opacity=new a,"number"==typeof e.opacity?this.opacity.value=e.opacity:this.opacity.load(e.opacity)))}}t.AnimatableGradientColor=s;class l{constructor(){this.count=0,this.enable=!1,this.speed=0,this.sync=!1}load(e){e&&(void 0!==e.count&&(this.count=(0,o.setRangeValue)(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=(0,o.setRangeValue)(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}t.GradientAngleAnimation=l;class c{constructor(){this.count=0,this.enable=!1,this.speed=0,this.sync=!1,this.startValue="random"}load(e){e&&(void 0!==e.count&&(this.count=(0,o.setRangeValue)(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=(0,o.setRangeValue)(e.speed)),void 0!==e.sync&&(this.sync=e.sync),void 0!==e.startValue&&(this.startValue=e.startValue))}}t.GradientColorOpacityAnimation=c},9419:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AnimationOptions=void 0;const i=n(7266);t.AnimationOptions=class{constructor(){this.count=0,this.enable=!1,this.speed=1,this.sync=!1}load(e){e&&(void 0!==e.count&&(this.count=(0,i.setRangeValue)(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=(0,i.setRangeValue)(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}},4826:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BackgroundMask=void 0;const i=n(5294);t.BackgroundMask=class{constructor(){this.composite="destination-out",this.cover=new i.BackgroundMaskCover,this.enable=!1}load(e){if(void 0!==e){if(void 0!==e.composite&&(this.composite=e.composite),void 0!==e.cover){const t=e.cover,n="string"==typeof e.cover?{color:e.cover}:e.cover;this.cover.load(void 0!==t.color?t:{color:n})}void 0!==e.enable&&(this.enable=e.enable)}}}},5294:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BackgroundMaskCover=void 0;const i=n(343);t.BackgroundMaskCover=class{constructor(){this.color=new i.OptionsColor,this.opacity=1}load(e){void 0!==e&&(void 0!==e.color&&(this.color=i.OptionsColor.create(this.color,e.color)),void 0!==e.opacity&&(this.opacity=e.opacity))}}},6669:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Background=void 0;const i=n(343);t.Background=class{constructor(){this.color=new i.OptionsColor,this.color.value="",this.image="",this.position="",this.repeat="",this.size="",this.opacity=1}load(e){void 0!==e&&(void 0!==e.color&&(this.color=i.OptionsColor.create(this.color,e.color)),void 0!==e.image&&(this.image=e.image),void 0!==e.position&&(this.position=e.position),void 0!==e.repeat&&(this.repeat=e.repeat),void 0!==e.size&&(this.size=e.size),void 0!==e.opacity&&(this.opacity=e.opacity))}}},9193:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorAnimation=void 0;const i=n(7266);t.ColorAnimation=class{constructor(){this.count=0,this.enable=!1,this.offset=0,this.speed=1,this.sync=!0}load(e){void 0!==e&&(void 0!==e.count&&(this.count=(0,i.setRangeValue)(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.offset&&(this.offset=(0,i.setRangeValue)(e.offset)),void 0!==e.speed&&(this.speed=(0,i.setRangeValue)(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}},9211:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FullScreen=void 0,t.FullScreen=class{constructor(){this.enable=!0,this.zIndex=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.zIndex&&(this.zIndex=e.zIndex))}}},8871:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HslAnimation=void 0;const i=n(9193);t.HslAnimation=class{constructor(){this.h=new i.ColorAnimation,this.s=new i.ColorAnimation,this.l=new i.ColorAnimation}load(e){e&&(this.h.load(e.h),this.s.load(e.s),this.l.load(e.l))}}},3714:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ClickEvent=void 0,t.ClickEvent=class{constructor(){this.enable=!1,this.mode=[]}load(e){void 0!==e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode))}}},6839:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DivEvent=void 0,t.DivEvent=class{constructor(){this.selectors=[],this.enable=!1,this.mode=[],this.type="circle"}get elementId(){return this.ids}set elementId(e){this.ids=e}get el(){return this.elementId}set el(e){this.elementId=e}get ids(){return this.selectors instanceof Array?this.selectors.map((e=>e.replace("#",""))):this.selectors.replace("#","")}set ids(e){this.selectors=e instanceof Array?e.map((e=>`#${e}`)):`#${e}`}load(e){var t,n;if(void 0===e)return;const i=null!==(n=null!==(t=e.ids)&&void 0!==t?t:e.elementId)&&void 0!==n?n:e.el;void 0!==i&&(this.ids=i),void 0!==e.selectors&&(this.selectors=e.selectors),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.type&&(this.type=e.type)}}},1524:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Events=void 0;const i=n(3714),o=n(6839),r=n(6639);t.Events=class{constructor(){this.onClick=new i.ClickEvent,this.onDiv=new o.DivEvent,this.onHover=new r.HoverEvent,this.resize=!0}get onclick(){return this.onClick}set onclick(e){this.onClick=e}get ondiv(){return this.onDiv}set ondiv(e){this.onDiv=e}get onhover(){return this.onHover}set onhover(e){this.onHover=e}load(e){var t,n,i;if(void 0===e)return;this.onClick.load(null!==(t=e.onClick)&&void 0!==t?t:e.onclick);const r=null!==(n=e.onDiv)&&void 0!==n?n:e.ondiv;void 0!==r&&(r instanceof Array?this.onDiv=r.map((e=>{const t=new o.DivEvent;return t.load(e),t})):(this.onDiv=new o.DivEvent,this.onDiv.load(r))),this.onHover.load(null!==(i=e.onHover)&&void 0!==i?i:e.onhover),void 0!==e.resize&&(this.resize=e.resize)}}},6639:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HoverEvent=void 0;const i=n(9640);t.HoverEvent=class{constructor(){this.enable=!1,this.mode=[],this.parallax=new i.Parallax}load(e){void 0!==e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode),this.parallax.load(e.parallax))}}},9640:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Parallax=void 0,t.Parallax=class{constructor(){this.enable=!1,this.force=2,this.smooth=10}load(e){void 0!==e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.force&&(this.force=e.force),void 0!==e.smooth&&(this.smooth=e.smooth))}}},3712:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Interactivity=void 0;const i=n(1524),o=n(2182);t.Interactivity=class{constructor(){this.detectsOn="window",this.events=new i.Events,this.modes=new o.Modes}get detect_on(){return this.detectsOn}set detect_on(e){this.detectsOn=e}load(e){var t,n,i;if(void 0===e)return;const o=null!==(t=e.detectsOn)&&void 0!==t?t:e.detect_on;void 0!==o&&(this.detectsOn=o),this.events.load(e.events),this.modes.load(e.modes),!0===(null===(i=null===(n=e.modes)||void 0===n?void 0:n.slow)||void 0===i?void 0:i.active)&&(this.events.onHover.mode instanceof Array?this.events.onHover.mode.indexOf("slow")<0&&this.events.onHover.mode.push("slow"):"slow"!==this.events.onHover.mode&&(this.events.onHover.mode=[this.events.onHover.mode,"slow"]))}}},7154:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Attract=void 0,t.Attract=class{constructor(){this.distance=200,this.duration=.4,this.easing="ease-out-quad",this.factor=1,this.maxSpeed=50,this.speed=1}load(e){e&&(void 0!==e.distance&&(this.distance=e.distance),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.easing&&(this.easing=e.easing),void 0!==e.factor&&(this.factor=e.factor),void 0!==e.maxSpeed&&(this.maxSpeed=e.maxSpeed),void 0!==e.speed&&(this.speed=e.speed))}}},3029:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bounce=void 0,t.Bounce=class{constructor(){this.distance=200}load(e){e&&void 0!==e.distance&&(this.distance=e.distance)}}},9409:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bubble=void 0;const i=n(9778),o=n(8999);class r extends i.BubbleBase{load(e){super.load(e),void 0!==e&&void 0!==e.divs&&(e.divs instanceof Array?this.divs=e.divs.map((e=>{const t=new o.BubbleDiv;return t.load(e),t})):((this.divs instanceof Array||!this.divs)&&(this.divs=new o.BubbleDiv),this.divs.load(e.divs)))}}t.Bubble=r},9778:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BubbleBase=void 0;const i=n(343);t.BubbleBase=class{constructor(){this.distance=200,this.duration=.4,this.mix=!1}load(e){void 0!==e&&(void 0!==e.distance&&(this.distance=e.distance),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.mix&&(this.mix=e.mix),void 0!==e.opacity&&(this.opacity=e.opacity),void 0!==e.color&&(e.color instanceof Array?this.color=e.color.map((e=>i.OptionsColor.create(void 0,e))):(this.color instanceof Array&&(this.color=new i.OptionsColor),this.color=i.OptionsColor.create(this.color,e.color))),void 0!==e.size&&(this.size=e.size))}}},8999:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BubbleDiv=void 0;const i=n(9778);class o extends i.BubbleBase{constructor(){super(),this.selectors=[]}get ids(){return this.selectors instanceof Array?this.selectors.map((e=>e.replace("#",""))):this.selectors.replace("#","")}set ids(e){this.selectors=e instanceof Array?e.map((e=>`#${e}`)):`#${e}`}load(e){super.load(e),void 0!==e&&(void 0!==e.ids&&(this.ids=e.ids),void 0!==e.selectors&&(this.selectors=e.selectors))}}t.BubbleDiv=o},2032:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Connect=void 0;const i=n(6640);t.Connect=class{constructor(){this.distance=80,this.links=new i.ConnectLinks,this.radius=60}get line_linked(){return this.links}set line_linked(e){this.links=e}get lineLinked(){return this.links}set lineLinked(e){this.links=e}load(e){var t,n;void 0!==e&&(void 0!==e.distance&&(this.distance=e.distance),this.links.load(null!==(n=null!==(t=e.links)&&void 0!==t?t:e.lineLinked)&&void 0!==n?n:e.line_linked),void 0!==e.radius&&(this.radius=e.radius))}}},6640:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectLinks=void 0,t.ConnectLinks=class{constructor(){this.opacity=.5}load(e){void 0!==e&&void 0!==e.opacity&&(this.opacity=e.opacity)}}},5956:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Grab=void 0;const i=n(6612);t.Grab=class{constructor(){this.distance=100,this.links=new i.GrabLinks}get line_linked(){return this.links}set line_linked(e){this.links=e}get lineLinked(){return this.links}set lineLinked(e){this.links=e}load(e){var t,n;void 0!==e&&(void 0!==e.distance&&(this.distance=e.distance),this.links.load(null!==(n=null!==(t=e.links)&&void 0!==t?t:e.lineLinked)&&void 0!==n?n:e.line_linked))}}},6612:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GrabLinks=void 0;const i=n(343);t.GrabLinks=class{constructor(){this.blink=!1,this.consent=!1,this.opacity=1}load(e){void 0!==e&&(void 0!==e.blink&&(this.blink=e.blink),void 0!==e.color&&(this.color=i.OptionsColor.create(this.color,e.color)),void 0!==e.consent&&(this.consent=e.consent),void 0!==e.opacity&&(this.opacity=e.opacity))}}},8996:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Light=void 0;const i=n(7663),o=n(976);t.Light=class{constructor(){this.area=new i.LightArea,this.shadow=new o.LightShadow}load(e){void 0!==e&&(this.area.load(e.area),this.shadow.load(e.shadow))}}},7663:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LightArea=void 0;const i=n(5751);t.LightArea=class{constructor(){this.gradient=new i.LightGradient,this.radius=1e3}load(e){void 0!==e&&(this.gradient.load(e.gradient),void 0!==e.radius&&(this.radius=e.radius))}}},5751:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LightGradient=void 0;const i=n(343);t.LightGradient=class{constructor(){this.start=new i.OptionsColor,this.stop=new i.OptionsColor,this.start.value="#ffffff",this.stop.value="#000000"}load(e){void 0!==e&&(this.start=i.OptionsColor.create(this.start,e.start),this.stop=i.OptionsColor.create(this.stop,e.stop))}}},976:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LightShadow=void 0;const i=n(343);t.LightShadow=class{constructor(){this.color=new i.OptionsColor,this.color.value="#000000",this.length=2e3}load(e){void 0!==e&&(this.color=i.OptionsColor.create(this.color,e.color),void 0!==e.length&&(this.length=e.length))}}},2182:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Modes=void 0;const i=n(7154),o=n(3029),r=n(9409),a=n(2032),s=n(5956),l=n(8996),c=n(126),u=n(4925),d=n(7148),h=n(5945),f=n(2369);t.Modes=class{constructor(){this.attract=new i.Attract,this.bounce=new o.Bounce,this.bubble=new r.Bubble,this.connect=new a.Connect,this.grab=new s.Grab,this.light=new l.Light,this.push=new c.Push,this.remove=new u.Remove,this.repulse=new d.Repulse,this.slow=new h.Slow,this.trail=new f.Trail}load(e){void 0!==e&&(this.attract.load(e.attract),this.bubble.load(e.bubble),this.connect.load(e.connect),this.grab.load(e.grab),this.light.load(e.light),this.push.load(e.push),this.remove.load(e.remove),this.repulse.load(e.repulse),this.slow.load(e.slow),this.trail.load(e.trail))}}},126:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Push=void 0,t.Push=class{constructor(){this.default=!0,this.groups=[],this.quantity=4}get particles_nb(){return this.quantity}set particles_nb(e){this.quantity=e}load(e){var t;if(void 0===e)return;void 0!==e.default&&(this.default=e.default),void 0!==e.groups&&(this.groups=e.groups.map((e=>e))),this.groups.length||(this.default=!0);const n=null!==(t=e.quantity)&&void 0!==t?t:e.particles_nb;void 0!==n&&(this.quantity=n)}}},4925:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Remove=void 0,t.Remove=class{constructor(){this.quantity=2}get particles_nb(){return this.quantity}set particles_nb(e){this.quantity=e}load(e){var t;if(void 0===e)return;const n=null!==(t=e.quantity)&&void 0!==t?t:e.particles_nb;void 0!==n&&(this.quantity=n)}}},7148:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Repulse=void 0;const i=n(3874),o=n(3216);class r extends i.RepulseBase{load(e){super.load(e),void 0!==(null==e?void 0:e.divs)&&(e.divs instanceof Array?this.divs=e.divs.map((e=>{const t=new o.RepulseDiv;return t.load(e),t})):((this.divs instanceof Array||!this.divs)&&(this.divs=new o.RepulseDiv),this.divs.load(e.divs)))}}t.Repulse=r},3874:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RepulseBase=void 0,t.RepulseBase=class{constructor(){this.distance=200,this.duration=.4,this.factor=100,this.speed=1,this.maxSpeed=50,this.easing="ease-out-quad"}load(e){e&&(void 0!==e.distance&&(this.distance=e.distance),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.easing&&(this.easing=e.easing),void 0!==e.factor&&(this.factor=e.factor),void 0!==e.speed&&(this.speed=e.speed),void 0!==e.maxSpeed&&(this.maxSpeed=e.maxSpeed))}}},3216:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RepulseDiv=void 0;const i=n(3874);class o extends i.RepulseBase{constructor(){super(),this.selectors=[]}get ids(){return this.selectors instanceof Array?this.selectors.map((e=>e.replace("#",""))):this.selectors.replace("#","")}set ids(e){this.selectors=e instanceof Array?e.map((()=>`#${e}`)):`#${e}`}load(e){super.load(e),void 0!==e&&(void 0!==e.ids&&(this.ids=e.ids),void 0!==e.selectors&&(this.selectors=e.selectors))}}t.RepulseDiv=o},5945:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Slow=void 0,t.Slow=class{constructor(){this.factor=3,this.radius=200}get active(){return!1}set active(e){}load(e){void 0!==e&&(void 0!==e.factor&&(this.factor=e.factor),void 0!==e.radius&&(this.radius=e.radius))}}},2369:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Trail=void 0;const i=n(4351);t.Trail=class{constructor(){this.delay=1,this.pauseOnStop=!1,this.quantity=1}load(e){void 0!==e&&(void 0!==e.delay&&(this.delay=e.delay),void 0!==e.quantity&&(this.quantity=e.quantity),void 0!==e.particles&&(this.particles=(0,i.deepExtend)({},e.particles)),void 0!==e.pauseOnStop&&(this.pauseOnStop=e.pauseOnStop))}}},5297:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ManualParticle=void 0;const i=n(4351);t.ManualParticle=class{load(e){var t,n;e&&(void 0!==e.position&&(this.position={x:null!==(t=e.position.x)&&void 0!==t?t:50,y:null!==(n=e.position.y)&&void 0!==n?n:50}),void 0!==e.options&&(this.options=(0,i.deepExtend)({},e.options)))}}},7638:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Motion=void 0;const i=n(2239);t.Motion=class{constructor(){this.disable=!1,this.reduce=new i.MotionReduce}load(e){e&&(void 0!==e.disable&&(this.disable=e.disable),this.reduce.load(e.reduce))}}},2239:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MotionReduce=void 0,t.MotionReduce=class{constructor(){this.factor=4,this.value=!0}load(e){e&&(void 0!==e.factor&&(this.factor=e.factor),void 0!==e.value&&(this.value=e.value))}}},9285:function(e,t,n){"use strict";var i,o,r,a=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Options=void 0;const l=n(6669),c=n(4826),u=n(9211),d=n(3712),h=n(5297),f=n(7638),p=n(6268),v=n(6316),y=n(7781),g=n(4351);t.Options=class{constructor(e){i.add(this),o.set(this,void 0),a(this,o,e,"f"),this.autoPlay=!0,this.background=new l.Background,this.backgroundMask=new c.BackgroundMask,this.fullScreen=new u.FullScreen,this.detectRetina=!0,this.duration=0,this.fpsLimit=120,this.interactivity=new d.Interactivity,this.manualParticles=[],this.motion=new f.Motion,this.particles=new p.ParticlesOptions,this.pauseOnBlur=!0,this.pauseOnOutsideViewport=!0,this.responsive=[],this.style={},this.themes=[],this.zLayers=100}get fps_limit(){return this.fpsLimit}set fps_limit(e){this.fpsLimit=e}get retina_detect(){return this.detectRetina}set retina_detect(e){this.detectRetina=e}get backgroundMode(){return this.fullScreen}set backgroundMode(e){this.fullScreen.load(e)}load(e){var t,n,a,l,c;if(void 0===e)return;if(void 0!==e.preset)if(e.preset instanceof Array)for(const t of e.preset)this.importPreset(t);else this.importPreset(e.preset);void 0!==e.autoPlay&&(this.autoPlay=e.autoPlay);const u=null!==(t=e.detectRetina)&&void 0!==t?t:e.retina_detect;void 0!==u&&(this.detectRetina=u),void 0!==e.duration&&(this.duration=e.duration);const d=null!==(n=e.fpsLimit)&&void 0!==n?n:e.fps_limit;void 0!==d&&(this.fpsLimit=d),void 0!==e.pauseOnBlur&&(this.pauseOnBlur=e.pauseOnBlur),void 0!==e.pauseOnOutsideViewport&&(this.pauseOnOutsideViewport=e.pauseOnOutsideViewport),void 0!==e.zLayers&&(this.zLayers=e.zLayers),this.background.load(e.background);const f=null!==(a=e.fullScreen)&&void 0!==a?a:e.backgroundMode;if("boolean"==typeof f?this.fullScreen.enable=f:this.fullScreen.load(f),this.backgroundMask.load(e.backgroundMask),this.interactivity.load(e.interactivity),void 0!==e.manualParticles&&(this.manualParticles=e.manualParticles.map((e=>{const t=new h.ManualParticle;return t.load(e),t}))),this.motion.load(e.motion),this.particles.load(e.particles),this.style=(0,g.deepExtend)(this.style,e.style),s(this,o,"f").plugins.loadOptions(this,e),void 0!==e.responsive)for(const t of e.responsive){const e=new v.Responsive;e.load(t),this.responsive.push(e)}if(this.responsive.sort(((e,t)=>e.maxWidth-t.maxWidth)),void 0!==e.themes)for(const t of e.themes){const e=new y.Theme;e.load(t),this.themes.push(e)}this.defaultDarkTheme=null===(l=s(this,i,"m",r).call(this,"dark"))||void 0===l?void 0:l.name,this.defaultLightTheme=null===(c=s(this,i,"m",r).call(this,"light"))||void 0===c?void 0:c.name}setTheme(e){if(e){const t=this.themes.find((t=>t.name===e));t&&this.load(t.options)}else{const e="undefined"!=typeof matchMedia&&matchMedia("(prefers-color-scheme: dark)"),t=e&&e.matches,n=s(this,i,"m",r).call(this,t?"dark":"light");n&&this.load(n.options)}}setResponsive(e,t,n){this.load(n);const i=this.responsive.find((n=>"screen"===n.mode&&screen?n.maxWidth*t>screen.availWidth:n.maxWidth*t>e));return this.load(null==i?void 0:i.options),null==i?void 0:i.maxWidth}importPreset(e){this.load(s(this,o,"f").plugins.getPreset(e))}},o=new WeakMap,i=new WeakSet,r=function(e){var t;return null!==(t=this.themes.find((t=>t.default.value&&t.default.mode===e)))&&void 0!==t?t:this.themes.find((e=>e.default.value&&"any"===e.default.mode))}},343:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OptionsColor=void 0;class n{constructor(){this.value="#fff"}static create(e,t){const i=new n;return i.load(e),void 0!==t&&("string"==typeof t||t instanceof Array?i.load({value:t}):i.load(t)),i}load(e){void 0!==(null==e?void 0:e.value)&&(this.value=e.value)}}t.OptionsColor=n},6985:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bounce=void 0;const i=n(8550);t.Bounce=class{constructor(){this.horizontal=new i.BounceFactor,this.vertical=new i.BounceFactor}load(e){e&&(this.horizontal.load(e.horizontal),this.vertical.load(e.vertical))}}},8550:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BounceFactor=void 0;const i=n(6360);class o extends i.ValueWithRandom{constructor(){super(),this.random.minimumValue=.1,this.value=1}}t.BounceFactor=o},6830:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Collisions=void 0;const i=n(6985),o=n(9376);t.Collisions=class{constructor(){this.bounce=new i.Bounce,this.enable=!1,this.mode="bounce",this.overlap=new o.CollisionsOverlap}load(e){void 0!==e&&(this.bounce.load(e.bounce),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode),this.overlap.load(e.overlap))}}},9376:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CollisionsOverlap=void 0,t.CollisionsOverlap=class{constructor(){this.enable=!0,this.retries=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.retries&&(this.retries=e.retries))}}},5482:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Destroy=void 0;const i=n(2366);t.Destroy=class{constructor(){this.mode="none",this.split=new i.Split}load(e){e&&(void 0!==e.mode&&(this.mode=e.mode),this.split.load(e.split))}}},2366:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Split=void 0;const i=n(4250),o=n(1471),r=n(4351);t.Split=class{constructor(){this.count=1,this.factor=new i.SplitFactor,this.rate=new o.SplitRate,this.sizeOffset=!0}load(e){e&&(void 0!==e.count&&(this.count=e.count),this.factor.load(e.factor),this.rate.load(e.rate),void 0!==e.particles&&(this.particles=(0,r.deepExtend)({},e.particles)),void 0!==e.sizeOffset&&(this.sizeOffset=e.sizeOffset))}}},4250:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SplitFactor=void 0;const i=n(6360);class o extends i.ValueWithRandom{constructor(){super(),this.value=3}}t.SplitFactor=o},1471:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SplitRate=void 0;const i=n(6360);class o extends i.ValueWithRandom{constructor(){super(),this.value={min:4,max:9}}}t.SplitRate=o},7543:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Life=void 0;const i=n(6144),o=n(5710);t.Life=class{constructor(){this.count=0,this.delay=new i.LifeDelay,this.duration=new o.LifeDuration}load(e){void 0!==e&&(void 0!==e.count&&(this.count=e.count),this.delay.load(e.delay),this.duration.load(e.duration))}}},6144:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LifeDelay=void 0;const i=n(6360);class o extends i.ValueWithRandom{constructor(){super(),this.sync=!1}load(e){e&&(super.load(e),void 0!==e.sync&&(this.sync=e.sync))}}t.LifeDelay=o},5710:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LifeDuration=void 0;const i=n(6360);class o extends i.ValueWithRandom{constructor(){super(),this.random.minimumValue=1e-4,this.sync=!1}load(e){void 0!==e&&(super.load(e),void 0!==e.sync&&(this.sync=e.sync))}}t.LifeDuration=o},8518:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Links=void 0;const i=n(3613),o=n(6425),r=n(343);t.Links=class{constructor(){this.blink=!1,this.color=new r.OptionsColor,this.consent=!1,this.distance=100,this.enable=!1,this.frequency=1,this.opacity=1,this.shadow=new i.LinksShadow,this.triangles=new o.LinksTriangle,this.width=1,this.warp=!1}load(e){void 0!==e&&(void 0!==e.id&&(this.id=e.id),void 0!==e.blink&&(this.blink=e.blink),this.color=r.OptionsColor.create(this.color,e.color),void 0!==e.consent&&(this.consent=e.consent),void 0!==e.distance&&(this.distance=e.distance),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=e.opacity),this.shadow.load(e.shadow),this.triangles.load(e.triangles),void 0!==e.width&&(this.width=e.width),void 0!==e.warp&&(this.warp=e.warp))}}},3613:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LinksShadow=void 0;const i=n(343);t.LinksShadow=class{constructor(){this.blur=5,this.color=new i.OptionsColor,this.enable=!1,this.color.value="#00ff00"}load(e){void 0!==e&&(void 0!==e.blur&&(this.blur=e.blur),this.color=i.OptionsColor.create(this.color,e.color),void 0!==e.enable&&(this.enable=e.enable))}}},6425:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LinksTriangle=void 0;const i=n(343);t.LinksTriangle=class{constructor(){this.enable=!1,this.frequency=1}load(e){void 0!==e&&(void 0!==e.color&&(this.color=i.OptionsColor.create(this.color,e.color)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=e.opacity))}}},844:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Attract=void 0;const i=n(7266);t.Attract=class{constructor(){this.distance=200,this.enable=!1,this.rotate={x:3e3,y:3e3}}get rotateX(){return this.rotate.x}set rotateX(e){this.rotate.x=e}get rotateY(){return this.rotate.y}set rotateY(e){this.rotate.y=e}load(e){var t,n,o,r;if(!e)return;void 0!==e.distance&&(this.distance=(0,i.setRangeValue)(e.distance)),void 0!==e.enable&&(this.enable=e.enable);const a=null!==(n=null===(t=e.rotate)||void 0===t?void 0:t.x)&&void 0!==n?n:e.rotateX;void 0!==a&&(this.rotate.x=a);const s=null!==(r=null===(o=e.rotate)||void 0===o?void 0:o.y)&&void 0!==r?r:e.rotateY;void 0!==s&&(this.rotate.y=s)}}},7596:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Move=void 0;const i=n(844),o=n(9249),r=n(8522),a=n(8396),s=n(2349),l=n(8515),c=n(5308),u=n(4351),d=n(7266);t.Move=class{constructor(){this.angle=new o.MoveAngle,this.attract=new i.Attract,this.decay=0,this.distance={},this.direction="none",this.drift=0,this.enable=!1,this.gravity=new r.MoveGravity,this.path=new s.Path,this.outModes=new a.OutModes,this.random=!1,this.size=!1,this.speed=2,this.spin=new l.Spin,this.straight=!1,this.trail=new c.Trail,this.vibrate=!1,this.warp=!1}get collisions(){return!1}set collisions(e){}get bounce(){return this.collisions}set bounce(e){this.collisions=e}get out_mode(){return this.outMode}set out_mode(e){this.outMode=e}get outMode(){return this.outModes.default}set outMode(e){this.outModes.default=e}get noise(){return this.path}set noise(e){this.path=e}load(e){var t,n,i;if(void 0===e)return;void 0!==e.angle&&("number"==typeof e.angle?this.angle.value=e.angle:this.angle.load(e.angle)),this.attract.load(e.attract),void 0!==e.decay&&(this.decay=e.decay),void 0!==e.direction&&(this.direction=e.direction),void 0!==e.distance&&(this.distance="number"==typeof e.distance?{horizontal:e.distance,vertical:e.distance}:(0,u.deepExtend)({},e.distance)),void 0!==e.drift&&(this.drift=(0,d.setRangeValue)(e.drift)),void 0!==e.enable&&(this.enable=e.enable),this.gravity.load(e.gravity);const o=null!==(t=e.outMode)&&void 0!==t?t:e.out_mode;void 0===e.outModes&&void 0===o||("string"==typeof e.outModes||void 0===e.outModes&&void 0!==o?this.outModes.load({default:null!==(n=e.outModes)&&void 0!==n?n:o}):this.outModes.load(e.outModes)),this.path.load(null!==(i=e.path)&&void 0!==i?i:e.noise),void 0!==e.random&&(this.random=e.random),void 0!==e.size&&(this.size=e.size),void 0!==e.speed&&(this.speed=(0,d.setRangeValue)(e.speed)),this.spin.load(e.spin),void 0!==e.straight&&(this.straight=e.straight),this.trail.load(e.trail),void 0!==e.vibrate&&(this.vibrate=e.vibrate),void 0!==e.warp&&(this.warp=e.warp)}}},9249:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MoveAngle=void 0;const i=n(7266);t.MoveAngle=class{constructor(){this.offset=0,this.value=90}load(e){void 0!==e&&(void 0!==e.offset&&(this.offset=(0,i.setRangeValue)(e.offset)),void 0!==e.value&&(this.value=(0,i.setRangeValue)(e.value)))}}},8522:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MoveGravity=void 0;const i=n(7266);t.MoveGravity=class{constructor(){this.acceleration=9.81,this.enable=!1,this.inverse=!1,this.maxSpeed=50}load(e){e&&(void 0!==e.acceleration&&(this.acceleration=(0,i.setRangeValue)(e.acceleration)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.inverse&&(this.inverse=e.inverse),void 0!==e.maxSpeed&&(this.maxSpeed=(0,i.setRangeValue)(e.maxSpeed)))}}},8396:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OutModes=void 0,t.OutModes=class{constructor(){this.default="out"}load(e){var t,n,i,o;e&&(void 0!==e.default&&(this.default=e.default),this.bottom=null!==(t=e.bottom)&&void 0!==t?t:e.default,this.left=null!==(n=e.left)&&void 0!==n?n:e.default,this.right=null!==(i=e.right)&&void 0!==i?i:e.default,this.top=null!==(o=e.top)&&void 0!==o?o:e.default)}}},2349:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Path=void 0;const i=n(9155),o=n(4351);t.Path=class{constructor(){this.clamp=!0,this.delay=new i.PathDelay,this.enable=!1,this.options={}}load(e){void 0!==e&&(void 0!==e.clamp&&(this.clamp=e.clamp),this.delay.load(e.delay),void 0!==e.enable&&(this.enable=e.enable),this.generator=e.generator,e.options&&(this.options=(0,o.deepExtend)(this.options,e.options)))}}},9155:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PathDelay=void 0;const i=n(6360);class o extends i.ValueWithRandom{constructor(){super()}}t.PathDelay=o},8515:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Spin=void 0;const i=n(4351),o=n(7266);t.Spin=class{constructor(){this.acceleration=0,this.enable=!1}load(e){e&&(void 0!==e.acceleration&&(this.acceleration=(0,o.setRangeValue)(e.acceleration)),void 0!==e.enable&&(this.enable=e.enable),this.position=e.position?(0,i.deepExtend)({},e.position):void 0)}}},5308:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Trail=void 0;const i=n(343);t.Trail=class{constructor(){this.enable=!1,this.length=10,this.fillColor=new i.OptionsColor,this.fillColor.value="#000000"}load(e){void 0!==e&&(void 0!==e.enable&&(this.enable=e.enable),this.fillColor=i.OptionsColor.create(this.fillColor,e.fillColor),void 0!==e.length&&(this.length=e.length))}}},7930:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Density=void 0,t.Density=class{constructor(){this.enable=!1,this.area=800,this.factor=1e3}get value_area(){return this.area}set value_area(e){this.area=e}load(e){var t;if(void 0===e)return;void 0!==e.enable&&(this.enable=e.enable);const n=null!==(t=e.area)&&void 0!==t?t:e.value_area;void 0!==n&&(this.area=n),void 0!==e.factor&&(this.factor=e.factor)}}},2416:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParticlesNumber=void 0;const i=n(7930);t.ParticlesNumber=class{constructor(){this.density=new i.Density,this.limit=0,this.value=100}get max(){return this.limit}set max(e){this.limit=e}load(e){var t;if(void 0===e)return;this.density.load(e.density);const n=null!==(t=e.limit)&&void 0!==t?t:e.max;void 0!==n&&(this.limit=n),void 0!==e.value&&(this.value=e.value)}}},7449:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Opacity=void 0;const i=n(356),o=n(6360),r=n(7266);class a extends o.ValueWithRandom{constructor(){super(),this.animation=new i.OpacityAnimation,this.random.minimumValue=.1,this.value=1}get anim(){return this.animation}set anim(e){this.animation=e}load(e){var t;if(!e)return;super.load(e);const n=null!==(t=e.animation)&&void 0!==t?t:e.anim;void 0!==n&&(this.animation.load(n),this.value=(0,r.setRangeValue)(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}t.Opacity=a},356:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OpacityAnimation=void 0;const i=n(9419);class o extends i.AnimationOptions{constructor(){super(),this.destroy="none",this.enable=!1,this.speed=2,this.startValue="random",this.sync=!1}get opacity_min(){return this.minimumValue}set opacity_min(e){this.minimumValue=e}load(e){var t;void 0!==e&&(super.load(e),void 0!==e.destroy&&(this.destroy=e.destroy),void 0!==e.enable&&(this.enable=e.enable),this.minimumValue=null!==(t=e.minimumValue)&&void 0!==t?t:e.opacity_min,void 0!==e.speed&&(this.speed=e.speed),void 0!==e.startValue&&(this.startValue=e.startValue),void 0!==e.sync&&(this.sync=e.sync))}}t.OpacityAnimation=o},4797:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Orbit=void 0;const i=n(9419),o=n(343),r=n(1700),a=n(7266);t.Orbit=class{constructor(){this.animation=new i.AnimationOptions,this.enable=!1,this.opacity=1,this.rotation=new r.OrbitRotation,this.width=1}load(e){void 0!==e&&(this.animation.load(e.animation),this.rotation.load(e.rotation),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.opacity&&(this.opacity=(0,a.setRangeValue)(e.opacity)),void 0!==e.width&&(this.width=(0,a.setRangeValue)(e.width)),void 0!==e.radius&&(this.radius=(0,a.setRangeValue)(e.radius)),void 0!==e.color&&(this.color=o.OptionsColor.create(this.color,e.color)))}}},1700:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OrbitRotation=void 0;const i=n(6360);class o extends i.ValueWithRandom{constructor(){super(),this.value=45,this.random.enable=!1,this.random.minimumValue=0}load(e){void 0!==e&&super.load(e)}}t.OrbitRotation=o},6268:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParticlesOptions=void 0;const i=n(8258),o=n(362),r=n(6985),a=n(6830),s=n(5482),l=n(7543),c=n(8518),u=n(7596),d=n(7449),h=n(4797),f=n(2416),p=n(2144),v=n(4135),y=n(1624),g=n(8244),m=n(3403),b=n(9099),w=n(6684),S=n(6088),_=n(4952),P=n(8634),x=n(2773),O=n(4351);t.ParticlesOptions=class{constructor(){this.bounce=new r.Bounce,this.collisions=new a.Collisions,this.color=new i.AnimatableColor,this.destroy=new s.Destroy,this.gradient=[],this.groups={},this.life=new l.Life,this.links=new c.Links,this.move=new u.Move,this.number=new f.ParticlesNumber,this.opacity=new d.Opacity,this.orbit=new h.Orbit,this.reduceDuplicates=!1,this.repulse=new p.Repulse,this.roll=new v.Roll,this.rotate=new y.Rotate,this.shadow=new g.Shadow,this.shape=new m.Shape,this.size=new b.Size,this.stroke=new w.Stroke,this.tilt=new S.Tilt,this.twinkle=new _.Twinkle,this.wobble=new P.Wobble,this.zIndex=new x.ZIndex}get line_linked(){return this.links}set line_linked(e){this.links=e}get lineLinked(){return this.links}set lineLinked(e){this.links=e}load(e){var t,n,r,a,s,l,c,u;if(void 0===e)return;this.bounce.load(e.bounce),this.color.load(i.AnimatableColor.create(this.color,e.color)),this.destroy.load(e.destroy),this.life.load(e.life);const d=null!==(n=null!==(t=e.links)&&void 0!==t?t:e.lineLinked)&&void 0!==n?n:e.line_linked;if(void 0!==d&&this.links.load(d),void 0!==e.groups)for(const t in e.groups){const n=e.groups[t];void 0!==n&&(this.groups[t]=(0,O.deepExtend)(null!==(r=this.groups[t])&&void 0!==r?r:{},n))}this.move.load(e.move),this.number.load(e.number),this.opacity.load(e.opacity),this.orbit.load(e.orbit),void 0!==e.reduceDuplicates&&(this.reduceDuplicates=e.reduceDuplicates),this.repulse.load(e.repulse),this.roll.load(e.roll),this.rotate.load(e.rotate),this.shape.load(e.shape),this.size.load(e.size),this.shadow.load(e.shadow),this.tilt.load(e.tilt),this.twinkle.load(e.twinkle),this.wobble.load(e.wobble),this.zIndex.load(e.zIndex);const h=null!==(s=null===(a=e.move)||void 0===a?void 0:a.collisions)&&void 0!==s?s:null===(l=e.move)||void 0===l?void 0:l.bounce;void 0!==h&&(this.collisions.enable=h),this.collisions.load(e.collisions);const f=null!==(c=e.stroke)&&void 0!==c?c:null===(u=e.shape)||void 0===u?void 0:u.stroke;f&&(f instanceof Array?this.stroke=f.map((e=>{const t=new w.Stroke;return t.load(e),t})):(this.stroke instanceof Array&&(this.stroke=new w.Stroke),this.stroke.load(f)));const p=e.gradient;p&&(p instanceof Array?this.gradient=p.map((e=>{const t=new o.AnimatableGradient;return t.load(e),t})):(this.gradient instanceof Array&&(this.gradient=new o.AnimatableGradient),this.gradient.load(p)))}}},2144:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Repulse=void 0;const i=n(6360),o=n(7266);class r extends i.ValueWithRandom{constructor(){super(),this.enabled=!1,this.distance=1,this.duration=1,this.factor=1,this.speed=1}load(e){super.load(e),e&&(void 0!==e.enabled&&(this.enabled=e.enabled),void 0!==e.distance&&(this.distance=(0,o.setRangeValue)(e.distance)),void 0!==e.duration&&(this.duration=(0,o.setRangeValue)(e.duration)),void 0!==e.factor&&(this.factor=(0,o.setRangeValue)(e.factor)),void 0!==e.speed&&(this.speed=(0,o.setRangeValue)(e.speed)))}}t.Repulse=r},4135:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Roll=void 0;const i=n(343),o=n(8347),r=n(7266);t.Roll=class{constructor(){this.darken=new o.RollLight,this.enable=!1,this.enlighten=new o.RollLight,this.mode="vertical",this.speed=25}load(e){e&&(void 0!==e.backColor&&(this.backColor=i.OptionsColor.create(this.backColor,e.backColor)),this.darken.load(e.darken),void 0!==e.enable&&(this.enable=e.enable),this.enlighten.load(e.enlighten),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.speed&&(this.speed=(0,r.setRangeValue)(e.speed)))}}},8347:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RollLight=void 0;const i=n(7266);t.RollLight=class{constructor(){this.enable=!1,this.value=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.value&&(this.value=(0,i.setRangeValue)(e.value)))}}},1624:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Rotate=void 0;const i=n(1204),o=n(6360);class r extends o.ValueWithRandom{constructor(){super(),this.animation=new i.RotateAnimation,this.direction="clockwise",this.path=!1,this.value=0}load(e){e&&(super.load(e),void 0!==e.direction&&(this.direction=e.direction),this.animation.load(e.animation),void 0!==e.path&&(this.path=e.path))}}t.Rotate=r},1204:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RotateAnimation=void 0;const i=n(7266);t.RotateAnimation=class{constructor(){this.enable=!1,this.speed=0,this.sync=!1}load(e){void 0!==e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=(0,i.setRangeValue)(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}},8244:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shadow=void 0;const i=n(343);t.Shadow=class{constructor(){this.blur=0,this.color=new i.OptionsColor,this.enable=!1,this.offset={x:0,y:0},this.color.value="#000000"}load(e){void 0!==e&&(void 0!==e.blur&&(this.blur=e.blur),this.color=i.OptionsColor.create(this.color,e.color),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.offset&&(void 0!==e.offset.x&&(this.offset.x=e.offset.x),void 0!==e.offset.y&&(this.offset.y=e.offset.y)))}}},3403:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shape=void 0;const i=n(4351);t.Shape=class{constructor(){this.options={},this.type="circle"}get image(){var e;return null!==(e=this.options.image)&&void 0!==e?e:this.options.images}set image(e){this.options.image=e,this.options.images=e}get custom(){return this.options}set custom(e){this.options=e}get images(){return this.image}set images(e){this.image=e}get stroke(){return[]}set stroke(e){}get character(){var e;return null!==(e=this.options.character)&&void 0!==e?e:this.options.char}set character(e){this.options.character=e,this.options.char=e}get polygon(){var e;return null!==(e=this.options.polygon)&&void 0!==e?e:this.options.star}set polygon(e){this.options.polygon=e,this.options.star=e}load(e){var t,n,o;if(void 0===e)return;const r=null!==(t=e.options)&&void 0!==t?t:e.custom;if(void 0!==r)for(const e in r){const t=r[e];void 0!==t&&(this.options[e]=(0,i.deepExtend)(null!==(n=this.options[e])&&void 0!==n?n:{},t))}this.loadShape(e.character,"character","char",!0),this.loadShape(e.polygon,"polygon","star",!1),this.loadShape(null!==(o=e.image)&&void 0!==o?o:e.images,"image","images",!0),void 0!==e.type&&(this.type=e.type)}loadShape(e,t,n,o){var r,a,s,l;void 0!==e&&(e instanceof Array?(this.options[t]instanceof Array||(this.options[t]=[],this.options[n]&&!o||(this.options[n]=[])),this.options[t]=(0,i.deepExtend)(null!==(r=this.options[t])&&void 0!==r?r:[],e),this.options[n]&&!o||(this.options[n]=(0,i.deepExtend)(null!==(a=this.options[n])&&void 0!==a?a:[],e))):(this.options[t]instanceof Array&&(this.options[t]={},this.options[n]&&!o||(this.options[n]={})),this.options[t]=(0,i.deepExtend)(null!==(s=this.options[t])&&void 0!==s?s:{},e),this.options[n]&&!o||(this.options[n]=(0,i.deepExtend)(null!==(l=this.options[n])&&void 0!==l?l:{},e))))}}},9099:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Size=void 0;const i=n(7819),o=n(6360),r=n(7266);class a extends o.ValueWithRandom{constructor(){super(),this.animation=new i.SizeAnimation,this.random.minimumValue=1,this.value=3}get anim(){return this.animation}set anim(e){this.animation=e}load(e){var t;if(!e)return;super.load(e);const n=null!==(t=e.animation)&&void 0!==t?t:e.anim;void 0!==n&&(this.animation.load(n),this.value=(0,r.setRangeValue)(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}t.Size=a},7819:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SizeAnimation=void 0;const i=n(9419);class o extends i.AnimationOptions{constructor(){super(),this.destroy="none",this.enable=!1,this.speed=5,this.startValue="random",this.sync=!1}get size_min(){return this.minimumValue}set size_min(e){this.minimumValue=e}load(e){var t;void 0!==e&&(super.load(e),void 0!==e.destroy&&(this.destroy=e.destroy),void 0!==e.enable&&(this.enable=e.enable),this.minimumValue=null!==(t=e.minimumValue)&&void 0!==t?t:e.size_min,void 0!==e.speed&&(this.speed=e.speed),void 0!==e.startValue&&(this.startValue=e.startValue),void 0!==e.sync&&(this.sync=e.sync))}}t.SizeAnimation=o},6684:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Stroke=void 0;const i=n(8258);t.Stroke=class{constructor(){this.width=0}load(e){void 0!==e&&(void 0!==e.color&&(this.color=i.AnimatableColor.create(this.color,e.color)),void 0!==e.width&&(this.width=e.width),void 0!==e.opacity&&(this.opacity=e.opacity))}}},6088:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tilt=void 0;const i=n(9436),o=n(6360);class r extends o.ValueWithRandom{constructor(){super(),this.animation=new i.TiltAnimation,this.direction="clockwise",this.enable=!1,this.value=0}load(e){e&&(super.load(e),this.animation.load(e.animation),void 0!==e.direction&&(this.direction=e.direction),void 0!==e.enable&&(this.enable=e.enable))}}t.Tilt=r},9436:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TiltAnimation=void 0;const i=n(7266);t.TiltAnimation=class{constructor(){this.enable=!1,this.speed=0,this.sync=!1}load(e){void 0!==e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=(0,i.setRangeValue)(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}},4952:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Twinkle=void 0;const i=n(1627);t.Twinkle=class{constructor(){this.lines=new i.TwinkleValues,this.particles=new i.TwinkleValues}load(e){void 0!==e&&(this.lines.load(e.lines),this.particles.load(e.particles))}}},1627:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TwinkleValues=void 0;const i=n(343),o=n(7266);t.TwinkleValues=class{constructor(){this.enable=!1,this.frequency=.05,this.opacity=1}load(e){void 0!==e&&(void 0!==e.color&&(this.color=i.OptionsColor.create(this.color,e.color)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=(0,o.setRangeValue)(e.opacity)))}}},8634:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Wobble=void 0;const i=n(7266);t.Wobble=class{constructor(){this.distance=5,this.enable=!1,this.speed=50}load(e){e&&(void 0!==e.distance&&(this.distance=(0,i.setRangeValue)(e.distance)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=(0,i.setRangeValue)(e.speed)))}}},2773:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ZIndex=void 0;const i=n(6360);class o extends i.ValueWithRandom{constructor(){super(),this.opacityRate=1,this.sizeRate=1,this.velocityRate=1}load(e){super.load(e),e&&(void 0!==e.opacityRate&&(this.opacityRate=e.opacityRate),void 0!==e.sizeRate&&(this.sizeRate=e.sizeRate),void 0!==e.velocityRate&&(this.velocityRate=e.velocityRate))}}t.ZIndex=o},4821:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Random=void 0,t.Random=class{constructor(){this.enable=!1,this.minimumValue=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.minimumValue&&(this.minimumValue=e.minimumValue))}}},6316:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Responsive=void 0;const i=n(4351);t.Responsive=class{constructor(){this.maxWidth=1/0,this.options={},this.mode="canvas"}load(e){e&&(void 0!==e.maxWidth&&(this.maxWidth=e.maxWidth),void 0!==e.mode&&("screen"===e.mode?this.mode="screen":this.mode="canvas"),void 0!==e.options&&(this.options=(0,i.deepExtend)({},e.options)))}}},7781:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Theme=void 0;const i=n(1606),o=n(4351);t.Theme=class{constructor(){this.name="",this.default=new i.ThemeDefault}load(e){void 0!==e&&(void 0!==e.name&&(this.name=e.name),this.default.load(e.default),void 0!==e.options&&(this.options=(0,o.deepExtend)({},e.options)))}}},1606:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeDefault=void 0,t.ThemeDefault=class{constructor(){this.auto=!1,this.mode="any",this.value=!1}load(e){e&&(void 0!==e.auto&&(this.auto=e.auto),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.value&&(this.value=e.value))}}},6360:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValueWithRandom=void 0;const i=n(4821),o=n(7266);t.ValueWithRandom=class{constructor(){this.random=new i.Random,this.value=0}load(e){e&&("boolean"==typeof e.random?this.random.enable=e.random:this.random.load(e.random),void 0!==e.value&&(this.value=(0,o.setRangeValue)(e.value,this.random.enable?this.random.minimumValue:void 0)))}}},2687:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5228:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbsorberInstance=void 0;const i=n(7266),o=n(7129),r=n(2705),a=n(8061),s=n(4351);t.AbsorberInstance=class{constructor(e,t,n,s){var l,c,u;this.absorbers=e,this.container=t,this.initialPosition=s?a.Vector.create(s.x,s.y):void 0,n instanceof r.Absorber?this.options=n:(this.options=new r.Absorber,this.options.load(n)),this.dragging=!1,this.name=this.options.name,this.opacity=this.options.opacity,this.size=(0,i.getRangeValue)(this.options.size.value)*t.retina.pixelRatio,this.mass=this.size*this.options.size.density*t.retina.reduceFactor;const d=this.options.size.limit;this.limit={radius:d.radius*t.retina.pixelRatio*t.retina.reduceFactor,mass:d.mass},this.color=null!==(l=(0,o.colorToRgb)(this.options.color))&&void 0!==l?l:{b:0,g:0,r:0},this.position=null!==(u=null===(c=this.initialPosition)||void 0===c?void 0:c.copy())&&void 0!==u?u:this.calcPosition()}attract(e){const t=this.container,n=this.options;if(n.draggable){const e=t.interactivity.mouse;e.clicking&&e.downPosition?(0,i.getDistance)(this.position,e.downPosition)<=this.size&&(this.dragging=!0):this.dragging=!1,this.dragging&&e.position&&(this.position.x=e.position.x,this.position.y=e.position.y)}const o=e.getPosition(),{dx:r,dy:s,distance:l}=(0,i.getDistances)(this.position,o),c=a.Vector.create(r,s);if(c.length=this.mass/Math.pow(l,2)*t.retina.reduceFactor,l<this.size+e.getRadius()){const i=.033*e.getRadius()*t.retina.pixelRatio;this.size>e.getRadius()&&l<this.size-e.getRadius()||void 0!==e.absorberOrbit&&e.absorberOrbit.length<0?n.destroy?e.destroy():(e.needsNewPosition=!0,this.updateParticlePosition(e,c)):(n.destroy&&(e.size.value-=i),this.updateParticlePosition(e,c)),(this.limit.radius<=0||this.size<this.limit.radius)&&(this.size+=i),(this.limit.mass<=0||this.mass<this.limit.mass)&&(this.mass+=i*this.options.size.density*t.retina.reduceFactor)}else this.updateParticlePosition(e,c)}resize(){const e=this.initialPosition;this.position=e&&(0,s.isPointInside)(e,this.container.canvas.size)?e:this.calcPosition()}draw(e){e.translate(this.position.x,this.position.y),e.beginPath(),e.arc(0,0,this.size,0,2*Math.PI,!1),e.closePath(),e.fillStyle=(0,o.getStyleFromRgb)(this.color,this.opacity),e.fill()}calcPosition(){const e=(0,i.calcPositionOrRandomFromSizeRanged)({size:this.container.canvas.size,position:this.options.position});return a.Vector.create(e.x,e.y)}updateParticlePosition(e,t){var n;if(e.destroyed)return;const o=this.container,r=o.canvas.size;if(e.needsNewPosition){const t=(0,i.calcPositionOrRandomFromSize)({size:r});e.position.setTo(t),e.velocity.setTo(e.initialVelocity),e.absorberOrbit=void 0,e.needsNewPosition=!1}if(this.options.orbits){if(void 0===e.absorberOrbit&&(e.absorberOrbit=a.Vector.create(0,0),e.absorberOrbit.length=(0,i.getDistance)(e.getPosition(),this.position),e.absorberOrbit.angle=Math.random()*Math.PI*2),e.absorberOrbit.length<=this.size&&!this.options.destroy){const t=Math.min(r.width,r.height);e.absorberOrbit.length=t*(.2*Math.random()-.1+1)}void 0===e.absorberOrbitDirection&&(e.absorberOrbitDirection=e.velocity.x>=0?"clockwise":"counter-clockwise");const s=e.absorberOrbit.length,l=e.absorberOrbit.angle,c=e.absorberOrbitDirection;e.velocity.setTo(a.Vector.origin);const u={x:"clockwise"===c?Math.cos:Math.sin,y:"clockwise"===c?Math.sin:Math.cos};e.position.x=this.position.x+s*u.x(l),e.position.y=this.position.y+s*u.y(l),e.absorberOrbit.length-=t.length,e.absorberOrbit.angle+=(null!==(n=e.retina.moveSpeed)&&void 0!==n?n:0)*o.retina.pixelRatio/100*o.retina.reduceFactor}else{const n=a.Vector.origin;n.length=t.length,n.angle=t.angle,e.velocity.addTo(n)}}}},2188:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Absorbers=void 0;const i=n(2705),o=n(5228),r=n(4351);t.Absorbers=class{constructor(e){this.container=e,this.array=[],this.absorbers=[],this.interactivityAbsorbers=[];const t=e;t.getAbsorber=e=>void 0===e||"number"==typeof e?this.array[e||0]:this.array.find((t=>t.name===e)),t.addAbsorber=(e,t)=>this.addAbsorber(e,t)}init(e){var t,n;if(!e)return;e.absorbers&&(e.absorbers instanceof Array?this.absorbers=e.absorbers.map((e=>{const t=new i.Absorber;return t.load(e),t})):(this.absorbers instanceof Array&&(this.absorbers=new i.Absorber),this.absorbers.load(e.absorbers)));const o=null===(n=null===(t=e.interactivity)||void 0===t?void 0:t.modes)||void 0===n?void 0:n.absorbers;if(o&&(o instanceof Array?this.interactivityAbsorbers=o.map((e=>{const t=new i.Absorber;return t.load(e),t})):(this.interactivityAbsorbers instanceof Array&&(this.interactivityAbsorbers=new i.Absorber),this.interactivityAbsorbers.load(o))),this.absorbers instanceof Array)for(const e of this.absorbers)this.addAbsorber(e);else this.addAbsorber(this.absorbers)}particleUpdate(e){for(const t of this.array)if(t.attract(e),e.destroyed)break}draw(e){for(const t of this.array)e.save(),t.draw(e),e.restore()}stop(){this.array=[]}resize(){for(const e of this.array)e.resize()}handleClickMode(e){const t=this.absorbers,n=this.interactivityAbsorbers;if("absorber"===e){let e;n instanceof Array?n.length>0&&(e=(0,r.itemFromArray)(n)):e=n;const i=null!=e?e:t instanceof Array?(0,r.itemFromArray)(t):t,o=this.container.interactivity.mouse.clickPosition;this.addAbsorber(i,o)}}addAbsorber(e,t){const n=new o.AbsorberInstance(this,this.container,e,t);return this.array.push(n),n}removeAbsorber(e){const t=this.array.indexOf(e);t>=0&&this.array.splice(t,1)}}},3858:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},2705:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Absorber=void 0;const i=n(6176),o=n(343),r=n(7266);t.Absorber=class{constructor(){this.color=new o.OptionsColor,this.color.value="#000000",this.draggable=!1,this.opacity=1,this.destroy=!0,this.orbits=!1,this.size=new i.AbsorberSize}load(e){void 0!==e&&(void 0!==e.color&&(this.color=o.OptionsColor.create(this.color,e.color)),void 0!==e.draggable&&(this.draggable=e.draggable),this.name=e.name,void 0!==e.opacity&&(this.opacity=e.opacity),void 0!==e.position&&(this.position={},void 0!==e.position.x&&(this.position.x=(0,r.setRangeValue)(e.position.x)),void 0!==e.position.y&&(this.position.y=(0,r.setRangeValue)(e.position.y))),void 0!==e.size&&this.size.load(e.size),void 0!==e.destroy&&(this.destroy=e.destroy),void 0!==e.orbits&&(this.orbits=e.orbits))}}},6176:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbsorberSize=void 0;const i=n(9895),o=n(6360);class r extends o.ValueWithRandom{constructor(){super(),this.density=5,this.random.minimumValue=1,this.value=50,this.limit=new i.AbsorberSizeLimit}load(e){e&&(super.load(e),void 0!==e.density&&(this.density=e.density),"number"==typeof e.limit?this.limit.radius=e.limit:this.limit.load(e.limit))}}t.AbsorberSize=r},9895:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbsorberSizeLimit=void 0,t.AbsorberSizeLimit=class{constructor(){this.radius=0,this.mass=0}load(e){e&&(void 0!==e.mass&&(this.mass=e.mass),void 0!==e.radius&&(this.radius=e.radius))}}},206:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1245:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,o)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.loadAbsorbersPlugin=void 0;const r=n(2705),a=n(2188),s=n(4351);class l{constructor(){this.id="absorbers"}getPlugin(e){return new a.Absorbers(e)}needsPlugin(e){var t,n,i;if(void 0===e)return!1;const o=e.absorbers;return o instanceof Array?!!o.length:!!o||!(!(null===(i=null===(n=null===(t=e.interactivity)||void 0===t?void 0:t.events)||void 0===n?void 0:n.onClick)||void 0===i?void 0:i.mode)||!(0,s.isInArray)("absorber",e.interactivity.events.onClick.mode))}loadOptions(e,t){var n,i;if(!this.needsPlugin(e)&&!this.needsPlugin(t))return;const o=e;if(null==t?void 0:t.absorbers)if((null==t?void 0:t.absorbers)instanceof Array)o.absorbers=null==t?void 0:t.absorbers.map((e=>{const t=new r.Absorber;return t.load(e),t}));else{let e=o.absorbers;void 0===(null==e?void 0:e.load)&&(o.absorbers=e=new r.Absorber),e.load(null==t?void 0:t.absorbers)}const a=null===(i=null===(n=null==t?void 0:t.interactivity)||void 0===n?void 0:n.modes)||void 0===i?void 0:i.absorbers;if(a)if(a instanceof Array)o.interactivity.modes.absorbers=a.map((e=>{const t=new r.Absorber;return t.load(e),t}));else{let e=o.interactivity.modes.absorbers;void 0===(null==e?void 0:e.load)&&(o.interactivity.modes.absorbers=e=new r.Absorber),e.load(a)}}}t.loadAbsorbersPlugin=async function(e){const t=new l;await e.addPlugin(t)},o(n(3858),t),o(n(206),t)},5985:function(e,t,n){"use strict";var i,o,r,a=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.EmitterInstance=void 0;const l=n(7266),c=n(4351),u=n(6741),d=n(2169),h=n(7129);t.EmitterInstance=class{constructor(e,t,n,l,f){var p,v,y,g,m,b,w,S;this.emitters=t,this.container=n,i.set(this,void 0),o.set(this,void 0),r.set(this,void 0),a(this,r,e,"f"),this.currentDuration=0,this.currentEmitDelay=0,this.currentSpawnDelay=0,this.initialPosition=f,l instanceof u.Emitter?this.options=l:(this.options=new u.Emitter,this.options.load(l)),this.spawnDelay=1e3*(null!==(p=this.options.life.delay)&&void 0!==p?p:0)/this.container.retina.reduceFactor,this.position=null!==(v=this.initialPosition)&&void 0!==v?v:this.calcPosition(),this.name=this.options.name,this.shape=null===(y=s(this,r,"f").emitterShapeManager)||void 0===y?void 0:y.getShape(this.options.shape),this.fill=this.options.fill,a(this,i,!this.options.life.wait,"f"),a(this,o,!1,"f");let _=(0,c.deepExtend)({},this.options.particles);null!=_||(_={}),null!==(g=_.move)&&void 0!==g||(_.move={}),null!==(m=(S=_.move).direction)&&void 0!==m||(S.direction=this.options.direction),this.options.spawnColor&&(this.spawnColor=(0,h.colorToHsl)(this.options.spawnColor)),this.paused=!this.options.autoPlay,this.particlesOptions=_,this.size=null!==(b=this.options.size)&&void 0!==b?b:(()=>{const e=new d.EmitterSize;return e.load({height:0,mode:"percent",width:0}),e})(),this.lifeCount=null!==(w=this.options.life.count)&&void 0!==w?w:-1,this.immortal=this.lifeCount<=0,this.play()}externalPlay(){this.paused=!1,this.play()}externalPause(){this.paused=!0,this.pause()}play(){var e;if(!this.paused&&this.container.retina.reduceFactor&&(this.lifeCount>0||this.immortal||!this.options.life.count)&&(s(this,i,"f")||this.currentSpawnDelay>=(null!==(e=this.spawnDelay)&&void 0!==e?e:0))){if(void 0===this.emitDelay){const e=(0,l.getRangeValue)(this.options.rate.delay);this.emitDelay=1e3*e/this.container.retina.reduceFactor}(this.lifeCount>0||this.immortal)&&this.prepareToDie()}}pause(){this.paused||delete this.emitDelay}resize(){const e=this.initialPosition;this.position=e&&(0,c.isPointInside)(e,this.container.canvas.size)?e:this.calcPosition()}update(e){var t,n,r;this.paused||(s(this,i,"f")&&(a(this,i,!1,"f"),this.currentSpawnDelay=null!==(t=this.spawnDelay)&&void 0!==t?t:0,this.currentEmitDelay=null!==(n=this.emitDelay)&&void 0!==n?n:0),s(this,o,"f")||(a(this,o,!0,"f"),this.emitParticles(this.options.startCount)),void 0!==this.duration&&(this.currentDuration+=e.value,this.currentDuration>=this.duration&&(this.pause(),void 0!==this.spawnDelay&&delete this.spawnDelay,this.immortal||this.lifeCount--,this.lifeCount>0||this.immortal?(this.position=this.calcPosition(),this.spawnDelay=1e3*(null!==(r=this.options.life.delay)&&void 0!==r?r:0)/this.container.retina.reduceFactor):this.destroy(),this.currentDuration-=this.duration,delete this.duration)),void 0!==this.spawnDelay&&(this.currentSpawnDelay+=e.value,this.currentSpawnDelay>=this.spawnDelay&&(this.play(),this.currentSpawnDelay-=this.currentSpawnDelay,delete this.spawnDelay)),void 0!==this.emitDelay&&(this.currentEmitDelay+=e.value,this.currentEmitDelay>=this.emitDelay&&(this.emit(),this.currentEmitDelay-=this.emitDelay)))}getPosition(){if(this.options.domId){const e=this.container,t=document.getElementById(this.options.domId);if(t){const n=t.getBoundingClientRect();return{x:(n.x+n.width/2)*e.retina.pixelRatio,y:(n.y+n.height/2)*e.retina.pixelRatio}}}return this.position}getSize(){const e=this.container;if(this.options.domId){const t=document.getElementById(this.options.domId);if(t){const n=t.getBoundingClientRect();return{width:n.width*e.retina.pixelRatio,height:n.height*e.retina.pixelRatio}}}return{width:"percent"===this.size.mode?e.canvas.size.width*this.size.width/100:this.size.width,height:"percent"===this.size.mode?e.canvas.size.height*this.size.height/100:this.size.height}}prepareToDie(){var e;if(this.paused)return;const t=null===(e=this.options.life)||void 0===e?void 0:e.duration;this.container.retina.reduceFactor&&(this.lifeCount>0||this.immortal)&&void 0!==t&&t>0&&(this.duration=1e3*t)}destroy(){this.emitters.removeEmitter(this)}calcPosition(){return(0,l.calcPositionOrRandomFromSizeRanged)({size:this.container.canvas.size,position:this.options.position})}emit(){if(this.paused)return;const e=(0,l.getRangeValue)(this.options.rate.quantity);this.emitParticles(e)}emitParticles(e){var t,n,i;const o=this.getPosition(),r=this.getSize();for(let a=0;a<e;a++){const e=(0,c.deepExtend)({},this.particlesOptions);if(this.spawnColor){const n=null===(t=this.options.spawnColor)||void 0===t?void 0:t.animation;n&&(this.spawnColor.h=this.setColorAnimation(n.h,this.spawnColor.h,360),this.spawnColor.s=this.setColorAnimation(n.s,this.spawnColor.s,100),this.spawnColor.l=this.setColorAnimation(n.l,this.spawnColor.l,100)),e.color?e.color.value=this.spawnColor:e.color={value:this.spawnColor}}if(!o)return;const a=null!==(i=null===(n=this.shape)||void 0===n?void 0:n.randomPosition(o,r,this.fill))&&void 0!==i?i:o;this.container.particles.addParticle(a,e)}}setColorAnimation(e,t,n){var i;const o=this.container;if(!e.enable)return t;const r=(0,l.randomInRange)(e.offset),a=1e3*(0,l.getRangeValue)(this.options.rate.delay)/o.retina.reduceFactor;return(t+(0,l.getRangeValue)(null!==(i=e.speed)&&void 0!==i?i:0)*o.fpsLimit/a+3.6*r)%n}},i=new WeakMap,o=new WeakMap,r=new WeakMap},6994:function(e,t,n){"use strict";var i,o=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},r=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Emitters=void 0;const a=n(4351),s=n(6741),l=n(5985);t.Emitters=class{constructor(e,t){this.container=t,i.set(this,void 0),o(this,i,e,"f"),this.array=[],this.emitters=[],this.interactivityEmitters=[];const n=t;n.getEmitter=e=>void 0===e||"number"==typeof e?this.array[e||0]:this.array.find((t=>t.name===e)),n.addEmitter=(e,t)=>this.addEmitter(e,t),n.removeEmitter=e=>{const t=n.getEmitter(e);t&&this.removeEmitter(t)},n.playEmitter=e=>{const t=n.getEmitter(e);t&&t.externalPlay()},n.pauseEmitter=e=>{const t=n.getEmitter(e);t&&t.externalPause()}}init(e){var t,n;if(!e)return;e.emitters&&(e.emitters instanceof Array?this.emitters=e.emitters.map((e=>{const t=new s.Emitter;return t.load(e),t})):(this.emitters instanceof Array&&(this.emitters=new s.Emitter),this.emitters.load(e.emitters)));const i=null===(n=null===(t=e.interactivity)||void 0===t?void 0:t.modes)||void 0===n?void 0:n.emitters;if(i&&(i instanceof Array?this.interactivityEmitters=i.map((e=>{const t=new s.Emitter;return t.load(e),t})):(this.interactivityEmitters instanceof Array&&(this.interactivityEmitters=new s.Emitter),this.interactivityEmitters.load(i))),this.emitters instanceof Array)for(const e of this.emitters)this.addEmitter(e);else this.addEmitter(this.emitters)}play(){for(const e of this.array)e.play()}pause(){for(const e of this.array)e.pause()}stop(){this.array=[]}update(e){for(const t of this.array)t.update(e)}handleClickMode(e){const t=this.emitters,n=this.interactivityEmitters;if("emitter"===e){let e;n instanceof Array?n.length>0&&(e=(0,a.itemFromArray)(n)):e=n;const i=null!=e?e:t instanceof Array?(0,a.itemFromArray)(t):t,o=this.container.interactivity.mouse.clickPosition;this.addEmitter((0,a.deepExtend)({},i),o)}}resize(){for(const e of this.array)e.resize()}addEmitter(e,t){const n=new s.Emitter;n.load(e);const o=new l.EmitterInstance(r(this,i,"f"),this,this.container,n,t);return this.array.push(o),o}removeEmitter(e){const t=this.array.indexOf(e);t>=0&&this.array.splice(t,1)}},i=new WeakMap},222:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5958:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},7104:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6741:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Emitter=void 0;const i=n(8258),o=n(1964),r=n(8189),a=n(2169),s=n(4351),l=n(7266);t.Emitter=class{constructor(){this.autoPlay=!0,this.fill=!0,this.life=new o.EmitterLife,this.rate=new r.EmitterRate,this.shape="square",this.startCount=0}load(e){void 0!==e&&(void 0!==e.autoPlay&&(this.autoPlay=e.autoPlay),void 0!==e.size&&(void 0===this.size&&(this.size=new a.EmitterSize),this.size.load(e.size)),void 0!==e.direction&&(this.direction=e.direction),this.domId=e.domId,void 0!==e.fill&&(this.fill=e.fill),this.life.load(e.life),this.name=e.name,void 0!==e.particles&&(this.particles=(0,s.deepExtend)({},e.particles)),this.rate.load(e.rate),void 0!==e.shape&&(this.shape=e.shape),void 0!==e.position&&(this.position={},void 0!==e.position.x&&(this.position.x=(0,l.setRangeValue)(e.position.x)),void 0!==e.position.y&&(this.position.y=(0,l.setRangeValue)(e.position.y))),void 0!==e.spawnColor&&(void 0===this.spawnColor&&(this.spawnColor=new i.AnimatableColor),this.spawnColor.load(e.spawnColor)),void 0!==e.startCount&&(this.startCount=e.startCount))}}},1964:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EmitterLife=void 0,t.EmitterLife=class{constructor(){this.wait=!1}load(e){void 0!==e&&(void 0!==e.count&&(this.count=e.count),void 0!==e.delay&&(this.delay=e.delay),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.wait&&(this.wait=e.wait))}}},8189:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EmitterRate=void 0;const i=n(7266);t.EmitterRate=class{constructor(){this.quantity=1,this.delay=.1}load(e){void 0!==e&&(void 0!==e.quantity&&(this.quantity=(0,i.setRangeValue)(e.quantity)),void 0!==e.delay&&(this.delay=(0,i.setRangeValue)(e.delay)))}}},2169:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EmitterSize=void 0,t.EmitterSize=class{constructor(){this.mode="percent",this.height=0,this.width=0}load(e){void 0!==e&&(void 0!==e.mode&&(this.mode=e.mode),void 0!==e.height&&(this.height=e.height),void 0!==e.width&&(this.width=e.width))}}},8784:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3872:function(e,t){"use strict";var n,i=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n};Object.defineProperty(t,"__esModule",{value:!0}),t.ShapeManager=void 0;const o=new Map;t.ShapeManager=class{constructor(e){n.set(this,void 0),i(this,n,e,"f")}addShape(e,t){this.getShape(e)||o.set(e,t)}getShape(e){return o.get(e)}getSupportedShapes(){return o.keys()}},n=new WeakMap},9650:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CircleShape=void 0,t.CircleShape=class{randomPosition(e,t,n){const[i,o]=[t.width/2,t.height/2],r=((e,t)=>{const n=Math.random()/4,i=Math.atan(t/e*Math.tan(2*Math.PI*n)),o=Math.random();return o<.25?i:o<.5?Math.PI-i:o<.75?Math.PI+i:-i})(i,o),a=(u=r,(l=i)*(c=o)/Math.sqrt((c*Math.cos(u))**2+(l*Math.sin(u))**2)),s=n?a*Math.sqrt(Math.random()):a;var l,c,u;return{x:e.x+s*Math.cos(r),y:e.y+s*Math.sin(r)}}}},4198:function(e,t){"use strict";function n(e,t){return e+t*(Math.random()-.5)}Object.defineProperty(t,"__esModule",{value:!0}),t.SquareShape=void 0,t.SquareShape=class{randomPosition(e,t,i){if(i)return{x:n(e.x,t.width),y:n(e.y,t.height)};{const n=t.width/2,i=t.height/2,o=Math.floor(4*Math.random()),r=2*(Math.random()-.5);switch(o){case 0:return{x:e.x+r*n,y:e.y-i};case 1:return{x:e.x-n,y:e.y+r*i};case 2:return{x:e.x+r*n,y:e.y+i};default:return{x:e.x+n,y:e.y+r*i}}}}}},9504:function(e,t,n){"use strict";var i,o=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,o)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||o(t,e,n)},a=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.loadEmittersPlugin=void 0;const l=n(9650),c=n(6741),u=n(6994),d=n(3872),h=n(4198),f=n(4351);class p{constructor(e){i.set(this,void 0),a(this,i,e,"f"),this.id="emitters"}getPlugin(e){return new u.Emitters(s(this,i,"f"),e)}needsPlugin(e){var t,n,i;if(void 0===e)return!1;const o=e.emitters;return o instanceof Array&&!!o.length||void 0!==o||!!(null===(i=null===(n=null===(t=e.interactivity)||void 0===t?void 0:t.events)||void 0===n?void 0:n.onClick)||void 0===i?void 0:i.mode)&&(0,f.isInArray)("emitter",e.interactivity.events.onClick.mode)}loadOptions(e,t){var n,i;if(!this.needsPlugin(e)&&!this.needsPlugin(t))return;const o=e;if(null==t?void 0:t.emitters)if((null==t?void 0:t.emitters)instanceof Array)o.emitters=null==t?void 0:t.emitters.map((e=>{const t=new c.Emitter;return t.load(e),t}));else{let e=o.emitters;void 0===(null==e?void 0:e.load)&&(o.emitters=e=new c.Emitter),e.load(null==t?void 0:t.emitters)}const r=null===(i=null===(n=null==t?void 0:t.interactivity)||void 0===n?void 0:n.modes)||void 0===i?void 0:i.emitters;if(r)if(r instanceof Array)o.interactivity.modes.emitters=r.map((e=>{const t=new c.Emitter;return t.load(e),t}));else{let e=o.interactivity.modes.emitters;void 0===(null==e?void 0:e.load)&&(o.interactivity.modes.emitters=e=new c.Emitter),e.load(r)}}}i=new WeakMap,t.loadEmittersPlugin=async function(e){e.emitterShapeManager||(e.emitterShapeManager=new d.ShapeManager(e)),e.addEmitterShape||(e.addEmitterShape=(t,n)=>{var i;null===(i=e.emitterShapeManager)||void 0===i||i.addShape(t,n)});const t=new p(e);await e.addPlugin(t),e.addEmitterShape("circle",new l.CircleShape),e.addEmitterShape("square",new h.SquareShape)},r(n(222),t),r(n(5958),t),r(n(7104),t),r(n(8784),t)},7111:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6476:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4277:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8929:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PolygonMask=void 0;const i=n(1626),o=n(762),r=n(2596),a=n(7419),s=n(4351);t.PolygonMask=class{constructor(){this.draw=new i.PolygonMaskDraw,this.enable=!1,this.inline=new o.PolygonMaskInline,this.move=new a.PolygonMaskMove,this.scale=1,this.type="none"}get inlineArrangement(){return this.inline.arrangement}set inlineArrangement(e){this.inline.arrangement=e}load(e){var t;if(!e)return;this.draw.load(e.draw);const n=null!==(t=e.inline)&&void 0!==t?t:{arrangement:e.inlineArrangement};void 0!==n&&this.inline.load(n),this.move.load(e.move),void 0!==e.scale&&(this.scale=e.scale),void 0!==e.type&&(this.type=e.type),void 0!==e.enable?this.enable=e.enable:this.enable="none"!==this.type,void 0!==e.url&&(this.url=e.url),void 0!==e.data&&("string"==typeof e.data?this.data=e.data:(this.data=new r.PolygonMaskLocalSvg,this.data.load(e.data))),void 0!==e.position&&(this.position=(0,s.deepExtend)({},e.position))}}},1626:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PolygonMaskDraw=void 0;const i=n(343),o=n(7078);t.PolygonMaskDraw=class{constructor(){this.enable=!1,this.stroke=new o.PolygonMaskDrawStroke}get lineWidth(){return this.stroke.width}set lineWidth(e){this.stroke.width=e}get lineColor(){return this.stroke.color}set lineColor(e){this.stroke.color=i.OptionsColor.create(this.stroke.color,e)}load(e){var t;if(!e)return;void 0!==e.enable&&(this.enable=e.enable);const n=null!==(t=e.stroke)&&void 0!==t?t:{color:e.lineColor,width:e.lineWidth};this.stroke.load(n)}}},7078:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PolygonMaskDrawStroke=void 0;const i=n(343),o=n(7129);t.PolygonMaskDrawStroke=class{constructor(){this.color=new i.OptionsColor,this.width=.5,this.opacity=1}load(e){var t;e&&(this.color=i.OptionsColor.create(this.color,e.color),"string"==typeof this.color.value&&(this.opacity=null!==(t=(0,o.stringToAlpha)(this.color.value))&&void 0!==t?t:this.opacity),void 0!==e.opacity&&(this.opacity=e.opacity),void 0!==e.width&&(this.width=e.width))}}},762:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PolygonMaskInline=void 0,t.PolygonMaskInline=class{constructor(){this.arrangement="one-per-point"}load(e){e&&void 0!==e.arrangement&&(this.arrangement=e.arrangement)}}},2596:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PolygonMaskLocalSvg=void 0,t.PolygonMaskLocalSvg=class{constructor(){this.path=[],this.size={height:0,width:0}}load(e){e&&(void 0!==e.path&&(this.path=e.path),void 0!==e.size&&(void 0!==e.size.width&&(this.size.width=e.size.width),void 0!==e.size.height&&(this.size.height=e.size.height)))}}},7419:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PolygonMaskMove=void 0,t.PolygonMaskMove=class{constructor(){this.radius=10,this.type="path"}load(e){e&&(void 0!==e.radius&&(this.radius=e.radius),void 0!==e.type&&(this.type=e.type))}}},328:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9760:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PolygonMaskInstance=void 0;const i=n(9546),o=n(4351),r=n(7266),a=n(6715),s=n(8929);t.PolygonMaskInstance=class{constructor(e){this.container=e,this.dimension={height:0,width:0},this.path2DSupported=!!window.Path2D,this.options=new s.PolygonMask,this.polygonMaskMoveRadius=this.options.move.radius*e.retina.pixelRatio}async initAsync(e){this.options.load(null==e?void 0:e.polygon);const t=this.options;this.polygonMaskMoveRadius=t.move.radius*this.container.retina.pixelRatio,t.enable&&await this.initRawData()}resize(){const e=this.container,t=this.options;t.enable&&"none"!==t.type&&(this.redrawTimeout&&clearTimeout(this.redrawTimeout),this.redrawTimeout=window.setTimeout((async()=>{await this.initRawData(!0),await e.particles.redraw()}),250))}stop(){delete this.raw,delete this.paths}particlesInitialization(){const e=this.options;return!(!e.enable||"inline"!==e.type||"one-per-point"!==e.inline.arrangement&&"per-point"!==e.inline.arrangement||(this.drawPoints(),0))}particlePosition(e){var t,n;if(this.options.enable&&(null!==(n=null===(t=this.raw)||void 0===t?void 0:t.length)&&void 0!==n?n:0)>0)return(0,o.deepExtend)({},e||this.randomPoint())}particleBounce(e,t,n){return this.polygonBounce(e,t,n)}clickPositionValid(e){const t=this.options;return t.enable&&"none"!==t.type&&"inline"!==t.type&&this.checkInsidePolygon(e)}draw(e){var t;if(!(null===(t=this.paths)||void 0===t?void 0:t.length))return;const n=this.options,o=n.draw;if(!n.enable||!o.enable)return;const r=this.raw;for(const t of this.paths){const n=t.path2d,a=this.path2DSupported;e&&(a&&n&&this.offset?(0,i.drawPolygonMaskPath)(e,n,o.stroke,this.offset):r&&(0,i.drawPolygonMask)(e,r,o.stroke))}}polygonBounce(e,t,n){const o=this.options;if(!this.raw||!o.enable||"top"!==n)return!1;if("inside"===o.type||"outside"===o.type){let t,n,o;const a=e.getPosition(),s=e.getRadius();for(let l=0,c=this.raw.length-1;l<this.raw.length;c=l++){const u=this.raw[l],d=this.raw[c];t=(0,i.calcClosestPtOnSegment)(u,d,a);const h=(0,r.getDistances)(a,t);if([n,o]=[h.dx,h.dy],h.distance<s)return(0,i.segmentBounce)(u,d,e.velocity),!0}if(t&&void 0!==n&&void 0!==o&&!this.checkInsidePolygon(a)){const n={x:1,y:1};return e.position.x>=t.x&&(n.x=-1),e.position.y>=t.y&&(n.y=-1),e.position.x=t.x+2*s*n.x,e.position.y=t.y+2*s*n.y,e.velocity.mult(-1),!0}}else if("inline"===o.type&&e.initialPosition&&(0,r.getDistance)(e.initialPosition,e.getPosition())>this.polygonMaskMoveRadius)return e.velocity.x=e.velocity.y/2-e.velocity.x,e.velocity.y=e.velocity.x/2-e.velocity.y,!0;return!1}checkInsidePolygon(e){var t,n;const i=this.container,o=this.options;if(!o.enable||"none"===o.type||"inline"===o.type)return!0;if(!this.raw)throw new Error(a.Constants.noPolygonFound);const r=i.canvas.size,s=null!==(t=null==e?void 0:e.x)&&void 0!==t?t:Math.random()*r.width,l=null!==(n=null==e?void 0:e.y)&&void 0!==n?n:Math.random()*r.height;let c=!1;for(let e=0,t=this.raw.length-1;e<this.raw.length;t=e++){const n=this.raw[e],i=this.raw[t];n.y>l!=i.y>l&&s<(i.x-n.x)*(l-n.y)/(i.y-n.y)+n.x&&(c=!c)}return"inside"===o.type?c:"outside"===o.type&&!c}parseSvgPath(e,t){var n,o,r;const a=null!=t&&t;if(void 0!==this.paths&&!a)return this.raw;const s=this.container,l=this.options,c=(new DOMParser).parseFromString(e,"image/svg+xml"),u=c.getElementsByTagName("svg")[0];let d=u.getElementsByTagName("path");d.length||(d=c.getElementsByTagName("path")),this.paths=[];for(let e=0;e<d.length;e++){const t=d.item(e);t&&this.paths.push({element:t,length:t.getTotalLength()})}const h=s.retina.pixelRatio,f=l.scale/h;this.dimension.width=parseFloat(null!==(n=u.getAttribute("width"))&&void 0!==n?n:"0")*f,this.dimension.height=parseFloat(null!==(o=u.getAttribute("height"))&&void 0!==o?o:"0")*f;const p=null!==(r=l.position)&&void 0!==r?r:{x:50,y:50};return this.offset={x:s.canvas.size.width*p.x/(100*h)-this.dimension.width/2,y:s.canvas.size.height*p.y/(100*h)-this.dimension.height/2},(0,i.parsePaths)(this.paths,f,this.offset)}async downloadSvgPath(e,t){const n=this.options,i=e||n.url,o=null!=t&&t;if(!i||void 0!==this.paths&&!o)return this.raw;const r=await fetch(i);if(!r.ok)throw new Error("tsParticles Error - Error occurred during polygon mask download");return this.parseSvgPath(await r.text(),t)}drawPoints(){if(this.raw)for(const e of this.raw)this.container.particles.addParticle({x:e.x,y:e.y})}randomPoint(){const e=this.container,t=this.options;let n;if("inline"===t.type)switch(t.inline.arrangement){case"random-point":n=this.getRandomPoint();break;case"random-length":n=this.getRandomPointByLength();break;case"equidistant":n=this.getEquidistantPointByIndex(e.particles.count);break;default:n=this.getPointByIndex(e.particles.count)}else n={x:Math.random()*e.canvas.size.width,y:Math.random()*e.canvas.size.height};return this.checkInsidePolygon(n)?n:this.randomPoint()}getRandomPoint(){if(!this.raw||!this.raw.length)throw new Error(a.Constants.noPolygonDataLoaded);const e=(0,o.itemFromArray)(this.raw);return{x:e.x,y:e.y}}getRandomPointByLength(){var e,t,n;const i=this.options;if(!this.raw||!this.raw.length||!(null===(e=this.paths)||void 0===e?void 0:e.length))throw new Error(a.Constants.noPolygonDataLoaded);const r=(0,o.itemFromArray)(this.paths),s=Math.floor(Math.random()*r.length)+1,l=r.element.getPointAtLength(s);return{x:l.x*i.scale+((null===(t=this.offset)||void 0===t?void 0:t.x)||0),y:l.y*i.scale+((null===(n=this.offset)||void 0===n?void 0:n.y)||0)}}getEquidistantPointByIndex(e){var t,n,i,o,r,s,l;const c=this.container.actualOptions,u=this.options;if(!this.raw||!this.raw.length||!(null===(t=this.paths)||void 0===t?void 0:t.length))throw new Error(a.Constants.noPolygonDataLoaded);let d,h=0;const f=this.paths.reduce(((e,t)=>e+t.length),0)/c.particles.number.value;for(const t of this.paths){const n=f*e-h;if(n<=t.length){d=t.element.getPointAtLength(n);break}h+=t.length}return{x:(null!==(n=null==d?void 0:d.x)&&void 0!==n?n:0)*u.scale+(null!==(o=null===(i=this.offset)||void 0===i?void 0:i.x)&&void 0!==o?o:0),y:(null!==(r=null==d?void 0:d.y)&&void 0!==r?r:0)*u.scale+(null!==(l=null===(s=this.offset)||void 0===s?void 0:s.y)&&void 0!==l?l:0)}}getPointByIndex(e){if(!this.raw||!this.raw.length)throw new Error(a.Constants.noPolygonDataLoaded);const t=this.raw[e%this.raw.length];return{x:t.x,y:t.y}}createPath2D(){var e,t;const n=this.options;if(this.path2DSupported&&(null===(e=this.paths)||void 0===e?void 0:e.length))for(const e of this.paths){const i=null===(t=e.element)||void 0===t?void 0:t.getAttribute("d");if(i){const t=new Path2D(i),o=document.createElementNS("http://www.w3.org/2000/svg","svg").createSVGMatrix(),r=new Path2D,a=o.scale(n.scale);r.addPath?(r.addPath(t,a),e.path2d=r):delete e.path2d}else delete e.path2d;!e.path2d&&this.raw&&(e.path2d=new Path2D,e.path2d.moveTo(this.raw[0].x,this.raw[0].y),this.raw.forEach(((t,n)=>{var i;n>0&&(null===(i=e.path2d)||void 0===i||i.lineTo(t.x,t.y))})),e.path2d.closePath())}}async initRawData(e){const t=this.options;if(t.url)this.raw=await this.downloadSvgPath(t.url,e);else if(t.data){const n=t.data;let i;if("string"!=typeof n){const e=n.path instanceof Array?n.path.map((e=>`<path d="${e}" />`)).join(""):`<path d="${n.path}" />`;i=`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="${n.size.width}" height="${n.size.height}">${e}</svg>`}else i=n;this.raw=this.parseSvgPath(i,e)}this.createPath2D()}}},9546:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.segmentBounce=t.calcClosestPtOnSegment=t.parsePaths=t.drawPolygonMaskPath=t.drawPolygonMask=void 0;const i=n(7129),o=n(8061),r=n(7266);t.drawPolygonMask=function(e,t,n){const o=(0,i.colorToRgb)(n.color);if(o){e.beginPath(),e.moveTo(t[0].x,t[0].y);for(const n of t)e.lineTo(n.x,n.y);e.closePath(),e.strokeStyle=(0,i.getStyleFromRgb)(o),e.lineWidth=n.width,e.stroke()}},t.drawPolygonMaskPath=function(e,t,n,o){e.translate(o.x,o.y);const r=(0,i.colorToRgb)(n.color);r&&(e.strokeStyle=(0,i.getStyleFromRgb)(r,n.opacity),e.lineWidth=n.width,e.stroke(t))},t.parsePaths=function(e,t,n){var i;const o=[];for(const r of e){const e=r.element.pathSegList,a=null!==(i=null==e?void 0:e.numberOfItems)&&void 0!==i?i:0,s={x:0,y:0};for(let i=0;i<a;i++){const r=null==e?void 0:e.getItem(i),a=window.SVGPathSeg;switch(null==r?void 0:r.pathSegType){case a.PATHSEG_MOVETO_ABS:case a.PATHSEG_LINETO_ABS:case a.PATHSEG_CURVETO_CUBIC_ABS:case a.PATHSEG_CURVETO_QUADRATIC_ABS:case a.PATHSEG_ARC_ABS:case a.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:case a.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:{const e=r;s.x=e.x,s.y=e.y;break}case a.PATHSEG_LINETO_HORIZONTAL_ABS:s.x=r.x;break;case a.PATHSEG_LINETO_VERTICAL_ABS:s.y=r.y;break;case a.PATHSEG_LINETO_REL:case a.PATHSEG_MOVETO_REL:case a.PATHSEG_CURVETO_CUBIC_REL:case a.PATHSEG_CURVETO_QUADRATIC_REL:case a.PATHSEG_ARC_REL:case a.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:case a.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:{const e=r;s.x+=e.x,s.y+=e.y;break}case a.PATHSEG_LINETO_HORIZONTAL_REL:s.x+=r.x;break;case a.PATHSEG_LINETO_VERTICAL_REL:s.y+=r.y;break;case a.PATHSEG_UNKNOWN:case a.PATHSEG_CLOSEPATH:continue}o.push({x:s.x*t+n.x,y:s.y*t+n.y})}}return o},t.calcClosestPtOnSegment=function(e,t,n){const{dx:i,dy:o}=(0,r.getDistances)(n,e),{dx:a,dy:s}=(0,r.getDistances)(t,e),l=(i*a+o*s)/(a**2+s**2),c={x:e.x+a*l,y:e.x+s*l,isOnSegment:l>=0&&l<=1};return l<0?(c.x=e.x,c.y=e.y):l>1&&(c.x=t.x,c.y=t.y),c},t.segmentBounce=function(e,t,n){const{dx:i,dy:a}=(0,r.getDistances)(e,t),s=Math.atan2(a,i),l=o.Vector.create(Math.sin(s),-Math.cos(s)),c=2*(n.x*l.x+n.y*l.y);l.multTo(c),n.subFrom(l)}},8665:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,o)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return o(t,e),t},a=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.loadPolygonMaskPlugin=void 0;const s=n(8929),l=n(9760),c=n(4351);class u{constructor(){this.id="polygonMask"}getPlugin(e){return new l.PolygonMaskInstance(e)}needsPlugin(e){var t,n,i;return null!==(n=null===(t=null==e?void 0:e.polygon)||void 0===t?void 0:t.enable)&&void 0!==n?n:void 0!==(null===(i=null==e?void 0:e.polygon)||void 0===i?void 0:i.type)&&"none"!==e.polygon.type}loadOptions(e,t){if(!this.needsPlugin(t))return;const n=e;let i=n.polygon;void 0===(null==i?void 0:i.load)&&(n.polygon=i=new s.PolygonMask),i.load(null==t?void 0:t.polygon)}}t.loadPolygonMaskPlugin=async function(e){(0,c.isSsr)()||"SVGPathSeg"in window||await Promise.resolve().then((()=>r(n(8474))));const t=new u;await e.addPlugin(t)},a(n(7111),t),a(n(6476),t),a(n(4277),t),a(n(328),t)},8474:function(){"use strict";!function(){try{if("undefined"==typeof window)return;"SVGPathSeg"in window||(window.SVGPathSeg=function(e,t,n){this.pathSegType=e,this.pathSegTypeAsLetter=t,this._owningPathSegList=n},window.SVGPathSeg.prototype.classname="SVGPathSeg",window.SVGPathSeg.PATHSEG_UNKNOWN=0,window.SVGPathSeg.PATHSEG_CLOSEPATH=1,window.SVGPathSeg.PATHSEG_MOVETO_ABS=2,window.SVGPathSeg.PATHSEG_MOVETO_REL=3,window.SVGPathSeg.PATHSEG_LINETO_ABS=4,window.SVGPathSeg.PATHSEG_LINETO_REL=5,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS=6,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL=7,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS=8,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL=9,window.SVGPathSeg.PATHSEG_ARC_ABS=10,window.SVGPathSeg.PATHSEG_ARC_REL=11,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS=12,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL=13,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS=14,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL=15,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS=16,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL=17,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS=18,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL=19,window.SVGPathSeg.prototype._segmentChanged=function(){this._owningPathSegList&&this._owningPathSegList.segmentChanged(this)},window.SVGPathSegClosePath=function(e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CLOSEPATH,"z",e)},window.SVGPathSegClosePath.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegClosePath.prototype.toString=function(){return"[object SVGPathSegClosePath]"},window.SVGPathSegClosePath.prototype._asPathString=function(){return this.pathSegTypeAsLetter},window.SVGPathSegClosePath.prototype.clone=function(){return new window.SVGPathSegClosePath(void 0)},window.SVGPathSegMovetoAbs=function(e,t,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_MOVETO_ABS,"M",e),this._x=t,this._y=n},window.SVGPathSegMovetoAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegMovetoAbs.prototype.toString=function(){return"[object SVGPathSegMovetoAbs]"},window.SVGPathSegMovetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegMovetoAbs.prototype.clone=function(){return new window.SVGPathSegMovetoAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegMovetoAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegMovetoAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegMovetoRel=function(e,t,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_MOVETO_REL,"m",e),this._x=t,this._y=n},window.SVGPathSegMovetoRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegMovetoRel.prototype.toString=function(){return"[object SVGPathSegMovetoRel]"},window.SVGPathSegMovetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegMovetoRel.prototype.clone=function(){return new window.SVGPathSegMovetoRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegMovetoRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegMovetoRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoAbs=function(e,t,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_ABS,"L",e),this._x=t,this._y=n},window.SVGPathSegLinetoAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoAbs.prototype.toString=function(){return"[object SVGPathSegLinetoAbs]"},window.SVGPathSegLinetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegLinetoAbs.prototype.clone=function(){return new window.SVGPathSegLinetoAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegLinetoAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegLinetoAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoRel=function(e,t,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_REL,"l",e),this._x=t,this._y=n},window.SVGPathSegLinetoRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoRel.prototype.toString=function(){return"[object SVGPathSegLinetoRel]"},window.SVGPathSegLinetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegLinetoRel.prototype.clone=function(){return new window.SVGPathSegLinetoRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegLinetoRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegLinetoRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicAbs=function(e,t,n,i,o,r,a){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS,"C",e),this._x=t,this._y=n,this._x1=i,this._y1=o,this._x2=r,this._y2=a},window.SVGPathSegCurvetoCubicAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicAbs]"},window.SVGPathSegCurvetoCubicAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicAbs(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x1",{get:function(){return this._x1},set:function(e){this._x1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y1",{get:function(){return this._y1},set:function(e){this._y1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x2",{get:function(){return this._x2},set:function(e){this._x2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y2",{get:function(){return this._y2},set:function(e){this._y2=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicRel=function(e,t,n,i,o,r,a){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL,"c",e),this._x=t,this._y=n,this._x1=i,this._y1=o,this._x2=r,this._y2=a},window.SVGPathSegCurvetoCubicRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicRel]"},window.SVGPathSegCurvetoCubicRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicRel.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicRel(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x1",{get:function(){return this._x1},set:function(e){this._x1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y1",{get:function(){return this._y1},set:function(e){this._y1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x2",{get:function(){return this._x2},set:function(e){this._x2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y2",{get:function(){return this._y2},set:function(e){this._y2=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticAbs=function(e,t,n,i,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS,"Q",e),this._x=t,this._y=n,this._x1=i,this._y1=o},window.SVGPathSegCurvetoQuadraticAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticAbs]"},window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticAbs(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"x1",{get:function(){return this._x1},set:function(e){this._x1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"y1",{get:function(){return this._y1},set:function(e){this._y1=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticRel=function(e,t,n,i,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL,"q",e),this._x=t,this._y=n,this._x1=i,this._y1=o},window.SVGPathSegCurvetoQuadraticRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticRel]"},window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticRel.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticRel(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"x1",{get:function(){return this._x1},set:function(e){this._x1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"y1",{get:function(){return this._y1},set:function(e){this._y1=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcAbs=function(e,t,n,i,o,r,a,s){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_ARC_ABS,"A",e),this._x=t,this._y=n,this._r1=i,this._r2=o,this._angle=r,this._largeArcFlag=a,this._sweepFlag=s},window.SVGPathSegArcAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegArcAbs.prototype.toString=function(){return"[object SVGPathSegArcAbs]"},window.SVGPathSegArcAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},window.SVGPathSegArcAbs.prototype.clone=function(){return new window.SVGPathSegArcAbs(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(window.SVGPathSegArcAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"r1",{get:function(){return this._r1},set:function(e){this._r1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"r2",{get:function(){return this._r2},set:function(e){this._r2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"angle",{get:function(){return this._angle},set:function(e){this._angle=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(e){this._largeArcFlag=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(e){this._sweepFlag=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcRel=function(e,t,n,i,o,r,a,s){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_ARC_REL,"a",e),this._x=t,this._y=n,this._r1=i,this._r2=o,this._angle=r,this._largeArcFlag=a,this._sweepFlag=s},window.SVGPathSegArcRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegArcRel.prototype.toString=function(){return"[object SVGPathSegArcRel]"},window.SVGPathSegArcRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},window.SVGPathSegArcRel.prototype.clone=function(){return new window.SVGPathSegArcRel(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(window.SVGPathSegArcRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"r1",{get:function(){return this._r1},set:function(e){this._r1=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"r2",{get:function(){return this._r2},set:function(e){this._r2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"angle",{get:function(){return this._angle},set:function(e){this._angle=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(e){this._largeArcFlag=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(e){this._sweepFlag=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalAbs=function(e,t){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS,"H",e),this._x=t},window.SVGPathSegLinetoHorizontalAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoHorizontalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalAbs]"},window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},window.SVGPathSegLinetoHorizontalAbs.prototype.clone=function(){return new window.SVGPathSegLinetoHorizontalAbs(void 0,this._x)},Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalRel=function(e,t){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL,"h",e),this._x=t},window.SVGPathSegLinetoHorizontalRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoHorizontalRel.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalRel]"},window.SVGPathSegLinetoHorizontalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},window.SVGPathSegLinetoHorizontalRel.prototype.clone=function(){return new window.SVGPathSegLinetoHorizontalRel(void 0,this._x)},Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalAbs=function(e,t){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS,"V",e),this._y=t},window.SVGPathSegLinetoVerticalAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoVerticalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalAbs]"},window.SVGPathSegLinetoVerticalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},window.SVGPathSegLinetoVerticalAbs.prototype.clone=function(){return new window.SVGPathSegLinetoVerticalAbs(void 0,this._y)},Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalRel=function(e,t){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL,"v",e),this._y=t},window.SVGPathSegLinetoVerticalRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoVerticalRel.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalRel]"},window.SVGPathSegLinetoVerticalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},window.SVGPathSegLinetoVerticalRel.prototype.clone=function(){return new window.SVGPathSegLinetoVerticalRel(void 0,this._y)},Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothAbs=function(e,t,n,i,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS,"S",e),this._x=t,this._y=n,this._x2=i,this._y2=o},window.SVGPathSegCurvetoCubicSmoothAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothAbs]"},window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"x2",{get:function(){return this._x2},set:function(e){this._x2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"y2",{get:function(){return this._y2},set:function(e){this._y2=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothRel=function(e,t,n,i,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL,"s",e),this._x=t,this._y=n,this._x2=i,this._y2=o},window.SVGPathSegCurvetoCubicSmoothRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothRel]"},window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicSmoothRel(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"x2",{get:function(){return this._x2},set:function(e){this._x2=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"y2",{get:function(){return this._y2},set:function(e){this._y2=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothAbs=function(e,t,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS,"T",e),this._x=t,this._y=n},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothAbs]"},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothRel=function(e,t,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL,"t",e),this._x=t,this._y=n},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothRel]"},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e,this._segmentChanged()},enumerable:!0}),window.SVGPathElement.prototype.createSVGPathSegClosePath=function(){return new window.SVGPathSegClosePath(void 0)},window.SVGPathElement.prototype.createSVGPathSegMovetoAbs=function(e,t){return new window.SVGPathSegMovetoAbs(void 0,e,t)},window.SVGPathElement.prototype.createSVGPathSegMovetoRel=function(e,t){return new window.SVGPathSegMovetoRel(void 0,e,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoAbs=function(e,t){return new window.SVGPathSegLinetoAbs(void 0,e,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoRel=function(e,t){return new window.SVGPathSegLinetoRel(void 0,e,t)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs=function(e,t,n,i,o,r){return new window.SVGPathSegCurvetoCubicAbs(void 0,e,t,n,i,o,r)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel=function(e,t,n,i,o,r){return new window.SVGPathSegCurvetoCubicRel(void 0,e,t,n,i,o,r)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs=function(e,t,n,i){return new window.SVGPathSegCurvetoQuadraticAbs(void 0,e,t,n,i)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel=function(e,t,n,i){return new window.SVGPathSegCurvetoQuadraticRel(void 0,e,t,n,i)},window.SVGPathElement.prototype.createSVGPathSegArcAbs=function(e,t,n,i,o,r,a){return new window.SVGPathSegArcAbs(void 0,e,t,n,i,o,r,a)},window.SVGPathElement.prototype.createSVGPathSegArcRel=function(e,t,n,i,o,r,a){return new window.SVGPathSegArcRel(void 0,e,t,n,i,o,r,a)},window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs=function(e){return new window.SVGPathSegLinetoHorizontalAbs(void 0,e)},window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel=function(e){return new window.SVGPathSegLinetoHorizontalRel(void 0,e)},window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs=function(e){return new window.SVGPathSegLinetoVerticalAbs(void 0,e)},window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel=function(e){return new window.SVGPathSegLinetoVerticalRel(void 0,e)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs=function(e,t,n,i){return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0,e,t,n,i)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel=function(e,t,n,i){return new window.SVGPathSegCurvetoCubicSmoothRel(void 0,e,t,n,i)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs=function(e,t){return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0,e,t)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel=function(e,t){return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0,e,t)},"getPathSegAtLength"in window.SVGPathElement.prototype||(window.SVGPathElement.prototype.getPathSegAtLength=function(e){if(void 0===e||!isFinite(e))throw"Invalid arguments.";const t=document.createElementNS("http://www.w3.org/2000/svg","path");t.setAttribute("d",this.getAttribute("d"));let n=t.pathSegList.numberOfItems-1;if(n<=0)return 0;do{if(t.pathSegList.removeItem(n),e>t.getTotalLength())break;n--}while(n>0);return n})),"SVGPathSegList"in window&&"appendItem"in window.SVGPathSegList.prototype||(window.SVGPathSegList=function(e){this._pathElement=e,this._list=this._parsePath(this._pathElement.getAttribute("d")),this._mutationObserverConfig={attributes:!0,attributeFilter:["d"]},this._pathElementMutationObserver=new MutationObserver(this._updateListFromPathMutations.bind(this)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},window.SVGPathSegList.prototype.classname="SVGPathSegList",Object.defineProperty(window.SVGPathSegList.prototype,"numberOfItems",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(window.SVGPathSegList.prototype,"length",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"pathSegList",{get:function(){return this._pathSegList||(this._pathSegList=new window.SVGPathSegList(this)),this._pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"normalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"animatedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"animatedNormalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),window.SVGPathSegList.prototype._checkPathSynchronizedToList=function(){this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords())},window.SVGPathSegList.prototype._updateListFromPathMutations=function(e){if(!this._pathElement)return;let t=!1;e.forEach((function(e){"d"==e.attributeName&&(t=!0)})),t&&(this._list=this._parsePath(this._pathElement.getAttribute("d")))},window.SVGPathSegList.prototype._writeListToPath=function(){this._pathElementMutationObserver.disconnect(),this._pathElement.setAttribute("d",window.SVGPathSegList._pathSegArrayAsString(this._list)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},window.SVGPathSegList.prototype.segmentChanged=function(e){this._writeListToPath()},window.SVGPathSegList.prototype.clear=function(){this._checkPathSynchronizedToList(),this._list.forEach((function(e){e._owningPathSegList=null})),this._list=[],this._writeListToPath()},window.SVGPathSegList.prototype.initialize=function(e){return this._checkPathSynchronizedToList(),this._list=[e],e._owningPathSegList=this,this._writeListToPath(),e},window.SVGPathSegList.prototype._checkValidIndex=function(e){if(isNaN(e)||e<0||e>=this.numberOfItems)throw"INDEX_SIZE_ERR"},window.SVGPathSegList.prototype.getItem=function(e){return this._checkPathSynchronizedToList(),this._checkValidIndex(e),this._list[e]},window.SVGPathSegList.prototype.insertItemBefore=function(e,t){return this._checkPathSynchronizedToList(),t>this.numberOfItems&&(t=this.numberOfItems),e._owningPathSegList&&(e=e.clone()),this._list.splice(t,0,e),e._owningPathSegList=this,this._writeListToPath(),e},window.SVGPathSegList.prototype.replaceItem=function(e,t){return this._checkPathSynchronizedToList(),e._owningPathSegList&&(e=e.clone()),this._checkValidIndex(t),this._list[t]=e,e._owningPathSegList=this,this._writeListToPath(),e},window.SVGPathSegList.prototype.removeItem=function(e){this._checkPathSynchronizedToList(),this._checkValidIndex(e);const t=this._list[e];return this._list.splice(e,1),this._writeListToPath(),t},window.SVGPathSegList.prototype.appendItem=function(e){return this._checkPathSynchronizedToList(),e._owningPathSegList&&(e=e.clone()),this._list.push(e),e._owningPathSegList=this,this._writeListToPath(),e},window.SVGPathSegList._pathSegArrayAsString=function(e){let t="",n=!0;return e.forEach((function(e){n?(n=!1,t+=e._asPathString()):t+=" "+e._asPathString()})),t},window.SVGPathSegList.prototype._parsePath=function(e){if(!e||0==e.length)return[];const t=this,n=function(){this.pathSegList=[]};n.prototype.appendSegment=function(e){this.pathSegList.push(e)};const i=function(e){this._string=e,this._currentIndex=0,this._endIndex=this._string.length,this._previousCommand=window.SVGPathSeg.PATHSEG_UNKNOWN,this._skipOptionalSpaces()};i.prototype._isCurrentSpace=function(){const e=this._string[this._currentIndex];return e<=" "&&(" "==e||"\n"==e||"\t"==e||"\r"==e||"\f"==e)},i.prototype._skipOptionalSpaces=function(){for(;this._currentIndex<this._endIndex&&this._isCurrentSpace();)this._currentIndex++;return this._currentIndex<this._endIndex},i.prototype._skipOptionalSpacesOrDelimiter=function(){return!(this._currentIndex<this._endIndex&&!this._isCurrentSpace()&&","!=this._string.charAt(this._currentIndex))&&(this._skipOptionalSpaces()&&this._currentIndex<this._endIndex&&","==this._string.charAt(this._currentIndex)&&(this._currentIndex++,this._skipOptionalSpaces()),this._currentIndex<this._endIndex)},i.prototype.hasMoreData=function(){return this._currentIndex<this._endIndex},i.prototype.peekSegmentType=function(){const e=this._string[this._currentIndex];return this._pathSegTypeFromChar(e)},i.prototype._pathSegTypeFromChar=function(e){switch(e){case"Z":case"z":return window.SVGPathSeg.PATHSEG_CLOSEPATH;case"M":return window.SVGPathSeg.PATHSEG_MOVETO_ABS;case"m":return window.SVGPathSeg.PATHSEG_MOVETO_REL;case"L":return window.SVGPathSeg.PATHSEG_LINETO_ABS;case"l":return window.SVGPathSeg.PATHSEG_LINETO_REL;case"C":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;case"c":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;case"Q":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;case"q":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;case"A":return window.SVGPathSeg.PATHSEG_ARC_ABS;case"a":return window.SVGPathSeg.PATHSEG_ARC_REL;case"H":return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;case"h":return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;case"V":return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;case"v":return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;case"S":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;case"s":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;case"T":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;case"t":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;default:return window.SVGPathSeg.PATHSEG_UNKNOWN}},i.prototype._nextCommandHelper=function(e,t){return("+"==e||"-"==e||"."==e||e>="0"&&e<="9")&&t!=window.SVGPathSeg.PATHSEG_CLOSEPATH?t==window.SVGPathSeg.PATHSEG_MOVETO_ABS?window.SVGPathSeg.PATHSEG_LINETO_ABS:t==window.SVGPathSeg.PATHSEG_MOVETO_REL?window.SVGPathSeg.PATHSEG_LINETO_REL:t:window.SVGPathSeg.PATHSEG_UNKNOWN},i.prototype.initialCommandIsMoveTo=function(){if(!this.hasMoreData())return!0;const e=this.peekSegmentType();return e==window.SVGPathSeg.PATHSEG_MOVETO_ABS||e==window.SVGPathSeg.PATHSEG_MOVETO_REL},i.prototype._parseNumber=function(){let e=0,t=0,n=1,i=0,o=1,r=1;const a=this._currentIndex;if(this._skipOptionalSpaces(),this._currentIndex<this._endIndex&&"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:this._currentIndex<this._endIndex&&"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,o=-1),this._currentIndex==this._endIndex||(this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")&&"."!=this._string.charAt(this._currentIndex))return;const s=this._currentIndex;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)this._currentIndex++;if(this._currentIndex!=s){let e=this._currentIndex-1,n=1;for(;e>=s;)t+=n*(this._string.charAt(e--)-"0"),n*=10}if(this._currentIndex<this._endIndex&&"."==this._string.charAt(this._currentIndex)){if(this._currentIndex++,this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)n*=10,i+=(this._string.charAt(this._currentIndex)-"0")/n,this._currentIndex+=1}if(this._currentIndex!=a&&this._currentIndex+1<this._endIndex&&("e"==this._string.charAt(this._currentIndex)||"E"==this._string.charAt(this._currentIndex))&&"x"!=this._string.charAt(this._currentIndex+1)&&"m"!=this._string.charAt(this._currentIndex+1)){if(this._currentIndex++,"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,r=-1),this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)e*=10,e+=this._string.charAt(this._currentIndex)-"0",this._currentIndex++}let l=t+i;return l*=o,e&&(l*=Math.pow(10,r*e)),a!=this._currentIndex?(this._skipOptionalSpacesOrDelimiter(),l):void 0},i.prototype._parseArcFlag=function(){if(this._currentIndex>=this._endIndex)return;let e=!1;const t=this._string.charAt(this._currentIndex++);if("0"==t)e=!1;else{if("1"!=t)return;e=!0}return this._skipOptionalSpacesOrDelimiter(),e},i.prototype.parseSegment=function(){const e=this._string[this._currentIndex];let n,i=this._pathSegTypeFromChar(e);if(i==window.SVGPathSeg.PATHSEG_UNKNOWN){if(this._previousCommand==window.SVGPathSeg.PATHSEG_UNKNOWN)return null;if(i=this._nextCommandHelper(e,this._previousCommand),i==window.SVGPathSeg.PATHSEG_UNKNOWN)return null}else this._currentIndex++;switch(this._previousCommand=i,i){case window.SVGPathSeg.PATHSEG_MOVETO_REL:return new window.SVGPathSegMovetoRel(t,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_MOVETO_ABS:return new window.SVGPathSegMovetoAbs(t,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_REL:return new window.SVGPathSegLinetoRel(t,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_ABS:return new window.SVGPathSegLinetoAbs(t,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:return new window.SVGPathSegLinetoHorizontalRel(t,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:return new window.SVGPathSegLinetoHorizontalAbs(t,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:return new window.SVGPathSegLinetoVerticalRel(t,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:return new window.SVGPathSegLinetoVerticalAbs(t,this._parseNumber());case window.SVGPathSeg.PATHSEG_CLOSEPATH:return this._skipOptionalSpaces(),new window.SVGPathSegClosePath(t);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:return n={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicRel(t,n.x,n.y,n.x1,n.y1,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:return n={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicAbs(t,n.x,n.y,n.x1,n.y1,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:return n={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicSmoothRel(t,n.x,n.y,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:return n={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicSmoothAbs(t,n.x,n.y,n.x2,n.y2);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:return n={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoQuadraticRel(t,n.x,n.y,n.x1,n.y1);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:return n={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoQuadraticAbs(t,n.x,n.y,n.x1,n.y1);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:return new window.SVGPathSegCurvetoQuadraticSmoothRel(t,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:return new window.SVGPathSegCurvetoQuadraticSmoothAbs(t,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_ARC_REL:return n={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegArcRel(t,n.x,n.y,n.x1,n.y1,n.arcAngle,n.arcLarge,n.arcSweep);case window.SVGPathSeg.PATHSEG_ARC_ABS:return n={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegArcAbs(t,n.x,n.y,n.x1,n.y1,n.arcAngle,n.arcLarge,n.arcSweep);default:throw"Unknown path seg type."}};const o=new n,r=new i(e);if(!r.initialCommandIsMoveTo())return[];for(;r.hasMoreData();){const e=r.parseSegment();if(!e)return[];o.appendSegment(e)}return o.pathSegList})}catch(e){console.warn("An error occurred in tsParticles pathseg polyfill. If the Polygon Mask is not working, please open an issue here: https://github.com/matteobruni/tsparticles",e)}}()},2031:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CircleDrawer=void 0,t.CircleDrawer=class{getSidesCount(){return 12}draw(e,t,n){e.arc(0,0,n,0,2*Math.PI,!1)}}},7926:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadCircleShape=void 0;const i=n(2031);t.loadCircleShape=async function(e){await e.addShape("circle",new i.CircleDrawer)}},1827:function(e,t,n){"use strict";var i,o=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},r=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.ImageDrawer=void 0;const a=n(498);t.ImageDrawer=class{constructor(){i.set(this,void 0),o(this,i,[],"f")}getSidesCount(){return 12}getImages(e){return r(this,i,"f").find((t=>t.id===e.id))||(r(this,i,"f").push({id:e.id,images:[]}),this.getImages(e))}addImage(e,t){const n=this.getImages(e);null==n||n.images.push(t)}destroy(){o(this,i,[],"f")}draw(e,t,n,i){var o,r;const a=t.image,s=null===(o=null==a?void 0:a.data)||void 0===o?void 0:o.element;if(!s)return;const l=null!==(r=null==a?void 0:a.ratio)&&void 0!==r?r:1,c={x:-n,y:-n};(null==a?void 0:a.data.svgData)&&(null==a?void 0:a.replaceColor)||(e.globalAlpha=i),e.drawImage(s,c.x,c.y,2*n,2*n/l),(null==a?void 0:a.data.svgData)&&(null==a?void 0:a.replaceColor)||(e.globalAlpha=1)}loadShape(e){var t,n,i;if("image"!==e.shape&&"images"!==e.shape)return;const o=this.getImages(e.container).images,r=e.shapeData,s=o.find((e=>e.source===r.src));let l;if(!s)return void this.loadImageShape(e.container,r).then((()=>{this.loadShape(e)}));if(s.error)return;const c=e.getFillColor();l=s.svgData&&r.replaceColor&&c?(0,a.replaceImageColor)(s,r,c,e):{data:s,loaded:!0,ratio:r.width/r.height,replaceColor:null!==(t=r.replaceColor)&&void 0!==t?t:r.replace_color,source:r.src},l.ratio||(l.ratio=1);const u={image:l,fill:null!==(n=r.fill)&&void 0!==n?n:e.fill,close:null!==(i=r.close)&&void 0!==i?i:e.close};e.image=u.image,e.fill=u.fill,e.close=u.close}async loadImageShape(e,t){const n=t.src;if(!n)throw new Error("Error tsParticles - No image.src");try{const i={source:n,type:n.substr(n.length-3),error:!1,loading:!0};this.addImage(e,i);const o=t.replaceColor?a.downloadSvgImage:a.loadImage;await o(i)}catch(e){throw new Error(`tsParticles error - ${t.src} not found`)}}},i=new WeakMap},498:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.replaceImageColor=t.downloadSvgImage=t.loadImage=void 0;const i=n(7129),o=/(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d.]+%?\))|currentcolor/gi;async function r(e){return new Promise((t=>{e.loading=!0;const n=new Image;n.addEventListener("load",(()=>{e.element=n,e.loading=!1,t()})),n.addEventListener("error",(()=>{e.error=!0,e.loading=!1,console.error(`Error tsParticles - loading image: ${e.source}`),t()})),n.src=e.source}))}t.loadImage=r,t.downloadSvgImage=async function(e){if("svg"!==e.type)return void await r(e);e.loading=!0;const t=await fetch(e.source);e.loading=!1,t.ok||(console.error("Error tsParticles - Image not found"),e.error=!0),e.error||(e.svgData=await t.text())},t.replaceImageColor=function(e,t,n,a){var s,l,c;const u=function(e,t,n){const{svgData:r}=e;if(!r)return"";const a=(0,i.getStyleFromHsl)(t,n);if(r.includes("fill"))return r.replace(o,(()=>a));const s=r.indexOf(">");return`${r.substring(0,s)} fill="${a}"${r.substring(s)}`}(e,n,null!==(l=null===(s=a.opacity)||void 0===s?void 0:s.value)&&void 0!==l?l:1),d=new Blob([u],{type:"image/svg+xml"}),h=URL||window.URL||window.webkitURL||window,f=h.createObjectURL(d),p=new Image,v={data:Object.assign(Object.assign({},e),{svgData:u}),ratio:t.width/t.height,replaceColor:null!==(c=t.replaceColor)&&void 0!==c?c:t.replace_color,source:t.src};return p.addEventListener("load",(()=>{const t=a.image;t&&(t.loaded=!0,e.element=p),h.revokeObjectURL(f)})),p.addEventListener("error",(()=>{h.revokeObjectURL(f);const t=Object.assign(Object.assign({},e),{error:!1,loading:!0});r(t).then((()=>{const n=a.image;n&&(e.element=t.element,n.loaded=!0)}))})),p.src=f,v}},3113:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadImageShape=void 0;const i=n(1827);t.loadImageShape=async function(e){const t=new i.ImageDrawer;await e.addShape("image",t),await e.addShape("images",t)}},6604:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LineDrawer=void 0,t.LineDrawer=class{getSidesCount(){return 1}draw(e,t,n){e.moveTo(-n/2,0),e.lineTo(n/2,0)}}},3274:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadLineShape=void 0;const i=n(6604);t.loadLineShape=async function(e){await e.addShape("line",new i.LineDrawer)}},5585:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PolygonDrawer=void 0;const i=n(2529);class o extends i.PolygonDrawerBase{getSidesData(e,t){var n,i;const o=e.shapeData,r=null!==(i=null!==(n=null==o?void 0:o.sides)&&void 0!==n?n:null==o?void 0:o.nb_sides)&&void 0!==i?i:5;return{count:{denominator:1,numerator:r},length:2.66*t/(r/3)}}getCenter(e,t){return{x:-t/(this.getSidesCount(e)/3.5),y:-t/.76}}}t.PolygonDrawer=o},2529:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PolygonDrawerBase=void 0,t.PolygonDrawerBase=class{getSidesCount(e){var t,n;const i=e.shapeData;return null!==(n=null!==(t=null==i?void 0:i.sides)&&void 0!==t?t:null==i?void 0:i.nb_sides)&&void 0!==n?n:5}draw(e,t,n){const i=this.getCenter(t,n),o=this.getSidesData(t,n),r=o.count.numerator*o.count.denominator,a=o.count.numerator/o.count.denominator,s=180*(a-2)/a,l=Math.PI-Math.PI*s/180;if(e){e.beginPath(),e.translate(i.x,i.y),e.moveTo(0,0);for(let t=0;t<r;t++)e.lineTo(o.length,0),e.translate(o.length,0),e.rotate(l)}}}},4309:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TriangleDrawer=void 0;const i=n(2529);class o extends i.PolygonDrawerBase{getSidesCount(){return 3}getSidesData(e,t){return{count:{denominator:2,numerator:3},length:2*t}}getCenter(e,t){return{x:-t,y:t/1.66}}}t.TriangleDrawer=o},9224:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadPolygonShape=t.loadTriangleShape=t.loadGenericPolygonShape=void 0;const i=n(5585),o=n(4309);async function r(e){await e.addShape("polygon",new i.PolygonDrawer)}async function a(e){await e.addShape("triangle",new o.TriangleDrawer)}t.loadGenericPolygonShape=r,t.loadTriangleShape=a,t.loadPolygonShape=async function(e){await r(e),await a(e)}},3289:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SquareDrawer=void 0;const n=Math.sqrt(2);t.SquareDrawer=class{getSidesCount(){return 4}draw(e,t,i){e.rect(-i/n,-i/n,2*i/n,2*i/n)}}},8180:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadSquareShape=void 0;const i=n(3289);t.loadSquareShape=async function(e){const t=new i.SquareDrawer;await e.addShape("edge",t),await e.addShape("square",t)}},377:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StarDrawer=void 0,t.StarDrawer=class{getSidesCount(e){var t,n;const i=e.shapeData;return null!==(n=null!==(t=null==i?void 0:i.sides)&&void 0!==t?t:null==i?void 0:i.nb_sides)&&void 0!==n?n:5}draw(e,t,n){var i;const o=t.shapeData,r=this.getSidesCount(t),a=null!==(i=null==o?void 0:o.inset)&&void 0!==i?i:2;e.moveTo(0,0-n);for(let t=0;t<r;t++)e.rotate(Math.PI/r),e.lineTo(0,0-n*a),e.rotate(Math.PI/r),e.lineTo(0,0-n)}}},9165:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadStarShape=void 0;const i=n(377);t.loadStarShape=async function(e){await e.addShape("star",new i.StarDrawer)}},5472:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TextDrawer=t.validTypes=void 0;const i=n(4351);t.validTypes=["text","character","char"],t.TextDrawer=class{getSidesCount(){return 12}async init(e){const n=e.actualOptions;if(t.validTypes.find((e=>(0,i.isInArray)(e,n.particles.shape.type)))){const e=t.validTypes.map((e=>n.particles.shape.options[e])).find((e=>!!e));if(e instanceof Array){const t=[];for(const n of e)t.push((0,i.loadFont)(n));await Promise.allSettled(t)}else void 0!==e&&await(0,i.loadFont)(e)}}draw(e,t,n,o){var r,a,s;const l=t.shapeData;if(void 0===l)return;const c=l.value;if(void 0===c)return;const u=t;void 0===u.text&&(u.text=c instanceof Array?(0,i.itemFromArray)(c,t.randomIndexData):c);const d=u.text,h=null!==(r=l.style)&&void 0!==r?r:"",f=null!==(a=l.weight)&&void 0!==a?a:"400",p=2*Math.round(n),v=null!==(s=l.font)&&void 0!==s?s:"Verdana",y=t.fill,g=d.length*n/2;e.font=`${h} ${f} ${p}px "${v}"`;const m={x:-g,y:n/2};e.globalAlpha=o,y?e.fillText(d,m.x,m.y):e.strokeText(d,m.x,m.y),e.globalAlpha=1}}},2987:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadTextShape=void 0;const i=n(5472);t.loadTextShape=async function(e){const t=new i.TextDrawer;for(const n of i.validTypes)await e.addShape(n,t)}},3063:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3798:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4728:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},899:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},8710:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9877:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},2983:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AngleUpdater=void 0;const i=n(7266);t.AngleUpdater=class{constructor(e){this.container=e}init(e){const t=e.options.rotate;e.rotate={enable:t.animation.enable,value:(0,i.getRangeValue)(t.value)*Math.PI/180};let n=t.direction;switch("random"===n&&(n=Math.floor(2*Math.random())>0?"counter-clockwise":"clockwise"),n){case"counter-clockwise":case"counterClockwise":e.rotate.status=1;break;case"clockwise":e.rotate.status=0}const o=e.options.rotate.animation;o.enable&&(e.rotate.velocity=(0,i.getRangeValue)(o.speed)/360*this.container.retina.reduceFactor,o.sync||(e.rotate.velocity*=Math.random()))}isEnabled(e){const t=e.options.rotate,n=t.animation;return!e.destroyed&&!e.spawning&&!t.path&&n.enable}update(e,t){this.isEnabled(e)&&function(e,t){var n;const i=e.rotate;if(!i)return;const o=e.options.rotate.animation,r=(null!==(n=i.velocity)&&void 0!==n?n:0)*t.factor,a=2*Math.PI;o.enable&&(0===i.status?(i.value+=r,i.value>a&&(i.value-=a)):(i.value-=r,i.value<0&&(i.value+=a)))}(e,t)}}},9085:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadAngleUpdater=void 0;const i=n(2983);t.loadAngleUpdater=async function(e){await e.addParticleUpdater("angle",(e=>new i.AngleUpdater(e)))}},2724:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorUpdater=void 0;const i=n(7129),o=n(7266);function r(e,t,n,i,r){var a;const s=t;if(!s||!n.enable)return;const l=(0,o.randomInRange)(n.offset),c=(null!==(a=t.velocity)&&void 0!==a?a:0)*e.factor+3.6*l;r&&0!==s.status?(s.value-=c,s.value<0&&(s.status=0,s.value+=s.value)):(s.value+=c,r&&s.value>i&&(s.status=1,s.value-=s.value%i)),s.value>i&&(s.value%=i)}t.ColorUpdater=class{constructor(e){this.container=e}init(e){const t=(0,i.colorToHsl)(e.options.color,e.id,e.options.reduceDuplicates);t&&(e.color=(0,i.getHslAnimationFromHsl)(t,e.options.color.animation,this.container.retina.reduceFactor))}isEnabled(e){var t,n,i;const o=e.options.color.animation;return!e.destroyed&&!e.spawning&&(void 0!==(null===(t=e.color)||void 0===t?void 0:t.h.value)&&o.h.enable||void 0!==(null===(n=e.color)||void 0===n?void 0:n.s.value)&&o.s.enable||void 0!==(null===(i=e.color)||void 0===i?void 0:i.l.value)&&o.l.enable)}update(e,t){!function(e,t){var n,i,o;const a=e.options.color.animation;void 0!==(null===(n=e.color)||void 0===n?void 0:n.h)&&r(t,e.color.h,a.h,360,!1),void 0!==(null===(i=e.color)||void 0===i?void 0:i.s)&&r(t,e.color.s,a.s,100,!0),void 0!==(null===(o=e.color)||void 0===o?void 0:o.l)&&r(t,e.color.l,a.l,100,!0)}(e,t)}}},3058:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadColorUpdater=void 0;const i=n(2724);t.loadColorUpdater=async function(e){await e.addParticleUpdater("color",(e=>new i.ColorUpdater(e)))}},3847:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LifeUpdater=void 0;const i=n(7266);t.LifeUpdater=class{constructor(e){this.container=e}init(){}isEnabled(e){return!e.destroyed}update(e,t){if(!this.isEnabled(e))return;const n=e.life;let o=!1;if(e.spawning){if(n.delayTime+=t.value,!(n.delayTime>=e.life.delay))return;o=!0,e.spawning=!1,n.delayTime=0,n.time=0}if(-1===n.duration)return;if(e.spawning)return;if(o?n.time=0:n.time+=t.value,n.time<n.duration)return;if(n.time=0,e.life.count>0&&e.life.count--,0===e.life.count)return void e.destroy();const r=this.container.canvas.size,a=(0,i.setRangeValue)(0,r.width),s=(0,i.setRangeValue)(0,r.width);e.position.x=(0,i.randomInRange)(a),e.position.y=(0,i.randomInRange)(s),e.spawning=!0,n.delayTime=0,n.time=0,e.reset();const l=e.options.life;n.delay=1e3*(0,i.getRangeValue)(l.delay.value),n.duration=1e3*(0,i.getRangeValue)(l.duration.value)}}},3101:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadLifeUpdater=void 0;const i=n(3847);t.loadLifeUpdater=async function(e){await e.addParticleUpdater("life",(e=>new i.LifeUpdater(e)))}},9793:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OpacityUpdater=void 0;const i=n(7266);t.OpacityUpdater=class{constructor(e){this.container=e}init(e){const t=e.options.opacity;e.opacity={enable:t.animation.enable,max:(0,i.getRangeMax)(t.value),min:(0,i.getRangeMin)(t.value),value:(0,i.getRangeValue)(t.value),loops:0,maxLoops:(0,i.getRangeValue)(t.animation.count)};const n=t.animation;if(n.enable){e.opacity.status=0;const o=t.value;switch(e.opacity.min=(0,i.getRangeMin)(o),e.opacity.max=(0,i.getRangeMax)(o),n.startValue){case"min":e.opacity.value=e.opacity.min,e.opacity.status=0;break;case"random":e.opacity.value=(0,i.randomInRange)(e.opacity),e.opacity.status=Math.random()>=.5?0:1;break;default:e.opacity.value=e.opacity.max,e.opacity.status=1}e.opacity.velocity=(0,i.getRangeValue)(n.speed)/100*this.container.retina.reduceFactor,n.sync||(e.opacity.velocity*=Math.random())}}isEnabled(e){var t,n,i,o;return!e.destroyed&&!e.spawning&&!!e.opacity&&e.opacity.enable&&((null!==(t=e.opacity.maxLoops)&&void 0!==t?t:0)<=0||(null!==(n=e.opacity.maxLoops)&&void 0!==n?n:0)>0&&(null!==(i=e.opacity.loops)&&void 0!==i?i:0)<(null!==(o=e.opacity.maxLoops)&&void 0!==o?o:0))}update(e,t){this.isEnabled(e)&&function(e,t){var n,o,r,a,s;if(!e.opacity)return;const l=e.opacity.min,c=e.opacity.max;if(!(e.destroyed||!e.opacity.enable||(null!==(n=e.opacity.maxLoops)&&void 0!==n?n:0)>0&&(null!==(o=e.opacity.loops)&&void 0!==o?o:0)>(null!==(r=e.opacity.maxLoops)&&void 0!==r?r:0))){switch(e.opacity.status){case 0:e.opacity.value>=c?(e.opacity.status=1,e.opacity.loops||(e.opacity.loops=0),e.opacity.loops++):e.opacity.value+=(null!==(a=e.opacity.velocity)&&void 0!==a?a:0)*t.factor;break;case 1:e.opacity.value<=l?(e.opacity.status=0,e.opacity.loops||(e.opacity.loops=0),e.opacity.loops++):e.opacity.value-=(null!==(s=e.opacity.velocity)&&void 0!==s?s:0)*t.factor}!function(e,t,n,i){switch(e.options.opacity.animation.destroy){case"max":t>=i&&e.destroy();break;case"min":t<=n&&e.destroy()}}(e,e.opacity.value,l,c),e.destroyed||(e.opacity.value=(0,i.clamp)(e.opacity.value,l,c))}}(e,t)}}},9113:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadOpacityUpdater=void 0;const i=n(9793);t.loadOpacityUpdater=async function(e){await e.addParticleUpdater("opacity",(e=>new i.OpacityUpdater(e)))}},3984:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OutOfCanvasUpdater=void 0;const i=n(2422),o=n(4351);t.OutOfCanvasUpdater=class{constructor(e){this.container=e}init(){}isEnabled(e){return!e.destroyed&&!e.spawning}update(e,t){var n,i,o,r;const a=e.options.move.outModes;this.updateOutMode(e,t,null!==(n=a.bottom)&&void 0!==n?n:a.default,"bottom"),this.updateOutMode(e,t,null!==(i=a.left)&&void 0!==i?i:a.default,"left"),this.updateOutMode(e,t,null!==(o=a.right)&&void 0!==o?o:a.default,"right"),this.updateOutMode(e,t,null!==(r=a.top)&&void 0!==r?r:a.default,"top")}updateOutMode(e,t,n,i){switch(n){case"bounce":case"bounce-vertical":case"bounce-horizontal":case"bounceVertical":case"bounceHorizontal":case"split":this.bounce(e,t,i,n);break;case"destroy":this.destroy(e,i);break;case"out":this.out(e,i);break;default:this.none(e,i)}}destroy(e,t){const n=this.container;(0,o.isPointInside)(e.position,n.canvas.size,e.getRadius(),t)||n.particles.remove(e,void 0,!0)}out(e,t){const n=this.container;if((0,o.isPointInside)(e.position,n.canvas.size,e.getRadius(),t))return;const i=e.options.move.warp,r=n.canvas.size,a={bottom:r.height+e.getRadius()+e.offset.y,left:-e.getRadius()-e.offset.x,right:r.width+e.getRadius()+e.offset.x,top:-e.getRadius()-e.offset.y},s=e.getRadius(),l=(0,o.calculateBounds)(e.position,s);"right"===t&&l.left>r.width+e.offset.x?(e.position.x=a.left,e.initialPosition.x=e.position.x,i||(e.position.y=Math.random()*r.height,e.initialPosition.y=e.position.y)):"left"===t&&l.right<-e.offset.x&&(e.position.x=a.right,e.initialPosition.x=e.position.x,i||(e.position.y=Math.random()*r.height,e.initialPosition.y=e.position.y)),"bottom"===t&&l.top>r.height+e.offset.y?(i||(e.position.x=Math.random()*r.width,e.initialPosition.x=e.position.x),e.position.y=a.top,e.initialPosition.y=e.position.y):"top"===t&&l.bottom<-e.offset.y&&(i||(e.position.x=Math.random()*r.width,e.initialPosition.x=e.position.x),e.position.y=a.bottom,e.initialPosition.y=e.position.y)}bounce(e,t,n,r){const a=this.container;let s=!1;for(const[,i]of a.plugins)if(void 0!==i.particleBounce&&(s=i.particleBounce(e,t,n)),s)break;if(s)return;const l=e.getPosition(),c=e.offset,u=e.getRadius(),d=(0,o.calculateBounds)(l,u),h=a.canvas.size;(0,i.bounceHorizontal)({particle:e,outMode:r,direction:n,bounds:d,canvasSize:h,offset:c,size:u}),(0,i.bounceVertical)({particle:e,outMode:r,direction:n,bounds:d,canvasSize:h,offset:c,size:u})}none(e,t){if(e.options.move.distance.horizontal&&("left"===t||"right"===t)||e.options.move.distance.vertical&&("top"===t||"bottom"===t))return;const n=e.options.move.gravity,i=this.container,r=i.canvas.size,a=e.getRadius();if(n.enable){const o=e.position;(!n.inverse&&o.y>r.height+a&&"bottom"===t||n.inverse&&o.y<-a&&"top"===t)&&i.particles.remove(e)}else{if(e.velocity.y>0&&e.position.y<=r.height+a||e.velocity.y<0&&e.position.y>=-a||e.velocity.x>0&&e.position.x<=r.width+a||e.velocity.x<0&&e.position.x>=-a)return;(0,o.isPointInside)(e.position,i.canvas.size,a,t)||i.particles.remove(e)}}}},2422:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bounceVertical=t.bounceHorizontal=void 0;const i=n(7266);t.bounceHorizontal=function(e){if("bounce"!==e.outMode&&"bounce-horizontal"!==e.outMode&&"bounceHorizontal"!==e.outMode&&"split"!==e.outMode)return;const t=e.particle.velocity.x;let n=!1;if("right"===e.direction&&e.bounds.right>=e.canvasSize.width&&t>0||"left"===e.direction&&e.bounds.left<=0&&t<0){const t=(0,i.getRangeValue)(e.particle.options.bounce.horizontal.value);e.particle.velocity.x*=-t,n=!0}if(!n)return;const o=e.offset.x+e.size;e.bounds.right>=e.canvasSize.width?e.particle.position.x=e.canvasSize.width-o:e.bounds.left<=0&&(e.particle.position.x=o),"split"===e.outMode&&e.particle.destroy()},t.bounceVertical=function(e){if("bounce"===e.outMode||"bounce-vertical"===e.outMode||"bounceVertical"===e.outMode||"split"===e.outMode){const t=e.particle.velocity.y;let n=!1;if("bottom"===e.direction&&e.bounds.bottom>=e.canvasSize.height&&t>0||"top"===e.direction&&e.bounds.top<=0&&t<0){const t=(0,i.getRangeValue)(e.particle.options.bounce.vertical.value);e.particle.velocity.y*=-t,n=!0}if(!n)return;const o=e.offset.y+e.size;e.bounds.bottom>=e.canvasSize.height?e.particle.position.y=e.canvasSize.height-o:e.bounds.top<=0&&(e.particle.position.y=o),"split"===e.outMode&&e.particle.destroy()}}},7813:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadOutModesUpdater=void 0;const i=n(3984);t.loadOutModesUpdater=async function(e){await e.addParticleUpdater("outModes",(e=>new i.OutOfCanvasUpdater(e)))}},5173:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RollUpdater=void 0;const i=n(7129),o=n(7266);t.RollUpdater=class{init(e){const t=e.options.roll;if(t.enable)if(e.roll={angle:Math.random()*Math.PI*2,speed:(0,o.getRangeValue)(t.speed)/360},t.backColor)e.backColor=(0,i.colorToHsl)(t.backColor);else if(t.darken.enable&&t.enlighten.enable){const n=Math.random()>=.5?"darken":"enlighten";e.roll.alter={type:n,value:(0,o.getRangeValue)("darken"===n?t.darken.value:t.enlighten.value)}}else t.darken.enable?e.roll.alter={type:"darken",value:(0,o.getRangeValue)(t.darken.value)}:t.enlighten.enable&&(e.roll.alter={type:"enlighten",value:(0,o.getRangeValue)(t.enlighten.value)});else e.roll={angle:0,speed:0}}isEnabled(e){const t=e.options.roll;return!e.destroyed&&!e.spawning&&t.enable}update(e,t){this.isEnabled(e)&&function(e,t){const n=e.options.roll;if(!e.roll||!n.enable)return;const i=e.roll.speed*t.factor,o=2*Math.PI;e.roll.angle+=i,e.roll.angle>o&&(e.roll.angle-=o)}(e,t)}}},1925:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadRollUpdater=void 0;const i=n(5173);t.loadRollUpdater=async function(e){await e.addParticleUpdater("roll",(()=>new i.RollUpdater))}},3233:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SizeUpdater=void 0;const i=n(7266);t.SizeUpdater=class{init(){}isEnabled(e){var t,n,i,o;return!e.destroyed&&!e.spawning&&e.size.enable&&((null!==(t=e.size.maxLoops)&&void 0!==t?t:0)<=0||(null!==(n=e.size.maxLoops)&&void 0!==n?n:0)>0&&(null!==(i=e.size.loops)&&void 0!==i?i:0)<(null!==(o=e.size.maxLoops)&&void 0!==o?o:0))}update(e,t){this.isEnabled(e)&&function(e,t){var n,o,r,a;const s=(null!==(n=e.size.velocity)&&void 0!==n?n:0)*t.factor,l=e.size.min,c=e.size.max;if(!(e.destroyed||!e.size.enable||(null!==(o=e.size.maxLoops)&&void 0!==o?o:0)>0&&(null!==(r=e.size.loops)&&void 0!==r?r:0)>(null!==(a=e.size.maxLoops)&&void 0!==a?a:0))){switch(e.size.status){case 0:e.size.value>=c?(e.size.status=1,e.size.loops||(e.size.loops=0),e.size.loops++):e.size.value+=s;break;case 1:e.size.value<=l?(e.size.status=0,e.size.loops||(e.size.loops=0),e.size.loops++):e.size.value-=s}!function(e,t,n,i){switch(e.options.size.animation.destroy){case"max":t>=i&&e.destroy();break;case"min":t<=n&&e.destroy()}}(e,e.size.value,l,c),e.destroyed||(e.size.value=(0,i.clamp)(e.size.value,l,c))}}(e,t)}}},7861:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadSizeUpdater=void 0;const i=n(3233);t.loadSizeUpdater=async function(e){await e.addParticleUpdater("size",(()=>new i.SizeUpdater))}},1871:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StrokeColorUpdater=void 0;const i=n(7129),o=n(4351),r=n(7266);function a(e,t,n,i,o){var a;const s=t;if(!s||!s.enable)return;const l=(0,r.randomInRange)(n.offset),c=(null!==(a=t.velocity)&&void 0!==a?a:0)*e.factor+3.6*l;o&&0!==s.status?(s.value-=c,s.value<0&&(s.status=0,s.value+=s.value)):(s.value+=c,o&&s.value>i&&(s.status=1,s.value-=s.value%i)),s.value>i&&(s.value%=i)}t.StrokeColorUpdater=class{constructor(e){this.container=e}init(e){var t,n;const r=this.container;e.stroke=e.options.stroke instanceof Array?(0,o.itemFromArray)(e.options.stroke,e.id,e.options.reduceDuplicates):e.options.stroke,e.strokeWidth=e.stroke.width*r.retina.pixelRatio;const a=null!==(t=(0,i.colorToHsl)(e.stroke.color))&&void 0!==t?t:e.getFillColor();a&&(e.strokeColor=(0,i.getHslAnimationFromHsl)(a,null===(n=e.stroke.color)||void 0===n?void 0:n.animation,r.retina.reduceFactor))}isEnabled(e){var t,n,i,o;const r=null===(t=e.stroke)||void 0===t?void 0:t.color;return!e.destroyed&&!e.spawning&&!!r&&(void 0!==(null===(n=e.strokeColor)||void 0===n?void 0:n.h.value)&&r.animation.h.enable||void 0!==(null===(i=e.strokeColor)||void 0===i?void 0:i.s.value)&&r.animation.s.enable||void 0!==(null===(o=e.strokeColor)||void 0===o?void 0:o.l.value)&&r.animation.l.enable)}update(e,t){this.isEnabled(e)&&function(e,t){var n,i,o,r,s,l,c,u,d,h;if(!(null===(n=e.stroke)||void 0===n?void 0:n.color))return;const f=e.stroke.color.animation,p=null!==(o=null===(i=e.strokeColor)||void 0===i?void 0:i.h)&&void 0!==o?o:null===(r=e.color)||void 0===r?void 0:r.h;p&&a(t,p,f.h,360,!1);const v=null!==(l=null===(s=e.strokeColor)||void 0===s?void 0:s.s)&&void 0!==l?l:null===(c=e.color)||void 0===c?void 0:c.s;v&&a(t,v,f.s,100,!0);const y=null!==(d=null===(u=e.strokeColor)||void 0===u?void 0:u.l)&&void 0!==d?d:null===(h=e.color)||void 0===h?void 0:h.l;y&&a(t,y,f.l,100,!0)}(e,t)}}},9988:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadStrokeColorUpdater=void 0;const i=n(1871);t.loadStrokeColorUpdater=async function(e){await e.addParticleUpdater("strokeColor",(e=>new i.StrokeColorUpdater(e)))}},4146:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TiltUpdater=void 0;const i=n(7266);t.TiltUpdater=class{constructor(e){this.container=e}init(e){const t=e.options.tilt;e.tilt={enable:t.enable,value:(0,i.getRangeValue)(t.value)*Math.PI/180,sinDirection:Math.random()>=.5?1:-1,cosDirection:Math.random()>=.5?1:-1};let n=t.direction;switch("random"===n&&(n=Math.floor(2*Math.random())>0?"counter-clockwise":"clockwise"),n){case"counter-clockwise":case"counterClockwise":e.tilt.status=1;break;case"clockwise":e.tilt.status=0}const o=e.options.tilt.animation;o.enable&&(e.tilt.velocity=(0,i.getRangeValue)(o.speed)/360*this.container.retina.reduceFactor,o.sync||(e.tilt.velocity*=Math.random()))}isEnabled(e){const t=e.options.tilt.animation;return!e.destroyed&&!e.spawning&&t.enable}update(e,t){this.isEnabled(e)&&function(e,t){var n;if(!e.tilt)return;const i=e.options.tilt.animation,o=(null!==(n=e.tilt.velocity)&&void 0!==n?n:0)*t.factor,r=2*Math.PI;i.enable&&(0===e.tilt.status?(e.tilt.value+=o,e.tilt.value>r&&(e.tilt.value-=r)):(e.tilt.value-=o,e.tilt.value<0&&(e.tilt.value+=r)))}(e,t)}}},8028:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadTiltUpdater=void 0;const i=n(4146);t.loadTiltUpdater=async function(e){await e.addParticleUpdater("tilt",(e=>new i.TiltUpdater(e)))}},7270:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TwinkleUpdater=void 0;const i=n(7129),o=n(7266);t.TwinkleUpdater=class{getColorStyles(e,t,n,r){const a=e.options.twinkle.particles,s=a.enable&&Math.random()<a.frequency,l=e.options.zIndex,c=(1-e.zIndexFactor)**l.opacityRate,u=s?(0,o.getRangeValue)(a.opacity)*c:r,d=(0,i.colorToHsl)(a.color),h=d?(0,i.getStyleFromHsl)(d,u):void 0,f={},p=s&&h;return f.fill=p?h:void 0,f.stroke=p?h:void 0,f}init(){}isEnabled(e){return e.options.twinkle.particles.enable}update(){}}},4474:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadTwinkleUpdater=void 0;const i=n(7270);t.loadTwinkleUpdater=async function(e){await e.addParticleUpdater("twinkle",(()=>new i.TwinkleUpdater))}},1243:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WobbleUpdater=void 0;const i=n(7266);t.WobbleUpdater=class{constructor(e){this.container=e}init(e){const t=e.options.wobble;t.enable?e.wobble={angle:Math.random()*Math.PI*2,speed:(0,i.getRangeValue)(t.speed)/360}:e.wobble={angle:0,speed:0},e.retina.wobbleDistance=(0,i.getRangeValue)(t.distance)*this.container.retina.pixelRatio}isEnabled(e){return!e.destroyed&&!e.spawning&&e.options.wobble.enable}update(e,t){this.isEnabled(e)&&function(e,t){var n;if(!e.options.wobble.enable||!e.wobble)return;const i=e.wobble.speed*t.factor,o=(null!==(n=e.retina.wobbleDistance)&&void 0!==n?n:0)*t.factor/(1e3/60),r=2*Math.PI;e.wobble.angle+=i,e.wobble.angle>r&&(e.wobble.angle-=r),e.position.x+=o*Math.cos(e.wobble.angle),e.position.y+=o*Math.abs(Math.sin(e.wobble.angle))}(e,t)}}},3634:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadWobbleUpdater=void 0;const i=n(1243);t.loadWobbleUpdater=async function(e){await e.addParticleUpdater("wobble",(e=>new i.WobbleUpdater(e)))}},1072:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.alterHsl=t.drawEllipse=t.drawParticlePlugin=t.drawPlugin=t.drawShapeAfterEffect=t.drawShape=t.drawParticle=t.drawGrabLine=t.gradient=t.drawConnectLine=t.drawLinkTriangle=t.drawLinkLine=t.clear=t.paintBase=void 0;const i=n(7129),o=n(7266);function r(e,t,n){e.beginPath(),e.moveTo(t.x,t.y),e.lineTo(n.x,n.y),e.closePath()}function a(e,t,n,i,o,r){if(!n.shape)return;const a=e.drawers.get(n.shape);a&&a.draw(t,n,i,o,r,e.retina.pixelRatio)}function s(e,t,n,i,o,r){if(!n.shape)return;const a=e.drawers.get(n.shape);(null==a?void 0:a.afterEffect)&&a.afterEffect(t,n,i,o,r,e.retina.pixelRatio)}t.paintBase=function(e,t,n){e.save(),e.fillStyle=null!=n?n:"rgba(0,0,0,0)",e.fillRect(0,0,t.width,t.height),e.restore()},t.clear=function(e,t){e.clearRect(0,0,t.width,t.height)},t.drawLinkLine=function(e,t,n,a,s,l,c,u,d,h,f,p){let v=!1;if((0,o.getDistance)(n,a)<=s)r(e,n,a),v=!0;else if(c){let t,i;const c={x:a.x-l.width,y:a.y},u=(0,o.getDistances)(n,c);if(u.distance<=s){const e=n.y-u.dy/u.dx*n.x;t={x:0,y:e},i={x:l.width,y:e}}else{const e={x:a.x,y:a.y-l.height},r=(0,o.getDistances)(n,e);if(r.distance<=s){const e=-(n.y-r.dy/r.dx*n.x)/(r.dy/r.dx);t={x:e,y:0},i={x:e,y:l.height}}else{const e={x:a.x-l.width,y:a.y-l.height},r=(0,o.getDistances)(n,e);if(r.distance<=s){const e=n.y-r.dy/r.dx*n.x;t={x:-e/(r.dy/r.dx),y:e},i={x:t.x+l.width,y:t.y+l.height}}}}t&&i&&(r(e,n,t),r(e,a,i),v=!0)}if(v){if(e.lineWidth=t,u&&(e.globalCompositeOperation=d),e.strokeStyle=(0,i.getStyleFromRgb)(h,f),p.enable){const t=(0,i.colorToRgb)(p.color);t&&(e.shadowBlur=p.blur,e.shadowColor=(0,i.getStyleFromRgb)(t))}e.stroke()}},t.drawLinkTriangle=function(e,t,n,o,r,a,s,l){!function(e,t,n,i){e.beginPath(),e.moveTo(t.x,t.y),e.lineTo(n.x,n.y),e.lineTo(i.x,i.y),e.closePath()}(e,t,n,o),r&&(e.globalCompositeOperation=a),e.fillStyle=(0,i.getStyleFromRgb)(s,l),e.fill()},t.drawConnectLine=function(e,t,n,i,o){e.save(),r(e,i,o),e.lineWidth=t,e.strokeStyle=n,e.stroke(),e.restore()},t.gradient=function(e,t,n,o){const r=Math.floor(n.getRadius()/t.getRadius()),a=t.getFillColor(),s=n.getFillColor();if(!a||!s)return;const l=t.getPosition(),c=n.getPosition(),u=(0,i.colorMix)(a,s,t.getRadius(),n.getRadius()),d=e.createLinearGradient(l.x,l.y,c.x,c.y);return d.addColorStop(0,(0,i.getStyleFromHsl)(a,o)),d.addColorStop(r>1?1:r,(0,i.getStyleFromRgb)(u,o)),d.addColorStop(1,(0,i.getStyleFromHsl)(s,o)),d},t.drawGrabLine=function(e,t,n,o,a,s){e.save(),r(e,n,o),e.strokeStyle=(0,i.getStyleFromRgb)(a,s),e.lineWidth=t,e.stroke(),e.restore()},t.drawParticle=function(e,t,n,o,r,l,c,u,d,h){var f,p,v,y;const g=n.getPosition(),m=n.options.tilt,b=n.options.roll;if(t.save(),m.enable||b.enable){const e=b.enable&&n.roll,i=m.enable&&n.tilt,o=e&&("horizontal"===b.mode||"both"===b.mode),r=e&&("vertical"===b.mode||"both"===b.mode);t.setTransform(o?Math.cos(n.roll.angle):1,i?Math.cos(n.tilt.value)*n.tilt.cosDirection:0,i?Math.sin(n.tilt.value)*n.tilt.sinDirection:0,r?Math.sin(n.roll.angle):1,g.x,g.y)}else t.translate(g.x,g.y);t.beginPath();const w=(null!==(p=null===(f=n.rotate)||void 0===f?void 0:f.value)&&void 0!==p?p:0)+(n.options.rotate.path?n.velocity.angle:0);0!==w&&t.rotate(w),l&&(t.globalCompositeOperation=c);const S=n.shadowColor;h.enable&&S&&(t.shadowBlur=h.blur,t.shadowColor=(0,i.getStyleFromRgb)(S),t.shadowOffsetX=h.offset.x,t.shadowOffsetY=h.offset.y),r.fill&&(t.fillStyle=r.fill);const _=n.stroke;t.lineWidth=null!==(v=n.strokeWidth)&&void 0!==v?v:0,r.stroke&&(t.strokeStyle=r.stroke),a(e,t,n,u,d,o),(null!==(y=null==_?void 0:_.width)&&void 0!==y?y:0)>0&&t.stroke(),n.close&&t.closePath(),n.fill&&t.fill(),t.restore(),t.save(),m.enable&&n.tilt?t.setTransform(1,Math.cos(n.tilt.value)*n.tilt.cosDirection,Math.sin(n.tilt.value)*n.tilt.sinDirection,1,g.x,g.y):t.translate(g.x,g.y),0!==w&&t.rotate(w),l&&(t.globalCompositeOperation=c),s(e,t,n,u,d,o),t.restore()},t.drawShape=a,t.drawShapeAfterEffect=s,t.drawPlugin=function(e,t,n){t.draw&&(e.save(),t.draw(e,n),e.restore())},t.drawParticlePlugin=function(e,t,n,i){t.drawParticle&&(e.save(),t.drawParticle(e,n,i),e.restore())},t.drawEllipse=function(e,t,n,o,r,a,s,l,c){if(a<=0)return;const u=t.getPosition();n&&(e.strokeStyle=(0,i.getStyleFromHsl)(n,r)),e.lineWidth=a;const d=s*Math.PI/180;e.beginPath(),e.ellipse(u.x,u.y,o/2,2*o,d,l,c),e.stroke()},t.alterHsl=function(e,t,n){return{h:e.h,s:e.s,l:e.l+("darken"===t?-1:1)*n}}},7129:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getHslAnimationFromHsl=t.getHslFromAnimation=t.getLinkRandomColor=t.getLinkColor=t.colorMix=t.getStyleFromHsv=t.getStyleFromHsl=t.getStyleFromRgb=t.getRandomRgbColor=t.rgbaToHsva=t.rgbToHsv=t.hsvaToRgba=t.hsvToRgb=t.hsvaToHsla=t.hsvToHsl=t.hslaToHsva=t.hslToHsv=t.hslaToRgba=t.hslToRgb=t.stringToRgb=t.stringToAlpha=t.rgbToHsl=t.colorToHsl=t.colorToRgb=void 0;const i=n(7266),o=n(6715),r=n(4351);function a(e,t,n){let i=n;return i<0&&(i+=1),i>1&&(i-=1),i<1/6?e+6*(t-e)*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e}function s(e){if(e.startsWith("rgb")){const t=/rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([\d.]+)\s*)?\)/i.exec(e);return t?{a:t.length>4?parseFloat(t[5]):1,b:parseInt(t[3],10),g:parseInt(t[2],10),r:parseInt(t[1],10)}:void 0}if(e.startsWith("hsl")){const t=/hsla?\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i.exec(e);return t?h({a:t.length>4?parseFloat(t[5]):1,h:parseInt(t[1],10),l:parseInt(t[3],10),s:parseInt(t[2],10)}):void 0}if(e.startsWith("hsv")){const t=/hsva?\(\s*(\d+)°\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i.exec(e);return t?y({a:t.length>4?parseFloat(t[5]):1,h:parseInt(t[1],10),s:parseInt(t[2],10),v:parseInt(t[3],10)}):void 0}{const t=/^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i,n=e.replace(t,((e,t,n,i,o)=>t+t+n+n+i+i+(void 0!==o?o+o:""))),i=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(n);return i?{a:void 0!==i[4]?parseInt(i[4],16)/255:1,b:parseInt(i[3],16),g:parseInt(i[2],16),r:parseInt(i[1],16)}:void 0}}function l(e,t,n=!0){var i,a,s;if(void 0===e)return;const c="string"==typeof e?{value:e}:e;let h;if("string"==typeof c.value)h=c.value===o.Constants.randomColorValue?m():u(c.value);else if(c.value instanceof Array)h=l({value:(0,r.itemFromArray)(c.value,t,n)});else{const e=c.value,t=null!==(i=e.rgb)&&void 0!==i?i:c.value;if(void 0!==t.r)h=t;else{const t=null!==(a=e.hsl)&&void 0!==a?a:c.value;if(void 0!==t.h&&void 0!==t.l)h=d(t);else{const t=null!==(s=e.hsv)&&void 0!==s?s:c.value;void 0!==t.h&&void 0!==t.v&&(h=v(t))}}}return h}function c(e){const t=e.r/255,n=e.g/255,i=e.b/255,o=Math.max(t,n,i),r=Math.min(t,n,i),a={h:0,l:(o+r)/2,s:0};return o!==r&&(a.s=a.l<.5?(o-r)/(o+r):(o-r)/(2-o-r),a.h=t===o?(n-i)/(o-r):a.h=n===o?2+(i-t)/(o-r):4+(t-n)/(o-r)),a.l*=100,a.s*=100,a.h*=60,a.h<0&&(a.h+=360),a}function u(e){return s(e)}function d(e){const t={b:0,g:0,r:0},n={h:e.h/360,l:e.l/100,s:e.s/100};if(0===n.s)t.b=n.l,t.g=n.l,t.r=n.l;else{const e=n.l<.5?n.l*(1+n.s):n.l+n.s-n.l*n.s,i=2*n.l-e;t.r=a(i,e,n.h+1/3),t.g=a(i,e,n.h),t.b=a(i,e,n.h-1/3)}return t.r=Math.floor(255*t.r),t.g=Math.floor(255*t.g),t.b=Math.floor(255*t.b),t}function h(e){const t=d(e);return{a:e.a,b:t.b,g:t.g,r:t.r}}function f(e){const t=e.l/100,n=t+e.s/100*Math.min(t,1-t),i=n?2*(1-t/n):0;return{h:e.h,s:100*i,v:100*n}}function p(e){const t=e.v/100,n=t*(1-e.s/100/2),i=0===n||1===n?0:(t-n)/Math.min(n,1-n);return{h:e.h,l:100*n,s:100*i}}function v(e){const t={b:0,g:0,r:0},n=e.h/60,i=e.s/100,o=e.v/100,r=o*i,a=r*(1-Math.abs(n%2-1));let s;if(n>=0&&n<=1?s={r:r,g:a,b:0}:n>1&&n<=2?s={r:a,g:r,b:0}:n>2&&n<=3?s={r:0,g:r,b:a}:n>3&&n<=4?s={r:0,g:a,b:r}:n>4&&n<=5?s={r:a,g:0,b:r}:n>5&&n<=6&&(s={r:r,g:0,b:a}),s){const e=o-r;t.r=Math.floor(255*(s.r+e)),t.g=Math.floor(255*(s.g+e)),t.b=Math.floor(255*(s.b+e))}return t}function y(e){const t=v(e);return{a:e.a,b:t.b,g:t.g,r:t.r}}function g(e){const t={r:e.r/255,g:e.g/255,b:e.b/255},n=Math.max(t.r,t.g,t.b),i=n-Math.min(t.r,t.g,t.b);let o=0;return n===t.r?o=(t.g-t.b)/i*60:n===t.g?o=60*(2+(t.b-t.r)/i):n===t.b&&(o=60*(4+(t.r-t.g)/i)),{h:o,s:100*(n?i/n:0),v:100*n}}function m(e){const t=null!=e?e:0;return{b:Math.floor((0,i.randomInRange)((0,i.setRangeValue)(t,256))),g:Math.floor((0,i.randomInRange)((0,i.setRangeValue)(t,256))),r:Math.floor((0,i.randomInRange)((0,i.setRangeValue)(t,256)))}}function b(e,t){return`hsla(${e.h}, ${e.s}%, ${e.l}%, ${null!=t?t:1})`}function w(e,t,n,o){let r=e,a=t;return void 0===r.r&&(r=d(e)),void 0===a.r&&(a=d(t)),{b:(0,i.mix)(r.b,a.b,n,o),g:(0,i.mix)(r.g,a.g,n,o),r:(0,i.mix)(r.r,a.r,n,o)}}function S(e,t,n){if(e.enable=t.enable,e.enable){if(e.velocity=(0,i.getRangeValue)(t.speed)/100*n,t.sync)return;e.status=0,e.velocity*=Math.random(),e.value&&(e.value*=Math.random())}else e.velocity=0}t.colorToRgb=l,t.colorToHsl=function(e,t,n=!0){const i=l(e,t,n);return void 0!==i?c(i):void 0},t.rgbToHsl=c,t.stringToAlpha=function(e){var t;return null===(t=s(e))||void 0===t?void 0:t.a},t.stringToRgb=u,t.hslToRgb=d,t.hslaToRgba=h,t.hslToHsv=f,t.hslaToHsva=function(e){const t=f(e);return{a:e.a,h:t.h,s:t.s,v:t.v}},t.hsvToHsl=p,t.hsvaToHsla=function(e){const t=p(e);return{a:e.a,h:t.h,l:t.l,s:t.s}},t.hsvToRgb=v,t.hsvaToRgba=y,t.rgbToHsv=g,t.rgbaToHsva=function(e){const t=g(e);return{a:e.a,h:t.h,s:t.s,v:t.v}},t.getRandomRgbColor=m,t.getStyleFromRgb=function(e,t){return`rgba(${e.r}, ${e.g}, ${e.b}, ${null!=t?t:1})`},t.getStyleFromHsl=b,t.getStyleFromHsv=function(e,t){return b(p(e),t)},t.colorMix=w,t.getLinkColor=function(e,t,n){var i,r;if(n===o.Constants.randomColorValue)return m();if("mid"!==n)return n;{const n=null!==(i=e.getFillColor())&&void 0!==i?i:e.getStrokeColor(),o=null!==(r=null==t?void 0:t.getFillColor())&&void 0!==r?r:null==t?void 0:t.getStrokeColor();if(n&&o&&t)return w(n,o,e.getRadius(),t.getRadius());{const e=null!=n?n:o;if(e)return d(e)}}},t.getLinkRandomColor=function(e,t,n){const i="string"==typeof e?e:e.value;return i===o.Constants.randomColorValue?n?l({value:i}):t?o.Constants.randomColorValue:o.Constants.midColorValue:l({value:i})},t.getHslFromAnimation=function(e){return void 0!==e?{h:e.h.value,s:e.s.value,l:e.l.value}:void 0},t.getHslAnimationFromHsl=function(e,t,n){const i={h:{enable:!1,value:e.h},s:{enable:!1,value:e.s},l:{enable:!1,value:e.l}};return t&&(S(i.h,t.h,n),S(i.s,t.s,n),S(i.l,t.l,n)),i}},7266:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calcExactPositionOrRandomFromSizeRanged=t.calcExactPositionOrRandomFromSize=t.calcPositionOrRandomFromSizeRanged=t.calcPositionOrRandomFromSize=t.calcPositionFromSize=t.calcEasing=t.collisionVelocity=t.getParticleBaseVelocity=t.getParticleDirectionAngle=t.getDistance=t.getDistances=t.getValue=t.setRangeValue=t.getRangeMax=t.getRangeMin=t.getRangeValue=t.randomInRange=t.mix=t.clamp=void 0;const i=n(8061);function o(e){const t=s(e);let n=a(e);return t===n&&(n=0),Math.random()*(t-n)+n}function r(e){return"number"==typeof e?e:o(e)}function a(e){return"number"==typeof e?e:e.min}function s(e){return"number"==typeof e?e:e.max}function l(e,t){if(e===t||void 0===t&&"number"==typeof e)return e;const n=a(e),i=s(e);return void 0!==t?{min:Math.min(n,t),max:Math.max(i,t)}:l(n,i)}function c(e,t){const n=e.x-t.x,i=e.y-t.y;return{dx:n,dy:i,distance:Math.sqrt(n*n+i*i)}}function u(e){var t,n,i,o;return{x:(null!==(n=null===(t=e.position)||void 0===t?void 0:t.x)&&void 0!==n?n:100*Math.random())*e.size.width/100,y:(null!==(o=null===(i=e.position)||void 0===i?void 0:i.y)&&void 0!==o?o:100*Math.random())*e.size.height/100}}function d(e){var t,n,i,o;return{x:null!==(n=null===(t=e.position)||void 0===t?void 0:t.x)&&void 0!==n?n:Math.random()*e.size.width,y:null!==(o=null===(i=e.position)||void 0===i?void 0:i.y)&&void 0!==o?o:Math.random()*e.size.height}}t.clamp=function(e,t,n){return Math.min(Math.max(e,t),n)},t.mix=function(e,t,n,i){return Math.floor((e*n+t*i)/(n+i))},t.randomInRange=o,t.getRangeValue=r,t.getRangeMin=a,t.getRangeMax=s,t.setRangeValue=l,t.getValue=function(e){const t=e.random,{enable:n,minimumValue:i}="boolean"==typeof t?{enable:t,minimumValue:0}:t;return r(n?l(e.value,i):e.value)},t.getDistances=c,t.getDistance=function(e,t){return c(e,t).distance},t.getParticleDirectionAngle=function(e){if("number"==typeof e)return e*Math.PI/180;switch(e){case"top":return-Math.PI/2;case"top-right":return-Math.PI/4;case"right":return 0;case"bottom-right":return Math.PI/4;case"bottom":return Math.PI/2;case"bottom-left":return 3*Math.PI/4;case"left":return Math.PI;case"top-left":return-3*Math.PI/4;default:return Math.random()*Math.PI*2}},t.getParticleBaseVelocity=function(e){const t=i.Vector.origin;return t.length=1,t.angle=e,t},t.collisionVelocity=function(e,t,n,o){return i.Vector.create(e.x*(n-o)/(n+o)+2*t.x*o/(n+o),e.y)},t.calcEasing=function(e,t){switch(t){case"ease-out-quad":return 1-(1-e)**2;case"ease-out-cubic":return 1-(1-e)**3;case"ease-out-quart":return 1-(1-e)**4;case"ease-out-quint":return 1-(1-e)**5;case"ease-out-expo":return 1===e?1:1-Math.pow(2,-10*e);case"ease-out-sine":return Math.sin(e*Math.PI/2);case"ease-out-back":{const t=1.70158;return 1+(t+1)*Math.pow(e-1,3)+t*Math.pow(e-1,2)}case"ease-out-circ":return Math.sqrt(1-Math.pow(e-1,2));default:return e}},t.calcPositionFromSize=function(e){var t,n;return void 0!==(null===(t=e.position)||void 0===t?void 0:t.x)&&void 0!==(null===(n=e.position)||void 0===n?void 0:n.y)?{x:e.position.x*e.size.width/100,y:e.position.y*e.size.height/100}:void 0},t.calcPositionOrRandomFromSize=u,t.calcPositionOrRandomFromSizeRanged=function(e){var t,n;const i={x:void 0!==(null===(t=e.position)||void 0===t?void 0:t.x)?r(e.position.x):void 0,y:void 0!==(null===(n=e.position)||void 0===n?void 0:n.y)?r(e.position.y):void 0};return u({size:e.size,position:i})},t.calcExactPositionOrRandomFromSize=d,t.calcExactPositionOrRandomFromSizeRanged=function(e){var t,n;const i={x:void 0!==(null===(t=e.position)||void 0===t?void 0:t.x)?r(e.position.x):void 0,y:void 0!==(null===(n=e.position)||void 0===n?void 0:n.y)?r(e.position.y):void 0};return d({size:e.size,position:i})}},4351:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.rectBounce=t.circleBounce=t.circleBounceDataFromParticle=t.divMode=t.singleDivModeExecute=t.divModeExecute=t.isDivModeEnabled=t.deepExtend=t.calculateBounds=t.areBoundsInside=t.isPointInside=t.itemFromArray=t.arrayRandomIndex=t.loadFont=t.isInArray=t.cancelAnimation=t.animate=t.isSsr=void 0;const i=n(7266),o=n(8061);function r(e,t,n,i,o,r){const a={bounced:!1};return t.min<i.min||t.min>i.max||t.max<i.min||t.max>i.max||(e.max>=n.min&&e.max<=(n.max+n.min)/2&&o>0||e.min<=n.max&&e.min>(n.max+n.min)/2&&o<0)&&(a.velocity=o*-r,a.bounced=!0),a}function a(e,t){if(!(t instanceof Array))return e.matches(t);for(const n of t)if(e.matches(n))return!0;return!1}function s(){return"undefined"==typeof window||!window||void 0===window.document||!window.document}function l(e,t){return e===t||t instanceof Array&&t.indexOf(e)>-1}function c(e){return Math.floor(Math.random()*e.length)}function u(e,t,n){let i=!0;return n&&"bottom"!==n||(i=e.top<t.height),!i||n&&"left"!==n||(i=e.right>0),!i||n&&"right"!==n||(i=e.left<t.width),!i||n&&"top"!==n||(i=e.bottom>0),i}function d(e,t){return{bottom:e.y+t,left:e.x-t,right:e.x+t,top:e.y-t}}function h(e,t){const n=e.selectors;if(n instanceof Array)for(const i of n)t(i,e);else t(n,e)}t.isSsr=s,t.animate=function(){return s()?e=>setTimeout(e):e=>(window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.setTimeout)(e)},t.cancelAnimation=function(){return s()?e=>clearTimeout(e):e=>(window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||window.clearTimeout)(e)},t.isInArray=l,t.loadFont=async function(e){var t,n;try{await document.fonts.load(`${null!==(t=e.weight)&&void 0!==t?t:"400"} 36px '${null!==(n=e.font)&&void 0!==n?n:"Verdana"}'`)}catch(e){}},t.arrayRandomIndex=c,t.itemFromArray=function(e,t,n=!0){return e[void 0!==t&&n?t%e.length:c(e)]},t.isPointInside=function(e,t,n,i){return u(d(e,null!=n?n:0),t,i)},t.areBoundsInside=u,t.calculateBounds=d,t.deepExtend=function e(t,...n){for(const i of n){if(null==i)continue;if("object"!=typeof i){t=i;continue}const n=Array.isArray(i);!n||"object"==typeof t&&t&&Array.isArray(t)?n||"object"==typeof t&&t&&!Array.isArray(t)||(t={}):t=[];for(const n in i){if("__proto__"===n)continue;const o=i[n],r="object"==typeof o,a=t;a[n]=r&&Array.isArray(o)?o.map((t=>e(a[n],t))):e(a[n],o)}}return t},t.isDivModeEnabled=function(e,t){return t instanceof Array?!!t.find((t=>t.enable&&l(e,t.mode))):l(e,t.mode)},t.divModeExecute=function(e,t,n){if(t instanceof Array)for(const i of t){const t=i.mode;i.enable&&l(e,t)&&h(i,n)}else{const i=t.mode;t.enable&&l(e,i)&&h(t,n)}},t.singleDivModeExecute=h,t.divMode=function(e,t){if(t&&e)return e instanceof Array?e.find((e=>a(t,e.selectors))):a(t,e.selectors)?e:void 0},t.circleBounceDataFromParticle=function(e){return{position:e.getPosition(),radius:e.getRadius(),mass:e.getMass(),velocity:e.velocity,factor:o.Vector.create((0,i.getValue)(e.options.bounce.horizontal),(0,i.getValue)(e.options.bounce.vertical))}},t.circleBounce=function(e,t){const{x:n,y:o}=e.velocity.sub(t.velocity),[r,a]=[e.position,t.position],{dx:s,dy:l}=(0,i.getDistances)(a,r);if(n*s+o*l<0)return;const c=-Math.atan2(l,s),u=e.mass,d=t.mass,h=e.velocity.rotate(c),f=t.velocity.rotate(c),p=(0,i.collisionVelocity)(h,f,u,d),v=(0,i.collisionVelocity)(f,h,u,d),y=p.rotate(-c),g=v.rotate(-c);e.velocity.x=y.x*e.factor.x,e.velocity.y=y.y*e.factor.y,t.velocity.x=g.x*t.factor.x,t.velocity.y=g.y*t.factor.y},t.rectBounce=function(e,t){const n=d(e.getPosition(),e.getRadius()),o=r({min:n.left,max:n.right},{min:n.top,max:n.bottom},{min:t.left,max:t.right},{min:t.top,max:t.bottom},e.velocity.x,(0,i.getValue)(e.options.bounce.horizontal));o.bounced&&(void 0!==o.velocity&&(e.velocity.x=o.velocity),void 0!==o.position&&(e.position.x=o.position));const a=r({min:n.top,max:n.bottom},{min:n.left,max:n.right},{min:t.top,max:t.bottom},{min:t.left,max:t.right},e.velocity.y,(0,i.getValue)(e.options.bounce.vertical));a.bounced&&(void 0!==a.velocity&&(e.velocity.y=a.velocity),void 0!==a.position&&(e.position.y=a.position))}},320:function(e,t,n){"use strict";var i,o,r=this&&this.__classPrivateFieldSet||function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},a=this&&this.__classPrivateFieldGet||function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Engine=void 0;const s=n(9562),l=n(77);t.Engine=class{constructor(){i.set(this,void 0),o.set(this,void 0),r(this,i,!1,"f"),this.domArray=[],r(this,o,new s.Loader(this),"f"),this.plugins=new l.Plugins(this)}init(){a(this,i,"f")||r(this,i,!0,"f")}async loadFromArray(e,t,n){return a(this,o,"f").load(e,t,n)}async load(e,t){return a(this,o,"f").load(e,t)}async set(e,t,n){return a(this,o,"f").set(e,t,n)}async loadJSON(e,t,n){return a(this,o,"f").loadJSON(e,t,n)}async setJSON(e,t,n,i){return a(this,o,"f").setJSON(e,t,n,i)}setOnClickHandler(e){a(this,o,"f").setOnClickHandler(e)}dom(){return a(this,o,"f").dom()}domItem(e){return a(this,o,"f").domItem(e)}async refresh(){for(const e of this.dom())await e.refresh()}async addShape(e,t,n,i,o){let r;r="function"==typeof t?{afterEffect:i,destroy:o,draw:t,init:n}:t,this.plugins.addShapeDrawer(e,r),await this.refresh()}async addPreset(e,t,n=!1){this.plugins.addPreset(e,t,n),await this.refresh()}async addPlugin(e){this.plugins.addPlugin(e),await this.refresh()}async addPathGenerator(e,t){this.plugins.addPathGenerator(e,t),await this.refresh()}async addInteractor(e,t){this.plugins.addInteractor(e,t),await this.refresh()}async addMover(e,t){this.plugins.addParticleMover(e,t),await this.refresh()}async addParticleUpdater(e,t){this.plugins.addParticleUpdater(e,t),await this.refresh()}},i=new WeakMap,o=new WeakMap},3269:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadFull=void 0;const i=n(1245),o=n(9504),r=n(3229),a=n(8665),s=n(1925),l=n(4217),c=n(8028),u=n(4474),d=n(3634);t.loadFull=async function(e){await(0,l.loadSlim)(e),await(0,s.loadRollUpdater)(e),await(0,c.loadTiltUpdater)(e),await(0,u.loadTwinkleUpdater)(e),await(0,d.loadWobbleUpdater)(e),await(0,r.loadExternalTrailInteraction)(e),await(0,i.loadAbsorbersPlugin)(e),await(0,o.loadEmittersPlugin)(e),await(0,a.loadPolygonMaskPlugin)(e)}},5417:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,o)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.tsParticles=t.pJSDom=t.particlesJS=t.loadPolygonMaskPlugin=t.loadEmittersPlugin=t.loadAbsorbersPlugin=t.Main=t.Engine=void 0;const r=n(320);Object.defineProperty(t,"Engine",{enumerable:!0,get:function(){return r.Engine}}),Object.defineProperty(t,"Main",{enumerable:!0,get:function(){return r.Engine}});const a=n(2600),s=n(3269),l=new r.Engine;t.tsParticles=l,l.init();const{particlesJS:c,pJSDom:u}=(0,a.initPjs)(l);t.particlesJS=c,t.pJSDom=u,(0,s.loadFull)(l),o(n(7918),t),o(n(4467),t),o(n(3195),t),o(n(1748),t),o(n(6482),t),o(n(968),t),o(n(4535),t),o(n(6701),t),o(n(8855),t),o(n(8545),t),o(n(8195),t),o(n(4114),t),o(n(5656),t),o(n(8755),t),o(n(4324),t),o(n(1883),t),o(n(97),t),o(n(465),t),o(n(3393),t),o(n(7010),t),o(n(8235),t),o(n(3921),t),o(n(8527),t),o(n(1278),t),o(n(8035),t),o(n(9147),t),o(n(2295),t),o(n(5903),t),o(n(4173),t),o(n(1938),t),o(n(6799),t),o(n(4015),t),o(n(1291),t),o(n(8437),t),o(n(7434),t),o(n(51),t),o(n(6715),t),o(n(4263),t),o(n(4552),t),o(n(696),t),o(n(5331),t),o(n(1636),t),o(n(77),t),o(n(1401),t),o(n(3917),t),o(n(7641),t),o(n(5840),t),o(n(8061),t),o(n(8514),t),o(n(5479),t),o(n(6503),t),o(n(9562),t),o(n(5142),t),o(n(7018),t),o(n(1676),t),o(n(7187),t),o(n(1798),t),o(n(7169),t),o(n(6595),t),o(n(6362),t),o(n(7729),t),o(n(2794),t),o(n(2565),t),o(n(4605),t),o(n(2467),t),o(n(6453),t),o(n(9961),t),o(n(2555),t),o(n(5153),t),o(n(3722),t),o(n(9556),t),o(n(3407),t),o(n(4918),t),o(n(396),t),o(n(5270),t),o(n(1592),t),o(n(4090),t),o(n(4602),t),o(n(944),t),o(n(9285),t),o(n(343),t),o(n(2687),t),o(n(3798),t),o(n(4728),t),o(n(899),t),o(n(8710),t),o(n(9877),t),o(n(3063),t),o(n(1072),t),o(n(7129),t),o(n(7266),t),o(n(4351),t);var d=n(1245);Object.defineProperty(t,"loadAbsorbersPlugin",{enumerable:!0,get:function(){return d.loadAbsorbersPlugin}}),o(n(3858),t);var h=n(9504);Object.defineProperty(t,"loadEmittersPlugin",{enumerable:!0,get:function(){return h.loadEmittersPlugin}}),o(n(5958),t),o(n(7104),t);var f=n(8665);Object.defineProperty(t,"loadPolygonMaskPlugin",{enumerable:!0,get:function(){return f.loadPolygonMaskPlugin}}),o(n(7111),t),o(n(6476),t),o(n(4277),t)},2600:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initPjs=void 0,t.initPjs=e=>{const t=(t,n)=>e.load(t,n);return t.load=(t,n,i)=>{e.loadJSON(t,n).then((e=>{e&&i(e)})).catch((()=>{i(void 0)}))},t.setOnClickHandler=t=>{e.setOnClickHandler(t)},{particlesJS:t,pJSDom:e.dom()}}},4217:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadSlim=void 0;const i=n(9085),o=n(971),r=n(7926),a=n(3058),s=n(715),l=n(8696),c=n(7064),u=n(8722),d=n(6574),h=n(5089),f=n(8795),p=n(2879),v=n(6423),y=n(3113),g=n(3101),m=n(3274),b=n(9113),w=n(7813),S=n(8851),_=n(55),P=n(7818),x=n(5923),O=n(9224),C=n(7861),k=n(8180),E=n(9165),A=n(9988),M=n(2987);t.loadSlim=async function(e){await(0,o.loadBaseMover)(e),await(0,S.loadParallaxMover)(e),await(0,s.loadExternalAttractInteraction)(e),await(0,l.loadExternalBounceInteraction)(e),await(0,c.loadExternalBubbleInteraction)(e),await(0,u.loadExternalConnectInteraction)(e),await(0,d.loadExternalGrabInteraction)(e),await(0,h.loadExternalPauseInteraction)(e),await(0,f.loadExternalPushInteraction)(e),await(0,p.loadExternalRemoveInteraction)(e),await(0,v.loadExternalRepulseInteraction)(e),await(0,_.loadParticlesAttractInteraction)(e),await(0,P.loadParticlesCollisionsInteraction)(e),await(0,x.loadParticlesLinksInteraction)(e),await(0,r.loadCircleShape)(e),await(0,y.loadImageShape)(e),await(0,m.loadLineShape)(e),await(0,O.loadPolygonShape)(e),await(0,k.loadSquareShape)(e),await(0,E.loadStarShape)(e),await(0,M.loadTextShape)(e),await(0,g.loadLifeUpdater)(e),await(0,b.loadOpacityUpdater)(e),await(0,C.loadSizeUpdater)(e),await(0,i.loadAngleUpdater)(e),await(0,a.loadColorUpdater)(e),await(0,A.loadStrokeColorUpdater)(e),await(0,w.loadOutModesUpdater)(e)}},5251:function(e,t,n){"use strict";var i=n(7294),o=Symbol.for("react.element"),r=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var i,r={},c=null,u=null;for(i in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)a.call(t,i)&&!l.hasOwnProperty(i)&&(r[i]=t[i]);if(e&&e.defaultProps)for(i in t=e.defaultProps)void 0===r[i]&&(r[i]=t[i]);return{$$typeof:o,type:e,key:c,ref:u,props:r,_owner:s.current}}t.Fragment=r,t.jsx=c,t.jsxs=c},2408:function(e,t){"use strict";var n=Symbol.for("react.element"),i=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v=Object.assign,y={};function g(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||p}function m(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||p}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=g.prototype;var w=b.prototype=new m;w.constructor=b,v(w,g.prototype),w.isPureReactComponent=!0;var S=Array.isArray,_=Object.prototype.hasOwnProperty,P={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,i){var o,r={},a=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,o)&&!x.hasOwnProperty(o)&&(r[o]=t[o]);var l=arguments.length-2;if(1===l)r.children=i;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];r.children=c}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===r[o]&&(r[o]=l[o]);return{$$typeof:n,type:e,key:a,ref:s,props:r,_owner:P.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var k=/\/+/g;function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function A(e,t,o,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+E(l,0):r,S(a)?(o="",null!=e&&(o=e.replace(k,"$&/")+"/"),A(a,t,o,"",(function(e){return e}))):null!=a&&(C(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(k,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",S(e))for(var c=0;c<e.length;c++){var u=r+E(s=e[c],c);l+=A(s,t,o,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=A(s=s.value,t,o,u=r+E(s,c++),a);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function M(e,t,n){if(null==e)return e;var i=[],o=0;return A(e,i,"","",(function(e){return t.call(n,e,o++)})),i}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},V={transition:null},j={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:V,ReactCurrentOwner:P};t.Children={map:M,forEach:function(e,t,n){M(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return M(e,(function(){t++})),t},toArray:function(e){return M(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=o,t.Profiler=a,t.PureComponent=b,t.StrictMode=r,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.cloneElement=function(e,t,i){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=v({},e.props),r=e.key,a=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=P.current),void 0!==t.key&&(r=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)_.call(t,c)&&!x.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=i;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];o.children=l}return{$$typeof:n,type:e.type,key:r,ref:a,props:o,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=V.transition;V.transition={};try{e()}finally{V.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return T.current.useCallback(e,t)},t.useContext=function(e){return T.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return T.current.useDeferredValue(e)},t.useEffect=function(e,t){return T.current.useEffect(e,t)},t.useId=function(){return T.current.useId()},t.useImperativeHandle=function(e,t,n){return T.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return T.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return T.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return T.current.useMemo(e,t)},t.useReducer=function(e,t,n){return T.current.useReducer(e,t,n)},t.useRef=function(e){return T.current.useRef(e)},t.useState=function(e){return T.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return T.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return T.current.useTransition()},t.version="18.2.0"},7294:function(e,t,n){"use strict";e.exports=n(2408)},5893:function(e,t,n){"use strict";e.exports=n(5251)},3488:function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t=(0,o.default)(e);return{getItem:function(e){return new Promise((function(n,i){n(t.getItem(e))}))},setItem:function(e,n){return new Promise((function(i,o){i(t.setItem(e,n))}))},removeItem:function(e){return new Promise((function(n,i){n(t.removeItem(e))}))}}};var i,o=(i=n(7290))&&i.__esModule?i:{default:i}},7290:function(e,t){"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function i(){}t.__esModule=!0,t.default=function(e){var t="".concat(e,"Storage");return function(e){if("object"!==("undefined"==typeof self?"undefined":n(self))||!(e in self))return!1;try{var t=self[e],i="redux-persist ".concat(e," test");t.setItem(i,"test"),t.getItem(i),t.removeItem(i)}catch(e){return!1}return!0}(t)?self[t]:o};var o={getItem:i,setItem:i,removeItem:i}},6734:function(e,t,n){"use strict";var i;t.Z=void 0;var o=(0,((i=n(3488))&&i.__esModule?i:{default:i}).default)("local");t.Z=o},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var i=n-1>>>1,o=e[i];if(!(0<r(o,t)))break e;e[i]=t,e[n]=o,n=i}}function i(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var i=0,o=e.length,a=o>>>1;i<a;){var s=2*(i+1)-1,l=e[s],c=s+1,u=e[c];if(0>r(l,n))c<o&&0>r(u,l)?(e[i]=u,e[c]=n,i=c):(e[i]=l,e[s]=n,i=s);else{if(!(c<o&&0>r(u,n)))break e;e[i]=u,e[c]=n,i=c}}}return t}function r(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,h=null,f=3,p=!1,v=!1,y=!1,g="function"==typeof setTimeout?setTimeout:null,m="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=i(u);null!==t;){if(null===t.callback)o(u);else{if(!(t.startTime<=e))break;o(u),t.sortIndex=t.expirationTime,n(c,t)}t=i(u)}}function S(e){if(y=!1,w(e),!v)if(null!==i(c))v=!0,V(_);else{var t=i(u);null!==t&&j(S,t.startTime-e)}}function _(e,n){v=!1,y&&(y=!1,m(C),C=-1),p=!0;var r=f;try{for(w(n),h=i(c);null!==h&&(!(h.expirationTime>n)||e&&!A());){var a=h.callback;if("function"==typeof a){h.callback=null,f=h.priorityLevel;var s=a(h.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?h.callback=s:h===i(c)&&o(c),w(n)}else o(c);h=i(c)}if(null!==h)var l=!0;else{var d=i(u);null!==d&&j(S,d.startTime-n),l=!1}return l}finally{h=null,f=r,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var P,x=!1,O=null,C=-1,k=5,E=-1;function A(){return!(t.unstable_now()-E<k)}function M(){if(null!==O){var e=t.unstable_now();E=e;var n=!0;try{n=O(!0,e)}finally{n?P():(x=!1,O=null)}}else x=!1}if("function"==typeof b)P=function(){b(M)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,T=R.port2;R.port1.onmessage=M,P=function(){T.postMessage(null)}}else P=function(){g(M,0)};function V(e){O=e,x||(x=!0,P())}function j(e,n){C=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){v||p||(v=!0,V(_))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):k=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return i(c)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,o,r){var a=t.unstable_now();switch(r="object"==typeof r&&null!==r&&"number"==typeof(r=r.delay)&&0<r?a+r:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:r,expirationTime:s=r+s,sortIndex:-1},r>a?(e.sortIndex=r,n(u,e),null===i(c)&&e===i(u)&&(y?(m(C),C=-1):y=!0,j(S,r-a))):(e.sortIndex=s,n(c,e),v||p||(v=!0,V(_))),e},t.unstable_shouldYield=A,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},3840:function(e,t,n){"use strict";e.exports=n(53)},3379:function(e){"use strict";var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var r={},a=[],s=0;s<e.length;s++){var l=e[s],c=i.base?l[0]+i.base:l[0],u=r[c]||0,d="".concat(c," ").concat(u);r[c]=u+1;var h=n(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(f);else{var p=o(f,i);i.byIndex=s,t.splice(s,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var r=i(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<r.length;a++){var s=n(r[a]);t[s].references--}for(var l=i(e,o),c=0;c<r.length;c++){var u=n(r[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}r=l}}},569:function(e){"use strict";var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},9216:function(e){"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:function(e,t,n){"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:function(e){"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,o&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:function(e){"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},3250:function(e,t,n){"use strict";var i=n(7294),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},r=i.useState,a=i.useEffect,s=i.useLayoutEffect,l=i.useDebugValue;function c(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var u="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),i=r({inst:{value:n,getSnapshot:t}}),o=i[0].inst,u=i[1];return s((function(){o.value=n,o.getSnapshot=t,c(o)&&u({inst:o})}),[e,n,t]),a((function(){return c(o)&&u({inst:o}),e((function(){c(o)&&u({inst:o})}))}),[e]),l(n),n};t.useSyncExternalStore=void 0!==i.useSyncExternalStore?i.useSyncExternalStore:u},139:function(e,t,n){"use strict";var i=n(7294),o=n(1688),r="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=o.useSyncExternalStore,s=i.useRef,l=i.useEffect,c=i.useMemo,u=i.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,i,o){var d=s(null);if(null===d.current){var h={hasValue:!1,value:null};d.current=h}else h=d.current;d=c((function(){function e(e){if(!l){if(l=!0,a=e,e=i(e),void 0!==o&&h.hasValue){var t=h.value;if(o(t,e))return s=t}return s=e}if(t=s,r(a,e))return t;var n=i(e);return void 0!==o&&o(t,n)?t:(a=e,s=n)}var a,s,l=!1,c=void 0===n?null:n;return[function(){return e(t())},null===c?void 0:function(){return e(c())}]}),[t,n,i,o]);var f=a(e,d[0],d[1]);return l((function(){h.hasValue=!0,h.value=f}),[f]),u(f),f}},1688:function(e,t,n){"use strict";e.exports=n(3250)},2798:function(e,t,n){"use strict";e.exports=n(139)}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={id:i,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.nc=void 0,function(){"use strict";var e=n(5893),t=n(745),i=n(1688),o=n(2798),r=n(3935);let a=function(e){e()};const s=()=>a;var l=n(7294);const c=l.createContext(null);function u(){return(0,l.useContext)(c)}let d=()=>{throw new Error("uSES not initialized!")};const h=(e,t)=>e===t;function f(e=c){const t=e===c?u:()=>(0,l.useContext)(e);return function(e,n=h){const{store:i,subscription:o,getServerState:r}=t(),a=d(o.addNestedSub,i.getState,r||i.getState,e,n);return(0,l.useDebugValue)(a),a}}const p=f();n(8679),n(2973);const v={notify(){},get:()=>[]};const y="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect;let g=null;function m(e=c){const t=e===c?u:()=>(0,l.useContext)(e);return function(){const{store:e}=t();return e}}const b=m();function w(e=c){const t=e===c?b:m(e);return function(){return t().dispatch}}const S=w();var _;function P(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function x(e){return!!e&&!!e[ue]}function O(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===de}(e)||Array.isArray(e)||!!e[ce]||!!e.constructor[ce]||R(e)||T(e))}function C(e,t,n){void 0===n&&(n=!1),0===k(e)?(n?Object.keys:he)(e).forEach((function(i){n&&"symbol"==typeof i||t(i,e[i],e)})):e.forEach((function(n,i){return t(i,n,e)}))}function k(e){var t=e[ue];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:R(e)?2:T(e)?3:0}function E(e,t){return 2===k(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function A(e,t,n){var i=k(e);2===i?e.set(t,n):3===i?(e.delete(t),e.add(n)):e[t]=n}function M(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function R(e){return re&&e instanceof Map}function T(e){return ae&&e instanceof Set}function V(e){return e.o||e.t}function j(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=fe(e);delete t[ue];for(var n=he(t),i=0;i<n.length;i++){var o=n[i],r=t[o];!1===r.writable&&(r.writable=!0,r.configurable=!0),(r.get||r.set)&&(t[o]={configurable:!0,writable:!0,enumerable:r.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function L(e,t){return void 0===t&&(t=!1),I(e)||x(e)||!O(e)||(k(e)>1&&(e.set=e.add=e.clear=e.delete=z),Object.freeze(e),t&&C(e,(function(e,t){return L(t,!0)}),!0)),e}function z(){P(2)}function I(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function G(e){var t=pe[e];return t||P(18,e),t}function D(){return ie}function F(e,t){t&&(G("Patches"),e.u=[],e.s=[],e.v=t)}function N(e){B(e),e.p.forEach(U),e.p=null}function B(e){e===ie&&(ie=e.l)}function H(e){return ie={p:[],l:ie,h:e,m:!0,_:0}}function U(e){var t=e[ue];0===t.i||1===t.i?t.j():t.O=!0}function W(e,t){t._=t.p.length;var n=t.p[0],i=void 0!==e&&e!==n;return t.h.g||G("ES5").S(t,e,i),i?(n[ue].P&&(N(t),P(4)),O(e)&&(e=q(t,e),t.l||Q(t,e)),t.u&&G("Patches").M(n[ue].t,e,t.u,t.s)):e=q(t,n,[]),N(t),t.u&&t.v(t.u,t.s),e!==le?e:void 0}function q(e,t,n){if(I(t))return t;var i=t[ue];if(!i)return C(t,(function(o,r){return $(e,i,t,o,r,n)}),!0),t;if(i.A!==e)return t;if(!i.P)return Q(e,i.t,!0),i.t;if(!i.I){i.I=!0,i.A._--;var o=4===i.i||5===i.i?i.o=j(i.k):i.o;C(3===i.i?new Set(o):o,(function(t,r){return $(e,i,o,t,r,n)})),Q(e,o,!1),n&&e.u&&G("Patches").R(i,n,e.u,e.s)}return i.o}function $(e,t,n,i,o,r){if(x(o)){var a=q(e,o,r&&t&&3!==t.i&&!E(t.D,i)?r.concat(i):void 0);if(A(n,i,a),!x(a))return;e.m=!1}if(O(o)&&!I(o)){if(!e.h.F&&e._<1)return;q(e,o),t&&t.A.l||Q(e,o)}}function Q(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&L(t,n)}function K(e,t){var n=e[ue];return(n?V(n):e)[t]}function X(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var i=Object.getOwnPropertyDescriptor(n,t);if(i)return i;n=Object.getPrototypeOf(n)}}function Y(e){e.P||(e.P=!0,e.l&&Y(e.l))}function Z(e){e.o||(e.o=j(e.t))}function J(e,t,n){var i=R(t)?G("MapSet").N(t,n):T(t)?G("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),i={i:n?1:0,A:t?t.A:D(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=i,r=ve;n&&(o=[i],r=ye);var a=Proxy.revocable(o,r),s=a.revoke,l=a.proxy;return i.k=l,i.j=s,l}(t,n):G("ES5").J(t,n);return(n?n.A:D()).p.push(i),i}function ee(e){return x(e)||P(22,e),function e(t){if(!O(t))return t;var n,i=t[ue],o=k(t);if(i){if(!i.P&&(i.i<4||!G("ES5").K(i)))return i.t;i.I=!0,n=te(t,o),i.I=!1}else n=te(t,o);return C(n,(function(t,o){i&&function(e,t){return 2===k(e)?e.get(t):e[t]}(i.t,t)===o||A(n,t,e(o))})),3===o?new Set(n):n}(e)}function te(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return j(e)}(e=>{d=e})(o.useSyncExternalStoreWithSelector),(e=>{g=e})(i.useSyncExternalStore),_=r.unstable_batchedUpdates,a=_;var ne,ie,oe="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),re="undefined"!=typeof Map,ae="undefined"!=typeof Set,se="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,le=oe?Symbol.for("immer-nothing"):((ne={})["immer-nothing"]=!0,ne),ce=oe?Symbol.for("immer-draftable"):"__$immer_draftable",ue=oe?Symbol.for("immer-state"):"__$immer_state",de=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),he="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,fe=Object.getOwnPropertyDescriptors||function(e){var t={};return he(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},pe={},ve={get:function(e,t){if(t===ue)return e;var n=V(e);if(!E(n,t))return function(e,t,n){var i,o=X(t,n);return o?"value"in o?o.value:null===(i=o.get)||void 0===i?void 0:i.call(e.k):void 0}(e,n,t);var i=n[t];return e.I||!O(i)?i:i===K(e.t,t)?(Z(e),e.o[t]=J(e.A.h,i,e)):i},has:function(e,t){return t in V(e)},ownKeys:function(e){return Reflect.ownKeys(V(e))},set:function(e,t,n){var i=X(V(e),t);if(null==i?void 0:i.set)return i.set.call(e.k,n),!0;if(!e.P){var o=K(V(e),t),r=null==o?void 0:o[ue];if(r&&r.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(M(n,o)&&(void 0!==n||E(e.t,t)))return!0;Z(e),Y(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==K(e.t,t)||t in e.t?(e.D[t]=!1,Z(e),Y(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=V(e),i=Reflect.getOwnPropertyDescriptor(n,t);return i?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:i.enumerable,value:n[t]}:i},defineProperty:function(){P(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){P(12)}},ye={};C(ve,(function(e,t){ye[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),ye.deleteProperty=function(e,t){return ye.set.call(this,e,t,void 0)},ye.set=function(e,t,n){return ve.set.call(this,e[0],t,n,e[0])};var ge=function(){function e(e){var t=this;this.g=se,this.F=!0,this.produce=function(e,n,i){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var r=t;return function(e){var t=this;void 0===e&&(e=o);for(var i=arguments.length,a=Array(i>1?i-1:0),s=1;s<i;s++)a[s-1]=arguments[s];return r.produce(e,(function(e){var i;return(i=n).call.apply(i,[t,e].concat(a))}))}}var a;if("function"!=typeof n&&P(6),void 0!==i&&"function"!=typeof i&&P(7),O(e)){var s=H(t),l=J(t,e,void 0),c=!0;try{a=n(l),c=!1}finally{c?N(s):B(s)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return F(s,i),W(e,s)}),(function(e){throw N(s),e})):(F(s,i),W(a,s))}if(!e||"object"!=typeof e){if(void 0===(a=n(e))&&(a=e),a===le&&(a=void 0),t.F&&L(a,!0),i){var u=[],d=[];G("Patches").M(e,a,u,d),i(u,d)}return a}P(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var i=arguments.length,o=Array(i>1?i-1:0),r=1;r<i;r++)o[r-1]=arguments[r];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var i,o,r=t.produce(e,n,(function(e,t){i=e,o=t}));return"undefined"!=typeof Promise&&r instanceof Promise?r.then((function(e){return[e,i,o]})):[r,i,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){O(e)||P(8),x(e)&&(e=ee(e));var t=H(this),n=J(this,e,void 0);return n[ue].C=!0,B(t),n},t.finishDraft=function(e,t){var n=(e&&e[ue]).A;return F(n,t),W(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!se&&P(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var i=t[n];if(0===i.path.length&&"replace"===i.op){e=i.value;break}}n>-1&&(t=t.slice(n+1));var o=G("Patches").$;return x(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),me=new ge,be=me.produce,we=(me.produceWithPatches.bind(me),me.setAutoFreeze.bind(me),me.setUseProxies.bind(me),me.applyPatches.bind(me),me.createDraft.bind(me),me.finishDraft.bind(me),be);function Se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function Pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_e(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_e(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function xe(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var Oe="function"==typeof Symbol&&Symbol.observable||"@@observable",Ce=function(){return Math.random().toString(36).substring(7).split("").join(".")},ke={INIT:"@@redux/INIT"+Ce(),REPLACE:"@@redux/REPLACE"+Ce(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Ce()}};function Ee(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Ae(e,t,n){var i;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(xe(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(xe(1));return n(Ae)(e,t)}if("function"!=typeof e)throw new Error(xe(2));var o=e,r=t,a=[],s=a,l=!1;function c(){s===a&&(s=a.slice())}function u(){if(l)throw new Error(xe(3));return r}function d(e){if("function"!=typeof e)throw new Error(xe(4));if(l)throw new Error(xe(5));var t=!0;return c(),s.push(e),function(){if(t){if(l)throw new Error(xe(6));t=!1,c();var n=s.indexOf(e);s.splice(n,1),a=null}}}function h(e){if(!Ee(e))throw new Error(xe(7));if(void 0===e.type)throw new Error(xe(8));if(l)throw new Error(xe(9));try{l=!0,r=o(r,e)}finally{l=!1}for(var t=a=s,n=0;n<t.length;n++)(0,t[n])();return e}function f(e){if("function"!=typeof e)throw new Error(xe(10));o=e,h({type:ke.REPLACE})}function p(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(xe(11));function n(){e.next&&e.next(u())}return n(),{unsubscribe:t(n)}}})[Oe]=function(){return this},e}return h({type:ke.INIT}),(i={dispatch:h,subscribe:d,getState:u,replaceReducer:f})[Oe]=p,i}function Me(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function Re(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),i=function(){throw new Error(xe(15))},o={getState:n.getState,dispatch:function(){return i.apply(void 0,arguments)}},r=t.map((function(e){return e(o)}));return i=Me.apply(void 0,r)(n.dispatch),Pe(Pe({},n),{},{dispatch:i})}}}function Te(e){return function(t){var n=t.dispatch,i=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,i,e):t(o)}}}}var Ve=Te();Ve.withExtraArgument=Te;var je,Le=Ve,ze=(je=function(e,t){return je=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},je(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}je(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Ie=function(e,t){for(var n=0,i=t.length,o=e.length;n<i;n++,o++)e[o]=t[n];return e},Ge=Object.defineProperty,De=(Object.defineProperties,Object.getOwnPropertyDescriptors,Object.getOwnPropertySymbols),Fe=Object.prototype.hasOwnProperty,Ne=Object.prototype.propertyIsEnumerable,Be=function(e,t,n){return t in e?Ge(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},He=function(e,t){for(var n in t||(t={}))Fe.call(t,n)&&Be(e,n,t[n]);if(De)for(var i=0,o=De(t);i<o.length;i++)n=o[i],Ne.call(t,n)&&Be(e,n,t[n]);return e},Ue="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?Me:Me.apply(null,arguments)};"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var We=function(e){function t(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return ze(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Ie([void 0],e[0].concat(this)))):new(t.bind.apply(t,Ie([void 0],e.concat(this))))},t}(Array);function qe(e){return O(e)?we(e,(function(){})):e}function $e(e,t){function n(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return He(He({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Qe(e){var t,n={},i=[],o={addCase:function(e,t){var i="string"==typeof e?e:e.type;if(i in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[i]=t,o},addMatcher:function(e,t){return i.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,i,t]}Object.assign;var Ke="listenerMiddleware";$e(Ke+"/add"),$e(Ke+"/removeAll"),$e(Ke+"/remove"),function(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[ue];return ve.get(t,e)},set:function(t){var n=this[ue];ve.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][ue];if(!o.P)switch(o.i){case 5:i(o)&&Y(o);break;case 4:n(o)&&Y(o)}}}function n(e){for(var t=e.t,n=e.k,i=he(n),o=i.length-1;o>=0;o--){var r=i[o];if(r!==ue){var a=t[r];if(void 0===a&&!E(t,r))return!0;var s=n[r],l=s&&s[ue];if(l?l.t!==a:!M(s,a))return!0}}var c=!!t[ue];return i.length!==he(t).length+(c?0:1)}function i(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var i=0;i<t.length;i++)if(!t.hasOwnProperty(i))return!0;return!1}var o={};!function(e,t){pe[e]||(pe[e]=t)}("ES5",{J:function(t,n){var i=Array.isArray(t),o=function(t,n){if(t){for(var i=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(i,""+o,e(o,!0));return i}var r=fe(n);delete r[ue];for(var a=he(r),s=0;s<a.length;s++){var l=a[s];r[l]=e(l,t||!!r[l].enumerable)}return Object.create(Object.getPrototypeOf(n),r)}(i,t),r={i:i?5:4,A:n?n.A:D(),P:!1,I:!1,D:{},l:n,t:t,k:o,o:null,O:!1,C:!1};return Object.defineProperty(o,ue,{value:r,writable:!0}),o},S:function(e,n,o){o?x(n)&&n[ue].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[ue];if(n){var o=n.t,r=n.k,a=n.D,s=n.i;if(4===s)C(r,(function(t){t!==ue&&(void 0!==o[t]||E(o,t)?a[t]||e(r[t]):(a[t]=!0,Y(n)))})),C(o,(function(e){void 0!==r[e]||E(r,e)||(a[e]=!1,Y(n))}));else if(5===s){if(i(n)&&(Y(n),a.length=!0),r.length<o.length)for(var l=r.length;l<o.length;l++)a[l]=!1;else for(var c=o.length;c<r.length;c++)a[c]=!0;for(var u=Math.min(r.length,o.length),d=0;d<u;d++)r.hasOwnProperty(d)||(a[d]=!0),void 0===a[d]&&e(r[d])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):i(e)}})}();var Xe,Ye=function(){return Ye=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ye.apply(this,arguments)},Ze={first_name:"",last_name:"",email:"",age:"",gender:"",phone_number:"",success:!1},Je=function(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,i="function"==typeof e.initialState?e.initialState:qe(e.initialState),o=e.reducers||{},r=Object.keys(o),a={},s={},l={};function c(){var t="function"==typeof e.extraReducers?Qe(e.extraReducers):[e.extraReducers],n=t[0],o=void 0===n?{}:n,r=t[1],a=void 0===r?[]:r,l=t[2],c=void 0===l?void 0:l,u=He(He({},o),s);return function(e,t,n,i){void 0===n&&(n=[]);var o,r="function"==typeof t?Qe(t):[t,n,i],a=r[0],s=r[1],l=r[2];if(function(e){return"function"==typeof e}(e))o=function(){return qe(e())};else{var c=qe(e);o=function(){return c}}function u(e,t){void 0===e&&(e=o());var n=Ie([a[t.type]],s.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[l]),n.reduce((function(e,n){if(n){var i;if(x(e))return void 0===(i=n(e,t))?e:i;if(O(e))return we(e,(function(e){return n(e,t)}));if(void 0===(i=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return i}return e}),e)}return u.getInitialState=o,u}(i,u,a,c)}return r.forEach((function(e){var n,i,r=o[e],c=t+"/"+e;"reducer"in r?(n=r.reducer,i=r.prepare):n=r,a[e]=n,s[c]=n,l[e]=i?$e(c,i):$e(c)})),{name:t,reducer:function(e,t){return n||(n=c()),n(e,t)},actions:l,caseReducers:a,getInitialState:function(){return n||(n=c()),n.getInitialState()}}}({name:"form",initialState:Ze,reducers:{reset:function(e){},setForm:function(e,t){var n=t.payload;console.log(n),Array.from(Object.keys(n)).forEach((function(t){var i;e=Ye(Ye({},e),((i={})[t]=n[t],i))}))}}}),et=((Xe=Je.actions).reset,Xe.setForm),tt=Je.reducer,nt=n(6734),it="persist:",ot="persist/FLUSH",rt="persist/REHYDRATE",at="persist/PAUSE",st="persist/PERSIST",lt="persist/PURGE",ct="persist/REGISTER";function ut(e){return ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ut(e)}function dt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function ht(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ft(e){return JSON.stringify(e)}function pt(e){return JSON.parse(e)}function vt(e){}function yt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function gt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yt(n,!0).forEach((function(t){mt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yt(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function mt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function bt(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function wt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function St(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wt(n,!0).forEach((function(t){_t(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wt(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _t(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Pt,xt,Ot,Ct,kt,Et,At,Mt,Rt,Tt,Vt={registry:[],bootstrapped:!1},jt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Vt,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case ct:return St({},e,{registry:[].concat(bt(e.registry),[t.key])});case rt:var n=e.registry.indexOf(t.key),i=bt(e.registry);return i.splice(n,1),St({},e,{registry:i,bootstrapped:0===i.length});default:return e}},Lt={key:"root",storage:nt.Z},zt=(xt=tt,Ot=void 0!==(Pt=Lt).version?Pt.version:-1,Ct=void 0===Pt.stateReconciler?function(e,t,n,i){i.debug;var o=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dt(n,!0).forEach((function(t){ht(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dt(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n);return e&&"object"===ut(e)&&Object.keys(e).forEach((function(i){"_persist"!==i&&t[i]===n[i]&&(o[i]=e[i])})),o}:Pt.stateReconciler,kt=Pt.getStoredState||function(e){var t,n=e.transforms||[],i="".concat(void 0!==e.keyPrefix?e.keyPrefix:it).concat(e.key),o=e.storage;return e.debug,t=!1===e.deserialize?function(e){return e}:"function"==typeof e.deserialize?e.deserialize:pt,o.getItem(i).then((function(e){if(e)try{var i={},o=t(e);return Object.keys(o).forEach((function(e){i[e]=n.reduceRight((function(t,n){return n.out(t,e,o)}),t(o[e]))})),i}catch(e){throw e}}))},Et=void 0!==Pt.timeout?Pt.timeout:5e3,At=null,Mt=!1,Rt=!0,Tt=function(e){return e._persist.rehydrated&&At&&!Rt&&At.update(e),e},function(e,t){var n=e||{},i=n._persist,o=function(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(n,["_persist"]);if(t.type===st){var r=!1,a=function(e,n){r||(t.rehydrate(Pt.key,e,n),r=!0)};if(Et&&setTimeout((function(){!r&&a(void 0,new Error('redux-persist: persist timed out for persist key "'.concat(Pt.key,'"')))}),Et),Rt=!1,At||(At=function(e){var t,n=e.blacklist||null,i=e.whitelist||null,o=e.transforms||[],r=e.throttle||0,a="".concat(void 0!==e.keyPrefix?e.keyPrefix:it).concat(e.key),s=e.storage;t=!1===e.serialize?function(e){return e}:"function"==typeof e.serialize?e.serialize:ft;var l=e.writeFailHandler||null,c={},u={},d=[],h=null,f=null;function p(){if(0===d.length)return h&&clearInterval(h),void(h=null);var e=d.shift(),n=o.reduce((function(t,n){return n.in(t,e,c)}),c[e]);if(void 0!==n)try{u[e]=t(n)}catch(e){console.error("redux-persist/createPersistoid: error serializing state",e)}else delete u[e];0===d.length&&(Object.keys(u).forEach((function(e){void 0===c[e]&&delete u[e]})),f=s.setItem(a,t(u)).catch(y))}function v(e){return!(i&&-1===i.indexOf(e)&&"_persist"!==e||n&&-1!==n.indexOf(e))}function y(e){l&&l(e)}return{update:function(e){Object.keys(e).forEach((function(t){v(t)&&c[t]!==e[t]&&-1===d.indexOf(t)&&d.push(t)})),Object.keys(c).forEach((function(t){void 0===e[t]&&v(t)&&-1===d.indexOf(t)&&void 0!==c[t]&&d.push(t)})),null===h&&(h=setInterval(p,r)),c=e},flush:function(){for(;0!==d.length;)p();return f||Promise.resolve()}}}(Pt)),i)return gt({},xt(o,t),{_persist:i});if("function"!=typeof t.rehydrate||"function"!=typeof t.register)throw new Error("redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.");return t.register(Pt.key),kt(Pt).then((function(e){var t=Pt.migrate||function(e,t){return Promise.resolve(e)};t(e,Ot).then((function(e){a(e)}),(function(e){a(void 0,e)}))}),(function(e){a(void 0,e)})),gt({},xt(o,t),{_persist:{version:Ot,rehydrated:!1}})}if(t.type===lt)return Mt=!0,t.result(function(e){var t=e.storage,n="".concat(void 0!==e.keyPrefix?e.keyPrefix:it).concat(e.key);return t.removeItem(n,vt)}(Pt)),gt({},xt(o,t),{_persist:i});if(t.type===ot)return t.result(At&&At.flush()),gt({},xt(o,t),{_persist:i});if(t.type===at)Rt=!0;else if(t.type===rt){if(Mt)return gt({},o,{_persist:gt({},i,{rehydrated:!0})});if(t.key===Pt.key){var s=xt(o,t),l=t.payload,c=gt({},!1!==Ct&&void 0!==l?Ct(l,e,s,Pt):s,{_persist:gt({},i,{rehydrated:!0})});return Tt(c)}}if(!i)return xt(e,t);var u=xt(o,t);return u===o?e:Tt(gt({},u,{_persist:i}))}),It=function(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,i=(e.immutableCheck,e.serializableCheck,new We);return n&&(function(e){return"boolean"==typeof e}(n)?i.push(Le):i.push(Le.withExtraArgument(n.extraArgument))),i}(e)},i=e||{},o=i.reducer,r=void 0===o?void 0:o,a=i.middleware,s=void 0===a?n():a,l=i.devTools,c=void 0===l||l,u=i.preloadedState,d=void 0===u?void 0:u,h=i.enhancers,f=void 0===h?void 0:h;if("function"==typeof r)t=r;else{if(!function(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}(r))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=function(e){for(var t=Object.keys(e),n={},i=0;i<t.length;i++){var o=t[i];"function"==typeof e[o]&&(n[o]=e[o])}var r,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:ke.INIT}))throw new Error(xe(12));if(void 0===n(void 0,{type:ke.PROBE_UNKNOWN_ACTION()}))throw new Error(xe(13))}))}(n)}catch(e){r=e}return function(e,t){if(void 0===e&&(e={}),r)throw r;for(var i=!1,o={},s=0;s<a.length;s++){var l=a[s],c=n[l],u=e[l],d=c(u,t);if(void 0===d)throw t&&t.type,new Error(xe(14));o[l]=d,i=i||d!==u}return(i=i||a.length!==Object.keys(e).length)?o:e}}(r)}var p=s;"function"==typeof p&&(p=p(n));var v=Re.apply(void 0,p),y=Me;c&&(y=Ue(He({trace:!1},"object"==typeof c&&c)));var g=[v];return Array.isArray(f)?g=Ie([v],f):"function"==typeof f&&(g=f(g)),Ae(t,d,y.apply(void 0,g))}({reducer:zt}),Gt=function(e,t,n){var i=!1,o=Ae(jt,Vt,void 0),r=function(e){o.dispatch({type:ct,key:e})},a=function(t,n,r){var a={type:rt,payload:n,err:r,key:t};e.dispatch(a),o.dispatch(a),i&&s.getState().bootstrapped&&(i(),i=!1)},s=St({},o,{purge:function(){var t=[];return e.dispatch({type:lt,result:function(e){t.push(e)}}),Promise.all(t)},flush:function(){var t=[];return e.dispatch({type:ot,result:function(e){t.push(e)}}),Promise.all(t)},pause:function(){e.dispatch({type:at})},persist:function(){e.dispatch({type:st,register:r,rehydrate:a})}});return s.persist(),s}(It);function Dt(e){return Dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dt(e)}function Ft(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Nt(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function Bt(e,t){return!t||"object"!==Dt(t)&&"function"!=typeof t?Ut(e):t}function Ht(e){return Ht=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Ht(e)}function Ut(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Wt(e,t){return Wt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Wt(e,t)}function qt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var $t=function(e){function t(){var e,n;Ft(this,t);for(var i=arguments.length,o=new Array(i),r=0;r<i;r++)o[r]=arguments[r];return qt(Ut(n=Bt(this,(e=Ht(t)).call.apply(e,[this].concat(o)))),"state",{bootstrapped:!1}),qt(Ut(n),"_unsubscribe",void 0),qt(Ut(n),"handlePersistorState",(function(){n.props.persistor.getState().bootstrapped&&(n.props.onBeforeLift?Promise.resolve(n.props.onBeforeLift()).finally((function(){return n.setState({bootstrapped:!0})})):n.setState({bootstrapped:!0}),n._unsubscribe&&n._unsubscribe())})),n}var n,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Wt(e,t)}(t,e),n=t,(i=[{key:"componentDidMount",value:function(){this._unsubscribe=this.props.persistor.subscribe(this.handlePersistorState),this.handlePersistorState()}},{key:"componentWillUnmount",value:function(){this._unsubscribe&&this._unsubscribe()}},{key:"render",value:function(){return"function"==typeof this.props.children?this.props.children(this.state.bootstrapped):this.state.bootstrapped?this.props.children:this.props.loading}}])&&Nt(n.prototype,i),t}(l.PureComponent);qt($t,"defaultProps",{children:null,loading:null});var Qt,Kt=n(3379),Xt=n.n(Kt),Yt=n(7795),Zt=n.n(Yt),Jt=n(569),en=n.n(Jt),tn=n(3565),nn=n.n(tn),on=n(9216),rn=n.n(on),an=n(4589),sn=n.n(an),ln=n(1424),cn={};function un(){return un=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},un.apply(this,arguments)}cn.styleTagTransform=sn(),cn.setAttributes=nn(),cn.insert=en().bind(null,"head"),cn.domAPI=Zt(),cn.insertStyleElement=rn(),Xt()(ln.Z,cn),ln.Z&&ln.Z.locals&&ln.Z.locals,function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(Qt||(Qt={}));var dn="beforeunload";function hn(e){e.preventDefault(),e.returnValue=""}function fn(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function pn(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var i=e.indexOf("?");i>=0&&(t.search=e.substr(i),e=e.substr(0,i)),e&&(t.pathname=e)}return t}const vn=(0,l.createContext)(null),yn=(0,l.createContext)(null),gn=(0,l.createContext)({outlet:null,matches:[]});function mn(e,t){if(!e)throw new Error(t)}function bn(e,t,n){void 0===n&&(n="/");let i=Cn(("string"==typeof t?pn(t):t).pathname||"/",n);if(null==i)return null;let o=wn(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let r=null;for(let e=0;null==r&&e<o.length;++e)r=xn(o[e],i);return r}function wn(e,t,n,i){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===i&&(i=""),e.forEach(((e,o)=>{let r={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};r.relativePath.startsWith("/")&&(r.relativePath.startsWith(i)||mn(!1),r.relativePath=r.relativePath.slice(i.length));let a=kn([i,r.relativePath]),s=n.concat(r);e.children&&e.children.length>0&&(!0===e.index&&mn(!1),wn(e.children,t,s,a)),(null!=e.path||e.index)&&t.push({path:a,score:Pn(a,e.index),routesMeta:s})})),t}const Sn=/^:\w+$/,_n=e=>"*"===e;function Pn(e,t){let n=e.split("/"),i=n.length;return n.some(_n)&&(i+=-2),t&&(i+=2),n.filter((e=>!_n(e))).reduce(((e,t)=>e+(Sn.test(t)?3:""===t?1:10)),i)}function xn(e,t){let{routesMeta:n}=e,i={},o="/",r=[];for(let e=0;e<n.length;++e){let a=n[e],s=e===n.length-1,l="/"===o?t:t.slice(o.length)||"/",c=On({path:a.relativePath,caseSensitive:a.caseSensitive,end:s},l);if(!c)return null;Object.assign(i,c.params);let u=a.route;r.push({params:i,pathname:kn([o,c.pathname]),pathnameBase:En(kn([o,c.pathnameBase])),route:u}),"/"!==c.pathnameBase&&(o=kn([o,c.pathnameBase]))}return r}function On(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,i]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let i=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(i.push(t),"([^\\/]+)")));return e.endsWith("*")?(i.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(o,t?void 0:"i"),i]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let r=o[0],a=r.replace(/(.)\/+$/,"$1"),s=o.slice(1);return{params:i.reduce(((e,t,n)=>{if("*"===t){let e=s[n]||"";a=r.slice(0,r.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(s[n]||""),e}),{}),pathname:r,pathnameBase:a,pattern:e}}function Cn(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const kn=e=>e.join("/").replace(/\/\/+/g,"/"),En=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),An=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",Mn=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function Rn(){return null!=(0,l.useContext)(yn)}function Tn(){return Rn()||mn(!1),(0,l.useContext)(yn).location}function Vn(){Rn()||mn(!1);let{basename:e,navigator:t}=(0,l.useContext)(vn),{matches:n}=(0,l.useContext)(gn),{pathname:i}=Tn(),o=JSON.stringify(n.map((e=>e.pathnameBase))),r=(0,l.useRef)(!1);(0,l.useEffect)((()=>{r.current=!0}));let a=(0,l.useCallback)((function(n,a){if(void 0===a&&(a={}),!r.current)return;if("number"==typeof n)return void t.go(n);let s=function(e,t,n){let i,o="string"==typeof e?pn(e):e,r=""===e||""===o.pathname?"/":o.pathname;if(null==r)i=n;else{let e=t.length-1;if(r.startsWith("..")){let t=r.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}i=e>=0?t[e]:"/"}let a=function(e,t){void 0===t&&(t="/");let{pathname:n,search:i="",hash:o=""}="string"==typeof e?pn(e):e,r=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:r,search:An(i),hash:Mn(o)}}(o,i);return r&&"/"!==r&&r.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}(n,JSON.parse(o),i);"/"!==e&&(s.pathname=kn([e,s.pathname])),(a.replace?t.replace:t.push)(s,a.state)}),[e,t,o,i]);return a}function jn(e){let{to:t,replace:n,state:i}=e;Rn()||mn(!1);let o=Vn();return(0,l.useEffect)((()=>{o(t,{replace:n,state:i})})),null}function Ln(e){mn(!1)}function zn(e){let{basename:t="/",children:n=null,location:i,navigationType:o=Qt.Pop,navigator:r,static:a=!1}=e;Rn()&&mn(!1);let s=En(t),c=(0,l.useMemo)((()=>({basename:s,navigator:r,static:a})),[s,r,a]);"string"==typeof i&&(i=pn(i));let{pathname:u="/",search:d="",hash:h="",state:f=null,key:p="default"}=i,v=(0,l.useMemo)((()=>{let e=Cn(u,s);return null==e?null:{pathname:e,search:d,hash:h,state:f,key:p}}),[s,u,d,h,f,p]);return null==v?null:(0,l.createElement)(vn.Provider,{value:c},(0,l.createElement)(yn.Provider,{children:n,value:{location:v,navigationType:o}}))}function In(e){let{children:t,location:n}=e;return function(e,t){Rn()||mn(!1);let{matches:n}=(0,l.useContext)(gn),i=n[n.length-1],o=i?i.params:{},r=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let a,s=Tn();if(t){var c;let e="string"==typeof t?pn(t):t;"/"===r||(null==(c=e.pathname)?void 0:c.startsWith(r))||mn(!1),a=e}else a=s;let u=a.pathname||"/",d=bn(e,{pathname:"/"===r?u:u.slice(r.length)||"/"});return function(e,t){return void 0===t&&(t=[]),null==e?null:e.reduceRight(((n,i,o)=>(0,l.createElement)(gn.Provider,{children:void 0!==i.route.element?i.route.element:n,value:{outlet:n,matches:t.concat(e.slice(0,o+1))}})),null)}(d&&d.map((e=>Object.assign({},e,{params:Object.assign({},o,e.params),pathname:kn([r,e.pathname]),pathnameBase:"/"===e.pathnameBase?r:kn([r,e.pathnameBase])}))),n)}(Gn(t),n)}function Gn(e){let t=[];return l.Children.forEach(e,(e=>{if(!(0,l.isValidElement)(e))return;if(e.type===l.Fragment)return void t.push.apply(t,Gn(e.props.children));e.type!==Ln&&mn(!1);let n={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(n.children=Gn(e.props.children)),t.push(n)})),t}function Dn(e){let{basename:t,children:n,window:i}=e,o=(0,l.useRef)();null==o.current&&(o.current=function(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,i=n.history;function o(){var e=n.location,t=e.pathname,o=e.search,r=e.hash,a=i.state||{};return[a.idx,{pathname:t,search:o,hash:r,state:a.usr||null,key:a.key||"default"}]}var r=null;n.addEventListener("popstate",(function(){if(r)d.call(r),r=null;else{var e=Qt.Pop,t=o(),n=t[0],i=t[1];if(d.length){if(null!=n){var a=l-n;a&&(r={action:e,location:i,retry:function(){g(-1*a)}},g(a))}}else y(e)}}));var a=Qt.Pop,s=o(),l=s[0],c=s[1],u=fn(),d=fn();function h(e){return"string"==typeof e?e:function(e){var t=e.pathname,n=void 0===t?"/":t,i=e.search,o=void 0===i?"":i,r=e.hash,a=void 0===r?"":r;return o&&"?"!==o&&(n+="?"===o.charAt(0)?o:"?"+o),a&&"#"!==a&&(n+="#"===a.charAt(0)?a:"#"+a),n}(e)}function f(e,t){return void 0===t&&(t=null),un({pathname:c.pathname,hash:"",search:""},"string"==typeof e?pn(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function p(e,t){return[{usr:e.state,key:e.key,idx:t},h(e)]}function v(e,t,n){return!d.length||(d.call({action:e,location:t,retry:n}),!1)}function y(e){a=e;var t=o();l=t[0],c=t[1],u.call({action:a,location:c})}function g(e){i.go(e)}null==l&&(l=0,i.replaceState(un({},i.state,{idx:l}),""));var m={get action(){return a},get location(){return c},createHref:h,push:function e(t,o){var r=Qt.Push,a=f(t,o);if(v(r,a,(function(){e(t,o)}))){var s=p(a,l+1),c=s[0],u=s[1];try{i.pushState(c,"",u)}catch(e){n.location.assign(u)}y(r)}},replace:function e(t,n){var o=Qt.Replace,r=f(t,n);if(v(o,r,(function(){e(t,n)}))){var a=p(r,l),s=a[0],c=a[1];i.replaceState(s,"",c),y(o)}},go:g,back:function(){g(-1)},forward:function(){g(1)},listen:function(e){return u.push(e)},block:function(e){var t=d.push(e);return 1===d.length&&n.addEventListener(dn,hn),function(){t(),d.length||n.removeEventListener(dn,hn)}}};return m}({window:i}));let r=o.current,[a,s]=(0,l.useState)({action:r.action,location:r.location});return(0,l.useLayoutEffect)((()=>r.listen(s)),[r]),(0,l.createElement)(zn,{basename:t,children:n,location:a.location,navigationType:a.action,navigator:r})}var Fn=n(6868),Nn=n.n(Fn),Bn=[{name:"first_name",label:"First Name",type:"text",required:!0},{name:"last_name",label:"Last Name",type:"text",required:!0},{name:"email",label:"Email",type:"email",required:!0}],Hn=[{name:"age",label:"Age",type:"number",required:!1},{name:"gender",label:"Gender",type:"select",required:!1,options:{male:"Male",female:"Female"}},{name:"phone_number",label:"Phone Number",type:"number",required:!0}],Un=function(){return Un=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Un.apply(this,arguments)},Wn=function(){var t=p((function(e){return e})),n=l.useState(Un({},t)),i=n[0],o=n[1],r=l.useState(!1),a=r[0],s=r[1],c=S(),u=Vn(),d=function(){let{matches:e}=(0,l.useContext)(gn),t=e[e.length-1];return t?t.params:{}}().id;l.useEffect((function(){document.title="Step ".concat(d)}),[d]),l.useEffect((function(){2===Number(d)&&i.phone_number.length>0?c(et(Un(Un({},i),{success:!0}))):c(et({success:!1}))}),[d,i,c]);var h=function(e){var t=!1;return e.forEach((function(e){var n=Object.entries(i).find((function(t){var n=t[0];return t[1],n===e.name})),o=n?n[1]:"";e.required&&""===o&&(t=!0)})),t},f=function(e){var t,n=e.target,r=n.name,a=n.value;o(Un(Un({},i),((t={})[r]=a,t)))},v=function(t,n){return(0,e.jsx)("input",{type:t.type,name:t.name,required:t.required,value:n,onChange:f})},y=function(t,n){return(0,e.jsxs)("select",Un({name:t.name,required:t.required,defaultValue:n,onChange:f},{children:[(0,e.jsx)("option",Un({value:""},{children:"Select"})),Object.entries(t.options).map((function(t){var n=t[0],i=t[1];return(0,e.jsx)("option",Un({value:n},{children:i}),n)}))]}))},g=function(t){var n=t.filter((function(e){return"select"===e.type})),o=t.filter((function(e){return"select"!==e.type}));return(0,e.jsxs)(e.Fragment,{children:[n.map((function(t){var n=Object.entries(i).find((function(e){var n=e[0];return e[1],n===t.name})),o="".concat(n?n[1]:"");return(0,e.jsxs)("div",Un({className:"form-control"},{children:[(0,e.jsxs)("label",{children:[t.label,": ",(0,e.jsx)("span",Un({className:"required"},{children:t.required?"*":""}))]}),y(t,o)]}),t.name)})),o.map((function(t){var n=Object.entries(i).find((function(e){var n=e[0];return e[1],n===t.name})),o="".concat(n?n[1]:"");return(0,e.jsxs)("div",Un({className:"form-control"},{children:[(0,e.jsxs)("label",{children:[t.label,": ",(0,e.jsx)("span",Un({className:"required"},{children:t.required?"*":""}))]}),v(t,o)]}),t.name)}))]})};return(0,e.jsx)("div",Un({id:"slices"},{children:(0,e.jsxs)("div",Un({className:"form"},{children:[{1:g(Bn),2:g(Hn)}[d||1],a&&(0,e.jsx)("p",Un({className:"error"},{children:"Please fill out all required fields"})),(0,e.jsxs)("div",Un({className:"form-control",style:{display:"flex",justifyContent:"space-between",margin:"10px 0",paddingBottom:0}},{children:[(0,e.jsx)("button",Un({disabled:1===Number(d),onClick:function(){return u("/step/1")}},{children:"Prev"})),(0,e.jsx)("button",Un({onClick:function(){console.log(i),s(!1),i&&c(et(i)),"1"!==d||h(Bn)?"2"!==d||h(Hn)?s(!0):u("/print"):u("/step/2")},disabled:2===Number(d)&&0===i.phone_number.length},{children:1===Number(d)?"Next":"Submit"}))]}))]}))}))},qn=function(){return qn=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},qn.apply(this,arguments)},$n=function(){var t=p((function(e){return e}));return(0,e.jsx)("div",qn({id:"print"},{children:(0,e.jsx)("pre",{children:JSON.stringify(t,null,2)})}))},Qn=function(){return Qn=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Qn.apply(this,arguments)},Kn={background:{color:"#181A18"},fpsLimit:60,interactivity:{detectsOn:"canvas",events:{resize:!0}},particles:{color:{value:"#ffffff"},number:{density:{enable:!0,area:1e3},limit:0,value:300},opacity:{animation:{enable:!0,minimumValue:.05,speed:1,sync:!1},random:{enable:!0,minimumValue:.05},value:1},shape:{type:"star"},size:{random:{enable:!0,minimumValue:.5,value:1}}}},Xn=function(){return Xn=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Xn.apply(this,arguments)};t.createRoot(document.getElementById("root")).render((0,e.jsx)((function({store:e,context:t,children:n,serverState:i}){const o=(0,l.useMemo)((()=>{const t=function(e,t){let n,i=v;function o(){a.onStateChange&&a.onStateChange()}function r(){n||(n=t?t.addNestedSub(o):e.subscribe(o),i=function(){const e=s();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let i=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){i&&null!==t&&(i=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}const a={addNestedSub:function(e){return r(),i.subscribe(e)},notifyNestedSubs:function(){i.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:r,tryUnsubscribe:function(){n&&(n(),n=void 0,i.clear(),i=v)},getListeners:()=>i};return a}(e);return{store:e,subscription:t,getServerState:i?()=>i:void 0}}),[e,i]),r=(0,l.useMemo)((()=>e.getState()),[e]);y((()=>{const{subscription:t}=o;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),r!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[o,r]);const a=t||c;return l.createElement(a.Provider,{value:o},n)}),Xn({store:It},{children:(0,e.jsx)($t,Xn({loading:null,persistor:Gt},{children:(0,e.jsx)((function(){var t=this,n=p((function(e){return e})),i=l.useCallback((function(e){return function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))}(t,void 0,void 0,(function(){return function(e,t){var n,i,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,i=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(t){switch(t.label){case 0:return[4,console.log(e)];case 1:return t.sent(),[2]}}))}))}),[]);return(0,e.jsxs)("div",Qn({className:"App"},{children:[(0,e.jsx)(Nn(),{id:"tsparticles",loaded:i,options:Kn}),(0,e.jsx)(Dn,{children:(0,e.jsxs)(In,{children:[(0,e.jsx)(Ln,{path:"/",element:(0,e.jsx)(jn,{to:"/step/1",replace:!0})}),(0,e.jsx)(Ln,{path:"/step/:id",element:(0,e.jsx)(Wn,{})}),n.success&&(0,e.jsx)(Ln,{path:"/print",element:(0,e.jsx)($n,{})})]})})]}))}),{})}))})))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,